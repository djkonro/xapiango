/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.8
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

package xapian



import _ "runtime/cgo"
import "unsafe"

type _ unsafe.Pointer



type _swig_fnptr *byte
type _swig_memberptr *byte

//extern xapianSwigCgocall
func SwigCgocall()
//extern xapianSwigCgocallDone
func SwigCgocallDone()
//extern xapianSwigCgocallBack
func SwigCgocallBack()
//extern xapianSwigCgocallBackDone
func SwigCgocallBackDone()

func Version_string() string
func Major_version() int
func Minor_version() int
func Revision() int
func GetBAD_VALUENO() uint
func _swig_wrap_open_stub__SWIG_0(string) SwigcptrDatabase

func Open_stub__SWIG_0(arg1 string) Database {
	return _swig_wrap_open_stub__SWIG_0(arg1)
}

func _swig_wrap_open_stub__SWIG_1(string, int) SwigcptrWritableDatabase

func Open_stub__SWIG_1(arg1 string, arg2 int) WritableDatabase {
	return _swig_wrap_open_stub__SWIG_1(arg1, arg2)
}

func Open_stub(a ...interface{}) interface{} {
	argc := len(a)
	if argc == 1 {
		return Open_stub__SWIG_0(a[0].(string))
	}
	if argc == 2 {
		return Open_stub__SWIG_1(a[0].(string), a[1].(int))
	}
	panic("No match for overloaded function call")
}

func _swig_wrap_inmemory_open() SwigcptrWritableDatabase

func Inmemory_open() WritableDatabase {
	return _swig_wrap_inmemory_open()
}

func _swig_wrap_brass_open__SWIG_0(string) SwigcptrDatabase

func Brass_open__SWIG_0(arg1 string) Database {
	return _swig_wrap_brass_open__SWIG_0(arg1)
}

func _swig_wrap_brass_open__SWIG_1(string, int, int) SwigcptrWritableDatabase

func Brass_open__SWIG_1(arg1 string, arg2 int, arg3 int) WritableDatabase {
	return _swig_wrap_brass_open__SWIG_1(arg1, arg2, arg3)
}

func _swig_wrap_brass_open__SWIG_2(string, int) SwigcptrWritableDatabase

func Brass_open__SWIG_2(arg1 string, arg2 int) WritableDatabase {
	return _swig_wrap_brass_open__SWIG_2(arg1, arg2)
}

func Brass_open(a ...interface{}) interface{} {
	argc := len(a)
	if argc == 1 {
		return Brass_open__SWIG_0(a[0].(string))
	}
	if argc == 2 {
		return Brass_open__SWIG_2(a[0].(string), a[1].(int))
	}
	if argc == 3 {
		return Brass_open__SWIG_1(a[0].(string), a[1].(int), a[2].(int))
	}
	panic("No match for overloaded function call")
}

func _swig_wrap_chert_open__SWIG_0(string) SwigcptrDatabase

func Chert_open__SWIG_0(arg1 string) Database {
	return _swig_wrap_chert_open__SWIG_0(arg1)
}

func _swig_wrap_chert_open__SWIG_1(string, int, int) SwigcptrWritableDatabase

func Chert_open__SWIG_1(arg1 string, arg2 int, arg3 int) WritableDatabase {
	return _swig_wrap_chert_open__SWIG_1(arg1, arg2, arg3)
}

func _swig_wrap_chert_open__SWIG_2(string, int) SwigcptrWritableDatabase

func Chert_open__SWIG_2(arg1 string, arg2 int) WritableDatabase {
	return _swig_wrap_chert_open__SWIG_2(arg1, arg2)
}

func Chert_open(a ...interface{}) interface{} {
	argc := len(a)
	if argc == 1 {
		return Chert_open__SWIG_0(a[0].(string))
	}
	if argc == 2 {
		return Chert_open__SWIG_2(a[0].(string), a[1].(int))
	}
	if argc == 3 {
		return Chert_open__SWIG_1(a[0].(string), a[1].(int), a[2].(int))
	}
	panic("No match for overloaded function call")
}

func _swig_wrap_remote_open__SWIG_0(string, uint, uint, uint) SwigcptrDatabase

func Remote_open__SWIG_0(arg1 string, arg2 uint, arg3 uint, arg4 uint) Database {
	return _swig_wrap_remote_open__SWIG_0(arg1, arg2, arg3, arg4)
}

func _swig_wrap_remote_open__SWIG_1(string, uint, uint) SwigcptrDatabase

func Remote_open__SWIG_1(arg1 string, arg2 uint, arg3 uint) Database {
	return _swig_wrap_remote_open__SWIG_1(arg1, arg2, arg3)
}

func _swig_wrap_remote_open__SWIG_2(string, uint) SwigcptrDatabase

func Remote_open__SWIG_2(arg1 string, arg2 uint) Database {
	return _swig_wrap_remote_open__SWIG_2(arg1, arg2)
}

func _swig_wrap_remote_open_writable__SWIG_0(string, uint, uint, uint) SwigcptrWritableDatabase

func Remote_open_writable__SWIG_0(arg1 string, arg2 uint, arg3 uint, arg4 uint) WritableDatabase {
	return _swig_wrap_remote_open_writable__SWIG_0(arg1, arg2, arg3, arg4)
}

func _swig_wrap_remote_open_writable__SWIG_1(string, uint, uint) SwigcptrWritableDatabase

func Remote_open_writable__SWIG_1(arg1 string, arg2 uint, arg3 uint) WritableDatabase {
	return _swig_wrap_remote_open_writable__SWIG_1(arg1, arg2, arg3)
}

func _swig_wrap_remote_open_writable__SWIG_2(string, uint) SwigcptrWritableDatabase

func Remote_open_writable__SWIG_2(arg1 string, arg2 uint) WritableDatabase {
	return _swig_wrap_remote_open_writable__SWIG_2(arg1, arg2)
}

func _swig_wrap_remote_open__SWIG_3(string, string, uint) SwigcptrDatabase

func Remote_open__SWIG_3(arg1 string, arg2 string, arg3 uint) Database {
	return _swig_wrap_remote_open__SWIG_3(arg1, arg2, arg3)
}

func _swig_wrap_remote_open__SWIG_4(string, string) SwigcptrDatabase

func Remote_open__SWIG_4(arg1 string, arg2 string) Database {
	return _swig_wrap_remote_open__SWIG_4(arg1, arg2)
}

func Remote_open(a ...interface{}) Database {
	argc := len(a)
	if argc == 2 {
		if _, ok := a[1].(string); !ok {
			goto check_1
		}
		return Remote_open__SWIG_4(a[0].(string), a[1].(string))
	}
check_1:
	if argc == 2 {
		return Remote_open__SWIG_2(a[0].(string), a[1].(uint))
	}
	if argc == 3 {
		if _, ok := a[1].(string); !ok {
			goto check_3
		}
		return Remote_open__SWIG_3(a[0].(string), a[1].(string), a[2].(uint))
	}
check_3:
	if argc == 3 {
		return Remote_open__SWIG_1(a[0].(string), a[1].(uint), a[2].(uint))
	}
	if argc == 4 {
		return Remote_open__SWIG_0(a[0].(string), a[1].(uint), a[2].(uint), a[3].(uint))
	}
	panic("No match for overloaded function call")
}

func _swig_wrap_remote_open_writable__SWIG_3(string, string, uint) SwigcptrWritableDatabase

func Remote_open_writable__SWIG_3(arg1 string, arg2 string, arg3 uint) WritableDatabase {
	return _swig_wrap_remote_open_writable__SWIG_3(arg1, arg2, arg3)
}

func _swig_wrap_remote_open_writable__SWIG_4(string, string) SwigcptrWritableDatabase

func Remote_open_writable__SWIG_4(arg1 string, arg2 string) WritableDatabase {
	return _swig_wrap_remote_open_writable__SWIG_4(arg1, arg2)
}

func Remote_open_writable(a ...interface{}) WritableDatabase {
	argc := len(a)
	if argc == 2 {
		if _, ok := a[1].(string); !ok {
			goto check_1
		}
		return Remote_open_writable__SWIG_4(a[0].(string), a[1].(string))
	}
check_1:
	if argc == 2 {
		return Remote_open_writable__SWIG_2(a[0].(string), a[1].(uint))
	}
	if argc == 3 {
		if _, ok := a[1].(string); !ok {
			goto check_3
		}
		return Remote_open_writable__SWIG_3(a[0].(string), a[1].(string), a[2].(uint))
	}
check_3:
	if argc == 3 {
		return Remote_open_writable__SWIG_1(a[0].(string), a[1].(uint), a[2].(uint))
	}
	if argc == 4 {
		return Remote_open_writable__SWIG_0(a[0].(string), a[1].(uint), a[2].(uint), a[3].(uint))
	}
	panic("No match for overloaded function call")
}

type SwigcptrPositionIterator uintptr

func (p SwigcptrPositionIterator) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrPositionIterator) SwigIsPositionIterator() {
}

func _swig_wrap_new_PositionIterator() SwigcptrPositionIterator

func NewPositionIterator() PositionIterator {
	return _swig_wrap_new_PositionIterator()
}

func _swig_wrap_delete_PositionIterator(uintptr)

func DeletePositionIterator(arg1 PositionIterator) {
	_swig_wrap_delete_PositionIterator(arg1.Swigcptr())
}

func _swig_wrap_PositionIterator_skip_to(SwigcptrPositionIterator, uint)

func (arg1 SwigcptrPositionIterator) Skip_to(arg2 uint) {
	_swig_wrap_PositionIterator_skip_to(arg1, arg2)
}

func _swig_wrap_PositionIterator_get_description(SwigcptrPositionIterator) string

func (arg1 SwigcptrPositionIterator) Get_description() string {
	return _swig_wrap_PositionIterator_get_description(arg1)
}

func _swig_wrap_PositionIterator_equals(SwigcptrPositionIterator, uintptr) bool

func (arg1 SwigcptrPositionIterator) Equals(arg2 PositionIterator) bool {
	return _swig_wrap_PositionIterator_equals(arg1, arg2.Swigcptr())
}

func _swig_wrap_PositionIterator_get_termpos(SwigcptrPositionIterator) uint

func (arg1 SwigcptrPositionIterator) Get_termpos() uint {
	return _swig_wrap_PositionIterator_get_termpos(arg1)
}

func _swig_wrap_PositionIterator_next(SwigcptrPositionIterator)

func (arg1 SwigcptrPositionIterator) Next() {
	_swig_wrap_PositionIterator_next(arg1)
}

type PositionIterator interface {
	Swigcptr() uintptr
	SwigIsPositionIterator()
	Skip_to(arg2 uint)
	Get_description() string
	Equals(arg2 PositionIterator) bool
	Get_termpos() uint
	Next()
}

type SwigcptrPostingIterator uintptr

func (p SwigcptrPostingIterator) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrPostingIterator) SwigIsPostingIterator() {
}

func _swig_wrap_new_PostingIterator() SwigcptrPostingIterator

func NewPostingIterator() PostingIterator {
	return _swig_wrap_new_PostingIterator()
}

func _swig_wrap_delete_PostingIterator(uintptr)

func DeletePostingIterator(arg1 PostingIterator) {
	_swig_wrap_delete_PostingIterator(arg1.Swigcptr())
}

func _swig_wrap_PostingIterator_get_wdf(SwigcptrPostingIterator) uint

func (arg1 SwigcptrPostingIterator) Get_wdf() uint {
	return _swig_wrap_PostingIterator_get_wdf(arg1)
}

func _swig_wrap_PostingIterator_get_doclength(SwigcptrPostingIterator) uint

func (arg1 SwigcptrPostingIterator) Get_doclength() uint {
	return _swig_wrap_PostingIterator_get_doclength(arg1)
}

func _swig_wrap_PostingIterator_positionlist_begin(SwigcptrPostingIterator) SwigcptrPositionIterator

func (arg1 SwigcptrPostingIterator) Positionlist_begin() PositionIterator {
	return _swig_wrap_PostingIterator_positionlist_begin(arg1)
}

func _swig_wrap_PostingIterator_positionlist_end(SwigcptrPostingIterator) SwigcptrPositionIterator

func (arg1 SwigcptrPostingIterator) Positionlist_end() PositionIterator {
	return _swig_wrap_PostingIterator_positionlist_end(arg1)
}

func _swig_wrap_PostingIterator_skip_to(SwigcptrPostingIterator, uint)

func (arg1 SwigcptrPostingIterator) Skip_to(arg2 uint) {
	_swig_wrap_PostingIterator_skip_to(arg1, arg2)
}

func _swig_wrap_PostingIterator_get_description(SwigcptrPostingIterator) string

func (arg1 SwigcptrPostingIterator) Get_description() string {
	return _swig_wrap_PostingIterator_get_description(arg1)
}

func _swig_wrap_PostingIterator_equals(SwigcptrPostingIterator, uintptr) bool

func (arg1 SwigcptrPostingIterator) Equals(arg2 PostingIterator) bool {
	return _swig_wrap_PostingIterator_equals(arg1, arg2.Swigcptr())
}

func _swig_wrap_PostingIterator_get_docid(SwigcptrPostingIterator) uint

func (arg1 SwigcptrPostingIterator) Get_docid() uint {
	return _swig_wrap_PostingIterator_get_docid(arg1)
}

func _swig_wrap_PostingIterator_next(SwigcptrPostingIterator)

func (arg1 SwigcptrPostingIterator) Next() {
	_swig_wrap_PostingIterator_next(arg1)
}

type PostingIterator interface {
	Swigcptr() uintptr
	SwigIsPostingIterator()
	Get_wdf() uint
	Get_doclength() uint
	Positionlist_begin() PositionIterator
	Positionlist_end() PositionIterator
	Skip_to(arg2 uint)
	Get_description() string
	Equals(arg2 PostingIterator) bool
	Get_docid() uint
	Next()
}

type SwigcptrTermIterator uintptr

func (p SwigcptrTermIterator) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrTermIterator) SwigIsTermIterator() {
}

func _swig_wrap_new_TermIterator() SwigcptrTermIterator

func NewTermIterator() TermIterator {
	return _swig_wrap_new_TermIterator()
}

func _swig_wrap_delete_TermIterator(uintptr)

func DeleteTermIterator(arg1 TermIterator) {
	_swig_wrap_delete_TermIterator(arg1.Swigcptr())
}

func _swig_wrap_TermIterator_get_wdf(SwigcptrTermIterator) uint

func (arg1 SwigcptrTermIterator) Get_wdf() uint {
	return _swig_wrap_TermIterator_get_wdf(arg1)
}

func _swig_wrap_TermIterator_get_termfreq(SwigcptrTermIterator) uint

func (arg1 SwigcptrTermIterator) Get_termfreq() uint {
	return _swig_wrap_TermIterator_get_termfreq(arg1)
}

func _swig_wrap_TermIterator_positionlist_count(SwigcptrTermIterator) uint

func (arg1 SwigcptrTermIterator) Positionlist_count() uint {
	return _swig_wrap_TermIterator_positionlist_count(arg1)
}

func _swig_wrap_TermIterator_positionlist_begin(SwigcptrTermIterator) SwigcptrPositionIterator

func (arg1 SwigcptrTermIterator) Positionlist_begin() PositionIterator {
	return _swig_wrap_TermIterator_positionlist_begin(arg1)
}

func _swig_wrap_TermIterator_positionlist_end(SwigcptrTermIterator) SwigcptrPositionIterator

func (arg1 SwigcptrTermIterator) Positionlist_end() PositionIterator {
	return _swig_wrap_TermIterator_positionlist_end(arg1)
}

func _swig_wrap_TermIterator_skip_to(SwigcptrTermIterator, string)

func (arg1 SwigcptrTermIterator) Skip_to(arg2 string) {
	_swig_wrap_TermIterator_skip_to(arg1, arg2)
}

func _swig_wrap_TermIterator_get_description(SwigcptrTermIterator) string

func (arg1 SwigcptrTermIterator) Get_description() string {
	return _swig_wrap_TermIterator_get_description(arg1)
}

func _swig_wrap_TermIterator_equals(SwigcptrTermIterator, uintptr) bool

func (arg1 SwigcptrTermIterator) Equals(arg2 TermIterator) bool {
	return _swig_wrap_TermIterator_equals(arg1, arg2.Swigcptr())
}

func _swig_wrap_TermIterator_get_term(SwigcptrTermIterator) string

func (arg1 SwigcptrTermIterator) Get_term() string {
	return _swig_wrap_TermIterator_get_term(arg1)
}

func _swig_wrap_TermIterator_next(SwigcptrTermIterator)

func (arg1 SwigcptrTermIterator) Next() {
	_swig_wrap_TermIterator_next(arg1)
}

type TermIterator interface {
	Swigcptr() uintptr
	SwigIsTermIterator()
	Get_wdf() uint
	Get_termfreq() uint
	Positionlist_count() uint
	Positionlist_begin() PositionIterator
	Positionlist_end() PositionIterator
	Skip_to(arg2 string)
	Get_description() string
	Equals(arg2 TermIterator) bool
	Get_term() string
	Next()
}

type SwigcptrValueIterator uintptr

func (p SwigcptrValueIterator) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrValueIterator) SwigIsValueIterator() {
}

func _swig_wrap_new_ValueIterator() SwigcptrValueIterator

func NewValueIterator() ValueIterator {
	return _swig_wrap_new_ValueIterator()
}

func _swig_wrap_delete_ValueIterator(uintptr)

func DeleteValueIterator(arg1 ValueIterator) {
	_swig_wrap_delete_ValueIterator(arg1.Swigcptr())
}

func _swig_wrap_ValueIterator_get_docid(SwigcptrValueIterator) uint

func (arg1 SwigcptrValueIterator) Get_docid() uint {
	return _swig_wrap_ValueIterator_get_docid(arg1)
}

func _swig_wrap_ValueIterator_get_valueno(SwigcptrValueIterator) uint

func (arg1 SwigcptrValueIterator) Get_valueno() uint {
	return _swig_wrap_ValueIterator_get_valueno(arg1)
}

func _swig_wrap_ValueIterator_skip_to(SwigcptrValueIterator, uint)

func (arg1 SwigcptrValueIterator) Skip_to(arg2 uint) {
	_swig_wrap_ValueIterator_skip_to(arg1, arg2)
}

func _swig_wrap_ValueIterator_check(SwigcptrValueIterator, uint) bool

func (arg1 SwigcptrValueIterator) Check(arg2 uint) bool {
	return _swig_wrap_ValueIterator_check(arg1, arg2)
}

func _swig_wrap_ValueIterator_get_description(SwigcptrValueIterator) string

func (arg1 SwigcptrValueIterator) Get_description() string {
	return _swig_wrap_ValueIterator_get_description(arg1)
}

func _swig_wrap_ValueIterator_equals(SwigcptrValueIterator, uintptr) bool

func (arg1 SwigcptrValueIterator) Equals(arg2 ValueIterator) bool {
	return _swig_wrap_ValueIterator_equals(arg1, arg2.Swigcptr())
}

func _swig_wrap_ValueIterator_get_value(SwigcptrValueIterator) string

func (arg1 SwigcptrValueIterator) Get_value() string {
	return _swig_wrap_ValueIterator_get_value(arg1)
}

func _swig_wrap_ValueIterator_next(SwigcptrValueIterator)

func (arg1 SwigcptrValueIterator) Next() {
	_swig_wrap_ValueIterator_next(arg1)
}

type ValueIterator interface {
	Swigcptr() uintptr
	SwigIsValueIterator()
	Get_docid() uint
	Get_valueno() uint
	Skip_to(arg2 uint)
	Check(arg2 uint) bool
	Get_description() string
	Equals(arg2 ValueIterator) bool
	Get_value() string
	Next()
}

type SwigcptrDocument uintptr

func (p SwigcptrDocument) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrDocument) SwigIsDocument() {
}

func _swig_wrap_new_Document() SwigcptrDocument

func NewDocument() Document {
	return _swig_wrap_new_Document()
}

func _swig_wrap_delete_Document(uintptr)

func DeleteDocument(arg1 Document) {
	_swig_wrap_delete_Document(arg1.Swigcptr())
}

func _swig_wrap_Document_get_value(SwigcptrDocument, uint) string

func (arg1 SwigcptrDocument) Get_value(arg2 uint) string {
	return _swig_wrap_Document_get_value(arg1, arg2)
}

func _swig_wrap_Document_add_value(SwigcptrDocument, uint, string)

func (arg1 SwigcptrDocument) Add_value(arg2 uint, arg3 string) {
	_swig_wrap_Document_add_value(arg1, arg2, arg3)
}

func _swig_wrap_Document_remove_value(SwigcptrDocument, uint)

func (arg1 SwigcptrDocument) Remove_value(arg2 uint) {
	_swig_wrap_Document_remove_value(arg1, arg2)
}

func _swig_wrap_Document_clear_values(SwigcptrDocument)

func (arg1 SwigcptrDocument) Clear_values() {
	_swig_wrap_Document_clear_values(arg1)
}

func _swig_wrap_Document_get_data(SwigcptrDocument) string

func (arg1 SwigcptrDocument) Get_data() string {
	return _swig_wrap_Document_get_data(arg1)
}

func _swig_wrap_Document_set_data(SwigcptrDocument, string)

func (arg1 SwigcptrDocument) Set_data(arg2 string) {
	_swig_wrap_Document_set_data(arg1, arg2)
}

func _swig_wrap_Document_add_posting__SWIG_0(SwigcptrDocument, string, uint, uint)

func (arg1 SwigcptrDocument) Add_posting__SWIG_0(arg2 string, arg3 uint, arg4 uint) {
	_swig_wrap_Document_add_posting__SWIG_0(arg1, arg2, arg3, arg4)
}

func _swig_wrap_Document_add_posting__SWIG_1(SwigcptrDocument, string, uint)

func (arg1 SwigcptrDocument) Add_posting__SWIG_1(arg2 string, arg3 uint) {
	_swig_wrap_Document_add_posting__SWIG_1(arg1, arg2, arg3)
}

func (p SwigcptrDocument) Add_posting(a ...interface{}) {
	argc := len(a)
	if argc == 2 {
		p.Add_posting__SWIG_1(a[0].(string), a[1].(uint))
		return
	}
	if argc == 3 {
		p.Add_posting__SWIG_0(a[0].(string), a[1].(uint), a[2].(uint))
		return
	}
	panic("No match for overloaded function call")
}

func _swig_wrap_Document_add_term__SWIG_0(SwigcptrDocument, string, uint)

func (arg1 SwigcptrDocument) Add_term__SWIG_0(arg2 string, arg3 uint) {
	_swig_wrap_Document_add_term__SWIG_0(arg1, arg2, arg3)
}

func _swig_wrap_Document_add_term__SWIG_1(SwigcptrDocument, string)

func (arg1 SwigcptrDocument) Add_term__SWIG_1(arg2 string) {
	_swig_wrap_Document_add_term__SWIG_1(arg1, arg2)
}

func (p SwigcptrDocument) Add_term(a ...interface{}) {
	argc := len(a)
	if argc == 1 {
		p.Add_term__SWIG_1(a[0].(string))
		return
	}
	if argc == 2 {
		p.Add_term__SWIG_0(a[0].(string), a[1].(uint))
		return
	}
	panic("No match for overloaded function call")
}

func _swig_wrap_Document_add_boolean_term(SwigcptrDocument, string)

func (arg1 SwigcptrDocument) Add_boolean_term(arg2 string) {
	_swig_wrap_Document_add_boolean_term(arg1, arg2)
}

func _swig_wrap_Document_remove_posting__SWIG_0(SwigcptrDocument, string, uint, uint)

func (arg1 SwigcptrDocument) Remove_posting__SWIG_0(arg2 string, arg3 uint, arg4 uint) {
	_swig_wrap_Document_remove_posting__SWIG_0(arg1, arg2, arg3, arg4)
}

func _swig_wrap_Document_remove_posting__SWIG_1(SwigcptrDocument, string, uint)

func (arg1 SwigcptrDocument) Remove_posting__SWIG_1(arg2 string, arg3 uint) {
	_swig_wrap_Document_remove_posting__SWIG_1(arg1, arg2, arg3)
}

func (p SwigcptrDocument) Remove_posting(a ...interface{}) {
	argc := len(a)
	if argc == 2 {
		p.Remove_posting__SWIG_1(a[0].(string), a[1].(uint))
		return
	}
	if argc == 3 {
		p.Remove_posting__SWIG_0(a[0].(string), a[1].(uint), a[2].(uint))
		return
	}
	panic("No match for overloaded function call")
}

func _swig_wrap_Document_remove_term(SwigcptrDocument, string)

func (arg1 SwigcptrDocument) Remove_term(arg2 string) {
	_swig_wrap_Document_remove_term(arg1, arg2)
}

func _swig_wrap_Document_clear_terms(SwigcptrDocument)

func (arg1 SwigcptrDocument) Clear_terms() {
	_swig_wrap_Document_clear_terms(arg1)
}

func _swig_wrap_Document_termlist_count(SwigcptrDocument) uint

func (arg1 SwigcptrDocument) Termlist_count() uint {
	return _swig_wrap_Document_termlist_count(arg1)
}

func _swig_wrap_Document_termlist_begin(SwigcptrDocument) SwigcptrTermIterator

func (arg1 SwigcptrDocument) Termlist_begin() TermIterator {
	return _swig_wrap_Document_termlist_begin(arg1)
}

func _swig_wrap_Document_termlist_end(SwigcptrDocument) SwigcptrTermIterator

func (arg1 SwigcptrDocument) Termlist_end() TermIterator {
	return _swig_wrap_Document_termlist_end(arg1)
}

func _swig_wrap_Document_values_count(SwigcptrDocument) uint

func (arg1 SwigcptrDocument) Values_count() uint {
	return _swig_wrap_Document_values_count(arg1)
}

func _swig_wrap_Document_values_begin(SwigcptrDocument) SwigcptrValueIterator

func (arg1 SwigcptrDocument) Values_begin() ValueIterator {
	return _swig_wrap_Document_values_begin(arg1)
}

func _swig_wrap_Document_values_end(SwigcptrDocument) SwigcptrValueIterator

func (arg1 SwigcptrDocument) Values_end() ValueIterator {
	return _swig_wrap_Document_values_end(arg1)
}

func _swig_wrap_Document_get_docid(SwigcptrDocument) uint

func (arg1 SwigcptrDocument) Get_docid() uint {
	return _swig_wrap_Document_get_docid(arg1)
}

func _swig_wrap_Document_serialise(SwigcptrDocument) string

func (arg1 SwigcptrDocument) Serialise() string {
	return _swig_wrap_Document_serialise(arg1)
}

func _swig_wrap_Document_unserialise(string) SwigcptrDocument

func DocumentUnserialise(arg1 string) Document {
	return _swig_wrap_Document_unserialise(arg1)
}

func _swig_wrap_Document_get_description(SwigcptrDocument) string

func (arg1 SwigcptrDocument) Get_description() string {
	return _swig_wrap_Document_get_description(arg1)
}

type Document interface {
	Swigcptr() uintptr
	SwigIsDocument()
	Get_value(arg2 uint) string
	Add_value(arg2 uint, arg3 string)
	Remove_value(arg2 uint)
	Clear_values()
	Get_data() string
	Set_data(arg2 string)
	Add_posting(a ...interface{})
	Add_term(a ...interface{})
	Add_boolean_term(arg2 string)
	Remove_posting(a ...interface{})
	Remove_term(arg2 string)
	Clear_terms()
	Termlist_count() uint
	Termlist_begin() TermIterator
	Termlist_end() TermIterator
	Values_count() uint
	Values_begin() ValueIterator
	Values_end() ValueIterator
	Get_docid() uint
	Serialise() string
	Get_description() string
}

type SwigcptrRegistry uintptr

func (p SwigcptrRegistry) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrRegistry) SwigIsRegistry() {
}

func _swig_wrap_new_Registry() SwigcptrRegistry

func NewRegistry() Registry {
	return _swig_wrap_new_Registry()
}

func _swig_wrap_delete_Registry(uintptr)

func DeleteRegistry(arg1 Registry) {
	_swig_wrap_delete_Registry(arg1.Swigcptr())
}

func _swig_wrap_Registry_register_weighting_scheme(SwigcptrRegistry, uintptr)

func (arg1 SwigcptrRegistry) Register_weighting_scheme(arg2 Weight) {
	_swig_wrap_Registry_register_weighting_scheme(arg1, arg2.Swigcptr())
}

func _swig_wrap_Registry_get_weighting_scheme(SwigcptrRegistry, string) SwigcptrWeight

func (arg1 SwigcptrRegistry) Get_weighting_scheme(arg2 string) Weight {
	return _swig_wrap_Registry_get_weighting_scheme(arg1, arg2)
}

func _swig_wrap_Registry_register_posting_source(SwigcptrRegistry, uintptr)

func (arg1 SwigcptrRegistry) Register_posting_source(arg2 PostingSource) {
	_swig_wrap_Registry_register_posting_source(arg1, arg2.Swigcptr())
}

func _swig_wrap_Registry_get_posting_source(SwigcptrRegistry, string) SwigcptrPostingSource

func (arg1 SwigcptrRegistry) Get_posting_source(arg2 string) PostingSource {
	return _swig_wrap_Registry_get_posting_source(arg1, arg2)
}

func _swig_wrap_Registry_register_match_spy(SwigcptrRegistry, uintptr)

func (arg1 SwigcptrRegistry) Register_match_spy(arg2 MatchSpy) {
	_swig_wrap_Registry_register_match_spy(arg1, arg2.Swigcptr())
}

func _swig_wrap_Registry_get_match_spy(SwigcptrRegistry, string) SwigcptrMatchSpy

func (arg1 SwigcptrRegistry) Get_match_spy(arg2 string) MatchSpy {
	return _swig_wrap_Registry_get_match_spy(arg1, arg2)
}

func _swig_wrap_Registry_register_lat_long_metric(SwigcptrRegistry, uintptr)

func (arg1 SwigcptrRegistry) Register_lat_long_metric(arg2 LatLongMetric) {
	_swig_wrap_Registry_register_lat_long_metric(arg1, arg2.Swigcptr())
}

func _swig_wrap_Registry_get_lat_long_metric(SwigcptrRegistry, string) SwigcptrLatLongMetric

func (arg1 SwigcptrRegistry) Get_lat_long_metric(arg2 string) LatLongMetric {
	return _swig_wrap_Registry_get_lat_long_metric(arg1, arg2)
}

type Registry interface {
	Swigcptr() uintptr
	SwigIsRegistry()
	Register_weighting_scheme(arg2 Weight)
	Get_weighting_scheme(arg2 string) Weight
	Register_posting_source(arg2 PostingSource)
	Get_posting_source(arg2 string) PostingSource
	Register_match_spy(arg2 MatchSpy)
	Get_match_spy(arg2 string) MatchSpy
	Register_lat_long_metric(arg2 LatLongMetric)
	Get_lat_long_metric(arg2 string) LatLongMetric
}

type SwigcptrQuery uintptr

func (p SwigcptrQuery) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrQuery) SwigIsQuery() {
}

func _swig_wrap_Query_MatchNothing_get() SwigcptrQuery

func GetQueryMatchNothing() Query {
	return _swig_wrap_Query_MatchNothing_get()
}

func _swig_wrap_Query_MatchAll_get() SwigcptrQuery

func GetQueryMatchAll() Query {
	return _swig_wrap_Query_MatchAll_get()
}

type XapianQueryOp int
func _swig_getQuery_OP_AND_Query() XapianQueryOp
var QueryOP_AND XapianQueryOp = _swig_getQuery_OP_AND_Query()
func _swig_getQuery_OP_OR_Query() XapianQueryOp
var QueryOP_OR XapianQueryOp = _swig_getQuery_OP_OR_Query()
func _swig_getQuery_OP_AND_NOT_Query() XapianQueryOp
var QueryOP_AND_NOT XapianQueryOp = _swig_getQuery_OP_AND_NOT_Query()
func _swig_getQuery_OP_XOR_Query() XapianQueryOp
var QueryOP_XOR XapianQueryOp = _swig_getQuery_OP_XOR_Query()
func _swig_getQuery_OP_AND_MAYBE_Query() XapianQueryOp
var QueryOP_AND_MAYBE XapianQueryOp = _swig_getQuery_OP_AND_MAYBE_Query()
func _swig_getQuery_OP_FILTER_Query() XapianQueryOp
var QueryOP_FILTER XapianQueryOp = _swig_getQuery_OP_FILTER_Query()
func _swig_getQuery_OP_NEAR_Query() XapianQueryOp
var QueryOP_NEAR XapianQueryOp = _swig_getQuery_OP_NEAR_Query()
func _swig_getQuery_OP_PHRASE_Query() XapianQueryOp
var QueryOP_PHRASE XapianQueryOp = _swig_getQuery_OP_PHRASE_Query()
func _swig_getQuery_OP_VALUE_RANGE_Query() XapianQueryOp
var QueryOP_VALUE_RANGE XapianQueryOp = _swig_getQuery_OP_VALUE_RANGE_Query()
func _swig_getQuery_OP_SCALE_WEIGHT_Query() XapianQueryOp
var QueryOP_SCALE_WEIGHT XapianQueryOp = _swig_getQuery_OP_SCALE_WEIGHT_Query()
func _swig_getQuery_OP_ELITE_SET_Query() XapianQueryOp
var QueryOP_ELITE_SET XapianQueryOp = _swig_getQuery_OP_ELITE_SET_Query()
func _swig_getQuery_OP_VALUE_GE_Query() XapianQueryOp
var QueryOP_VALUE_GE XapianQueryOp = _swig_getQuery_OP_VALUE_GE_Query()
func _swig_getQuery_OP_VALUE_LE_Query() XapianQueryOp
var QueryOP_VALUE_LE XapianQueryOp = _swig_getQuery_OP_VALUE_LE_Query()
func _swig_getQuery_OP_SYNONYM_Query() XapianQueryOp
var QueryOP_SYNONYM XapianQueryOp = _swig_getQuery_OP_SYNONYM_Query()
func _swig_wrap_new_Query__SWIG_0() SwigcptrQuery

func NewQuery__SWIG_0() Query {
	return _swig_wrap_new_Query__SWIG_0()
}

func _swig_wrap_delete_Query(uintptr)

func DeleteQuery(arg1 Query) {
	_swig_wrap_delete_Query(arg1.Swigcptr())
}

func _swig_wrap_new_Query__SWIG_1(string, uint, uint) SwigcptrQuery

func NewQuery__SWIG_1(arg1 string, arg2 uint, arg3 uint) Query {
	return _swig_wrap_new_Query__SWIG_1(arg1, arg2, arg3)
}

func _swig_wrap_new_Query__SWIG_2(string, uint) SwigcptrQuery

func NewQuery__SWIG_2(arg1 string, arg2 uint) Query {
	return _swig_wrap_new_Query__SWIG_2(arg1, arg2)
}

func _swig_wrap_new_Query__SWIG_3(string) SwigcptrQuery

func NewQuery__SWIG_3(arg1 string) Query {
	return _swig_wrap_new_Query__SWIG_3(arg1)
}

func _swig_wrap_new_Query__SWIG_4(uintptr) SwigcptrQuery

func NewQuery__SWIG_4(arg1 PostingSource) Query {
	return _swig_wrap_new_Query__SWIG_4(arg1.Swigcptr())
}

func _swig_wrap_new_Query__SWIG_5(float64, uintptr) SwigcptrQuery

func NewQuery__SWIG_5(arg1 float64, arg2 Query) Query {
	return _swig_wrap_new_Query__SWIG_5(arg1, arg2.Swigcptr())
}

func _swig_wrap_new_Query__SWIG_6(XapianQueryOp, uintptr, float64) SwigcptrQuery

func NewQuery__SWIG_6(arg1 XapianQueryOp, arg2 Query, arg3 float64) Query {
	return _swig_wrap_new_Query__SWIG_6(arg1, arg2.Swigcptr(), arg3)
}

func _swig_wrap_new_Query__SWIG_7(XapianQueryOp, uintptr, uintptr) SwigcptrQuery

func NewQuery__SWIG_7(arg1 XapianQueryOp, arg2 Query, arg3 Query) Query {
	return _swig_wrap_new_Query__SWIG_7(arg1, arg2.Swigcptr(), arg3.Swigcptr())
}

func _swig_wrap_new_Query__SWIG_8(XapianQueryOp, string, string) SwigcptrQuery

func NewQuery__SWIG_8(arg1 XapianQueryOp, arg2 string, arg3 string) Query {
	return _swig_wrap_new_Query__SWIG_8(arg1, arg2, arg3)
}

func _swig_wrap_new_Query__SWIG_9(XapianQueryOp, uint, string) SwigcptrQuery

func NewQuery__SWIG_9(arg1 XapianQueryOp, arg2 uint, arg3 string) Query {
	return _swig_wrap_new_Query__SWIG_9(arg1, arg2, arg3)
}

func _swig_wrap_new_Query__SWIG_10(XapianQueryOp, uint, string, string) SwigcptrQuery

func NewQuery__SWIG_10(arg1 XapianQueryOp, arg2 uint, arg3 string, arg4 string) Query {
	return _swig_wrap_new_Query__SWIG_10(arg1, arg2, arg3, arg4)
}

func NewQuery(a ...interface{}) Query {
	argc := len(a)
	if argc == 0 {
		return NewQuery__SWIG_0()
	}
	if argc == 1 {
		if _, ok := a[0].(string); !ok {
			goto check_2
		}
		return NewQuery__SWIG_3(a[0].(string))
	}
check_2:
	if argc == 1 {
		return NewQuery__SWIG_4(a[0].(PostingSource))
	}
	if argc == 2 {
		if _, ok := a[0].(string); !ok {
			goto check_4
		}
		if _, ok := a[1].(uint); !ok {
			goto check_4
		}
		return NewQuery__SWIG_2(a[0].(string), a[1].(uint))
	}
check_4:
	if argc == 2 {
		return NewQuery__SWIG_5(a[0].(float64), a[1].(Query))
	}
	if argc == 3 {
		if _, ok := a[0].(string); !ok {
			goto check_6
		}
		if _, ok := a[1].(uint); !ok {
			goto check_6
		}
		if _, ok := a[2].(uint); !ok {
			goto check_6
		}
		return NewQuery__SWIG_1(a[0].(string), a[1].(uint), a[2].(uint))
	}
check_6:
	if argc == 3 {
		if _, ok := a[1].(SwigcptrQuery); !ok {
			goto check_7
		}
		if _, ok := a[2].(SwigcptrQuery); !ok {
			goto check_7
		}
		return NewQuery__SWIG_7(a[0].(XapianQueryOp), a[1].(Query), a[2].(Query))
	}
check_7:
	if argc == 3 {
		if _, ok := a[1].(SwigcptrQuery); !ok {
			goto check_8
		}
		if _, ok := a[2].(float64); !ok {
			goto check_8
		}
		return NewQuery__SWIG_6(a[0].(XapianQueryOp), a[1].(Query), a[2].(float64))
	}
check_8:
	if argc == 3 {
		if _, ok := a[1].(string); !ok {
			goto check_9
		}
		return NewQuery__SWIG_8(a[0].(XapianQueryOp), a[1].(string), a[2].(string))
	}
check_9:
	if argc == 3 {
		return NewQuery__SWIG_9(a[0].(XapianQueryOp), a[1].(uint), a[2].(string))
	}
	if argc == 4 {
		return NewQuery__SWIG_10(a[0].(XapianQueryOp), a[1].(uint), a[2].(string), a[3].(string))
	}
	panic("No match for overloaded function call")
}

func _swig_wrap_Query_get_terms_begin(SwigcptrQuery) SwigcptrTermIterator

func (arg1 SwigcptrQuery) Get_terms_begin() TermIterator {
	return _swig_wrap_Query_get_terms_begin(arg1)
}

func _swig_wrap_Query_get_terms_end(SwigcptrQuery) SwigcptrTermIterator

func (arg1 SwigcptrQuery) Get_terms_end() TermIterator {
	return _swig_wrap_Query_get_terms_end(arg1)
}

func _swig_wrap_Query_get_length(SwigcptrQuery) uint

func (arg1 SwigcptrQuery) Get_length() uint {
	return _swig_wrap_Query_get_length(arg1)
}

func _swig_wrap_Query_empty(SwigcptrQuery) bool

func (arg1 SwigcptrQuery) Empty() bool {
	return _swig_wrap_Query_empty(arg1)
}

func _swig_wrap_Query_serialise(SwigcptrQuery) string

func (arg1 SwigcptrQuery) Serialise() string {
	return _swig_wrap_Query_serialise(arg1)
}

func _swig_wrap_Query_unserialise__SWIG_0(string, uintptr) SwigcptrQuery

func QueryUnserialise__SWIG_0(arg1 string, arg2 Registry) Query {
	return _swig_wrap_Query_unserialise__SWIG_0(arg1, arg2.Swigcptr())
}

func _swig_wrap_Query_unserialise__SWIG_1(string) SwigcptrQuery

func QueryUnserialise__SWIG_1(arg1 string) Query {
	return _swig_wrap_Query_unserialise__SWIG_1(arg1)
}

func QueryUnserialise(a ...interface{}) Query {
	argc := len(a)
	if argc == 1 {
		return QueryUnserialise__SWIG_1(a[0].(string))
	}
	if argc == 2 {
		return QueryUnserialise__SWIG_0(a[0].(string), a[1].(Registry))
	}
	panic("No match for overloaded function call")
}

func _swig_wrap_Query_get_description(SwigcptrQuery) string

func (arg1 SwigcptrQuery) Get_description() string {
	return _swig_wrap_Query_get_description(arg1)
}

type Query interface {
	Swigcptr() uintptr
	SwigIsQuery()
	Get_terms_begin() TermIterator
	Get_terms_end() TermIterator
	Get_length() uint
	Empty() bool
	Serialise() string
	Get_description() string
}

type _swig_DirectorStemImplementation struct {
	SwigcptrStemImplementation
	v interface{}
}

func (p *_swig_DirectorStemImplementation) Swigcptr() uintptr {
	return p.SwigcptrStemImplementation.Swigcptr()
}

func (p *_swig_DirectorStemImplementation) SwigIsStemImplementation() {
}

func (p *_swig_DirectorStemImplementation) DirectorInterface() interface{} {
	return p.v
}

func _swig_NewDirectorStemImplementationStemImplementation(*_swig_DirectorStemImplementation) SwigcptrStemImplementation

func NewDirectorStemImplementation(v interface{}) StemImplementation {
	p := &_swig_DirectorStemImplementation{0, v}
	p.SwigcptrStemImplementation = _swig_NewDirectorStemImplementationStemImplementation(p)
	return p
}

func _swig_wrap_DeleteDirectorStemImplementation(uintptr)

func DeleteDirectorStemImplementation(arg1 StemImplementation) {
	_swig_wrap_DeleteDirectorStemImplementation(arg1.Swigcptr())
}

func Swiggo_DeleteDirector_StemImplementation(p *_swig_DirectorStemImplementation) {
	p.SwigcptrStemImplementation = 0
}

type _swig_DirectorInterfaceStemImplementationApply interface {
	Apply(string) string
}

func _swig_wrap__swig_DirectorStemImplementation_upcall_Apply(SwigcptrStemImplementation, string) string
func (swig_p *_swig_DirectorStemImplementation) Apply(word string) string {
	if swig_g, swig_ok := swig_p.v.(_swig_DirectorInterfaceStemImplementationApply); swig_ok {
		return swig_g.Apply(word)
	}
	return _swig_wrap__swig_DirectorStemImplementation_upcall_Apply(swig_p.SwigcptrStemImplementation, word)
}

func DirectorStemImplementationApply(p StemImplementation, arg2 string) string {
	return _swig_wrap__swig_DirectorStemImplementation_upcall_Apply(p.(*_swig_DirectorStemImplementation).SwigcptrStemImplementation, arg2)
}

func Swig_DirectorStemImplementation_callback_Apply(p *_swig_DirectorStemImplementation, arg2 string) (swig_result string) {
	return p.Apply(arg2)
}

type _swig_DirectorInterfaceStemImplementationGet_description interface {
	Get_description() string
}

func _swig_wrap__swig_DirectorStemImplementation_upcall_Get_description(SwigcptrStemImplementation) string
func (swig_p *_swig_DirectorStemImplementation) Get_description() string {
	if swig_g, swig_ok := swig_p.v.(_swig_DirectorInterfaceStemImplementationGet_description); swig_ok {
		return swig_g.Get_description()
	}
	return _swig_wrap__swig_DirectorStemImplementation_upcall_Get_description(swig_p.SwigcptrStemImplementation)
}

func DirectorStemImplementationGet_description(p StemImplementation) string {
	return _swig_wrap__swig_DirectorStemImplementation_upcall_Get_description(p.(*_swig_DirectorStemImplementation).SwigcptrStemImplementation)
}

func Swig_DirectorStemImplementation_callback_get_description(p *_swig_DirectorStemImplementation) (swig_result string) {
	return p.Get_description()
}

type SwigcptrStemImplementation uintptr

func (p SwigcptrStemImplementation) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrStemImplementation) SwigIsStemImplementation() {
}

func (p SwigcptrStemImplementation) DirectorInterface() interface{} {
	return nil
}

func _swig_wrap_delete_StemImplementation(uintptr)

func DeleteStemImplementation(arg1 StemImplementation) {
	_swig_wrap_delete_StemImplementation(arg1.Swigcptr())
}

func _swig_wrap_StemImplementation_Apply(SwigcptrStemImplementation, string) string

func (arg1 SwigcptrStemImplementation) Apply(arg2 string) string {
	return _swig_wrap_StemImplementation_Apply(arg1, arg2)
}

func _swig_wrap_StemImplementation_get_description(SwigcptrStemImplementation) string

func (arg1 SwigcptrStemImplementation) Get_description() string {
	return _swig_wrap_StemImplementation_get_description(arg1)
}

func _swig_wrap_new_StemImplementation() SwigcptrStemImplementation

func NewStemImplementation() StemImplementation {
	return _swig_wrap_new_StemImplementation()
}

type StemImplementation interface {
	Swigcptr() uintptr
	SwigIsStemImplementation()
	DirectorInterface() interface{}
	Apply(arg2 string) string
	Get_description() string
}

type SwigcptrStem uintptr

func (p SwigcptrStem) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrStem) SwigIsStem() {
}

func _swig_wrap_new_Stem__SWIG_0(string) SwigcptrStem

func NewStem__SWIG_0(arg1 string) Stem {
	return _swig_wrap_new_Stem__SWIG_0(arg1)
}

func _swig_wrap_new_Stem__SWIG_1(uintptr) SwigcptrStem

func NewStem__SWIG_1(arg1 StemImplementation) Stem {
	return _swig_wrap_new_Stem__SWIG_1(arg1.Swigcptr())
}

func NewStem(a ...interface{}) Stem {
	argc := len(a)
	if argc == 1 {
		if _, ok := a[0].(string); !ok {
			goto check_1
		}
		return NewStem__SWIG_0(a[0].(string))
	}
check_1:
	if argc == 1 {
		return NewStem__SWIG_1(a[0].(StemImplementation))
	}
	panic("No match for overloaded function call")
}

func _swig_wrap_delete_Stem(uintptr)

func DeleteStem(arg1 Stem) {
	_swig_wrap_delete_Stem(arg1.Swigcptr())
}

func _swig_wrap_Stem_Apply(SwigcptrStem, string) string

func (arg1 SwigcptrStem) Apply(arg2 string) string {
	return _swig_wrap_Stem_Apply(arg1, arg2)
}

func _swig_wrap_Stem_get_description(SwigcptrStem) string

func (arg1 SwigcptrStem) Get_description() string {
	return _swig_wrap_Stem_get_description(arg1)
}

func StemGet_available_languages() string
type Stem interface {
	Swigcptr() uintptr
	SwigIsStem()
	Apply(arg2 string) string
	Get_description() string
}

type SwigcptrTermGenerator uintptr

func (p SwigcptrTermGenerator) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrTermGenerator) SwigIsTermGenerator() {
}

func _swig_wrap_new_TermGenerator() SwigcptrTermGenerator

func NewTermGenerator() TermGenerator {
	return _swig_wrap_new_TermGenerator()
}

func _swig_wrap_delete_TermGenerator(uintptr)

func DeleteTermGenerator(arg1 TermGenerator) {
	_swig_wrap_delete_TermGenerator(arg1.Swigcptr())
}

func _swig_wrap_TermGenerator_set_stemmer(SwigcptrTermGenerator, uintptr)

func (arg1 SwigcptrTermGenerator) Set_stemmer(arg2 Stem) {
	_swig_wrap_TermGenerator_set_stemmer(arg1, arg2.Swigcptr())
}

func _swig_wrap_TermGenerator_set_stopper__SWIG_0(SwigcptrTermGenerator, uintptr)

func (arg1 SwigcptrTermGenerator) Set_stopper__SWIG_0(arg2 Stopper) {
	_swig_wrap_TermGenerator_set_stopper__SWIG_0(arg1, arg2.Swigcptr())
}

func _swig_wrap_TermGenerator_set_stopper__SWIG_1(SwigcptrTermGenerator)

func (arg1 SwigcptrTermGenerator) Set_stopper__SWIG_1() {
	_swig_wrap_TermGenerator_set_stopper__SWIG_1(arg1)
}

func (p SwigcptrTermGenerator) Set_stopper(a ...interface{}) {
	argc := len(a)
	if argc == 0 {
		p.Set_stopper__SWIG_1()
		return
	}
	if argc == 1 {
		p.Set_stopper__SWIG_0(a[0].(Stopper))
		return
	}
	panic("No match for overloaded function call")
}

func _swig_wrap_TermGenerator_set_document(SwigcptrTermGenerator, uintptr)

func (arg1 SwigcptrTermGenerator) Set_document(arg2 Document) {
	_swig_wrap_TermGenerator_set_document(arg1, arg2.Swigcptr())
}

func _swig_wrap_TermGenerator_get_document(SwigcptrTermGenerator) SwigcptrDocument

func (arg1 SwigcptrTermGenerator) Get_document() Document {
	return _swig_wrap_TermGenerator_get_document(arg1)
}

func _swig_wrap_TermGenerator_set_database(SwigcptrTermGenerator, uintptr)

func (arg1 SwigcptrTermGenerator) Set_database(arg2 WritableDatabase) {
	_swig_wrap_TermGenerator_set_database(arg1, arg2.Swigcptr())
}

type XapianTermGeneratorFlags int
func _swig_getTermGenerator_FLAG_SPELLING_TermGenerator() XapianTermGeneratorFlags
var TermGeneratorFLAG_SPELLING XapianTermGeneratorFlags = _swig_getTermGenerator_FLAG_SPELLING_TermGenerator()
type XapianTermGeneratorStem_strategy int
func _swig_getTermGenerator_STEM_NONE_TermGenerator() int
var TermGeneratorSTEM_NONE int = _swig_getTermGenerator_STEM_NONE_TermGenerator()
func _swig_getTermGenerator_STEM_SOME_TermGenerator() int
var TermGeneratorSTEM_SOME int = _swig_getTermGenerator_STEM_SOME_TermGenerator()
func _swig_getTermGenerator_STEM_ALL_TermGenerator() int
var TermGeneratorSTEM_ALL int = _swig_getTermGenerator_STEM_ALL_TermGenerator()
func _swig_getTermGenerator_STEM_ALL_Z_TermGenerator() int
var TermGeneratorSTEM_ALL_Z int = _swig_getTermGenerator_STEM_ALL_Z_TermGenerator()
func _swig_wrap_TermGenerator_set_flags__SWIG_0(SwigcptrTermGenerator, XapianTermGeneratorFlags, XapianTermGeneratorFlags) XapianTermGeneratorFlags

func (arg1 SwigcptrTermGenerator) Set_flags__SWIG_0(arg2 XapianTermGeneratorFlags, arg3 XapianTermGeneratorFlags) XapianTermGeneratorFlags {
	return _swig_wrap_TermGenerator_set_flags__SWIG_0(arg1, arg2, arg3)
}

func _swig_wrap_TermGenerator_set_flags__SWIG_1(SwigcptrTermGenerator, XapianTermGeneratorFlags) XapianTermGeneratorFlags

func (arg1 SwigcptrTermGenerator) Set_flags__SWIG_1(arg2 XapianTermGeneratorFlags) XapianTermGeneratorFlags {
	return _swig_wrap_TermGenerator_set_flags__SWIG_1(arg1, arg2)
}

func (p SwigcptrTermGenerator) Set_flags(a ...interface{}) XapianTermGeneratorFlags {
	argc := len(a)
	if argc == 1 {
		return p.Set_flags__SWIG_1(a[0].(XapianTermGeneratorFlags))
	}
	if argc == 2 {
		return p.Set_flags__SWIG_0(a[0].(XapianTermGeneratorFlags), a[1].(XapianTermGeneratorFlags))
	}
	panic("No match for overloaded function call")
}

func _swig_wrap_TermGenerator_set_stemming_strategy(SwigcptrTermGenerator, XapianTermGeneratorStem_strategy)

func (arg1 SwigcptrTermGenerator) Set_stemming_strategy(arg2 XapianTermGeneratorStem_strategy) {
	_swig_wrap_TermGenerator_set_stemming_strategy(arg1, arg2)
}

func _swig_wrap_TermGenerator_set_max_word_length(SwigcptrTermGenerator, uint)

func (arg1 SwigcptrTermGenerator) Set_max_word_length(arg2 uint) {
	_swig_wrap_TermGenerator_set_max_word_length(arg1, arg2)
}

func _swig_wrap_TermGenerator_index_text__SWIG_0(SwigcptrTermGenerator, string, uint, string)

func (arg1 SwigcptrTermGenerator) Index_text__SWIG_0(arg2 string, arg3 uint, arg4 string) {
	_swig_wrap_TermGenerator_index_text__SWIG_0(arg1, arg2, arg3, arg4)
}

func _swig_wrap_TermGenerator_index_text__SWIG_1(SwigcptrTermGenerator, string, uint)

func (arg1 SwigcptrTermGenerator) Index_text__SWIG_1(arg2 string, arg3 uint) {
	_swig_wrap_TermGenerator_index_text__SWIG_1(arg1, arg2, arg3)
}

func _swig_wrap_TermGenerator_index_text__SWIG_2(SwigcptrTermGenerator, string)

func (arg1 SwigcptrTermGenerator) Index_text__SWIG_2(arg2 string) {
	_swig_wrap_TermGenerator_index_text__SWIG_2(arg1, arg2)
}

func (p SwigcptrTermGenerator) Index_text(a ...interface{}) {
	argc := len(a)
	if argc == 1 {
		p.Index_text__SWIG_2(a[0].(string))
		return
	}
	if argc == 2 {
		p.Index_text__SWIG_1(a[0].(string), a[1].(uint))
		return
	}
	if argc == 3 {
		p.Index_text__SWIG_0(a[0].(string), a[1].(uint), a[2].(string))
		return
	}
	panic("No match for overloaded function call")
}

func _swig_wrap_TermGenerator_index_text_without_positions__SWIG_0(SwigcptrTermGenerator, string, uint, string)

func (arg1 SwigcptrTermGenerator) Index_text_without_positions__SWIG_0(arg2 string, arg3 uint, arg4 string) {
	_swig_wrap_TermGenerator_index_text_without_positions__SWIG_0(arg1, arg2, arg3, arg4)
}

func _swig_wrap_TermGenerator_index_text_without_positions__SWIG_1(SwigcptrTermGenerator, string, uint)

func (arg1 SwigcptrTermGenerator) Index_text_without_positions__SWIG_1(arg2 string, arg3 uint) {
	_swig_wrap_TermGenerator_index_text_without_positions__SWIG_1(arg1, arg2, arg3)
}

func _swig_wrap_TermGenerator_index_text_without_positions__SWIG_2(SwigcptrTermGenerator, string)

func (arg1 SwigcptrTermGenerator) Index_text_without_positions__SWIG_2(arg2 string) {
	_swig_wrap_TermGenerator_index_text_without_positions__SWIG_2(arg1, arg2)
}

func (p SwigcptrTermGenerator) Index_text_without_positions(a ...interface{}) {
	argc := len(a)
	if argc == 1 {
		p.Index_text_without_positions__SWIG_2(a[0].(string))
		return
	}
	if argc == 2 {
		p.Index_text_without_positions__SWIG_1(a[0].(string), a[1].(uint))
		return
	}
	if argc == 3 {
		p.Index_text_without_positions__SWIG_0(a[0].(string), a[1].(uint), a[2].(string))
		return
	}
	panic("No match for overloaded function call")
}

func _swig_wrap_TermGenerator_increase_termpos__SWIG_0(SwigcptrTermGenerator, uint)

func (arg1 SwigcptrTermGenerator) Increase_termpos__SWIG_0(arg2 uint) {
	_swig_wrap_TermGenerator_increase_termpos__SWIG_0(arg1, arg2)
}

func _swig_wrap_TermGenerator_increase_termpos__SWIG_1(SwigcptrTermGenerator)

func (arg1 SwigcptrTermGenerator) Increase_termpos__SWIG_1() {
	_swig_wrap_TermGenerator_increase_termpos__SWIG_1(arg1)
}

func (p SwigcptrTermGenerator) Increase_termpos(a ...interface{}) {
	argc := len(a)
	if argc == 0 {
		p.Increase_termpos__SWIG_1()
		return
	}
	if argc == 1 {
		p.Increase_termpos__SWIG_0(a[0].(uint))
		return
	}
	panic("No match for overloaded function call")
}

func _swig_wrap_TermGenerator_get_termpos(SwigcptrTermGenerator) uint

func (arg1 SwigcptrTermGenerator) Get_termpos() uint {
	return _swig_wrap_TermGenerator_get_termpos(arg1)
}

func _swig_wrap_TermGenerator_set_termpos(SwigcptrTermGenerator, uint)

func (arg1 SwigcptrTermGenerator) Set_termpos(arg2 uint) {
	_swig_wrap_TermGenerator_set_termpos(arg1, arg2)
}

func _swig_wrap_TermGenerator_get_description(SwigcptrTermGenerator) string

func (arg1 SwigcptrTermGenerator) Get_description() string {
	return _swig_wrap_TermGenerator_get_description(arg1)
}

type TermGenerator interface {
	Swigcptr() uintptr
	SwigIsTermGenerator()
	Set_stemmer(arg2 Stem)
	Set_stopper(a ...interface{})
	Set_document(arg2 Document)
	Get_document() Document
	Set_database(arg2 WritableDatabase)
	Set_flags(a ...interface{}) XapianTermGeneratorFlags
	Set_stemming_strategy(arg2 XapianTermGeneratorStem_strategy)
	Set_max_word_length(arg2 uint)
	Index_text(a ...interface{})
	Index_text_without_positions(a ...interface{})
	Increase_termpos(a ...interface{})
	Get_termpos() uint
	Set_termpos(arg2 uint)
	Get_description() string
}

type SwigcptrMSet uintptr

func (p SwigcptrMSet) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrMSet) SwigIsMSet() {
}

func _swig_wrap_new_MSet() SwigcptrMSet

func NewMSet() MSet {
	return _swig_wrap_new_MSet()
}

func _swig_wrap_delete_MSet(uintptr)

func DeleteMSet(arg1 MSet) {
	_swig_wrap_delete_MSet(arg1.Swigcptr())
}

func _swig_wrap_MSet_fetch__SWIG_0(SwigcptrMSet, uintptr, uintptr)

func (arg1 SwigcptrMSet) Fetch__SWIG_0(arg2 MSetIterator, arg3 MSetIterator) {
	_swig_wrap_MSet_fetch__SWIG_0(arg1, arg2.Swigcptr(), arg3.Swigcptr())
}

func _swig_wrap_MSet_fetch__SWIG_1(SwigcptrMSet, uintptr)

func (arg1 SwigcptrMSet) Fetch__SWIG_1(arg2 MSetIterator) {
	_swig_wrap_MSet_fetch__SWIG_1(arg1, arg2.Swigcptr())
}

func _swig_wrap_MSet_fetch__SWIG_2(SwigcptrMSet)

func (arg1 SwigcptrMSet) Fetch__SWIG_2() {
	_swig_wrap_MSet_fetch__SWIG_2(arg1)
}

func (p SwigcptrMSet) Fetch(a ...interface{}) {
	argc := len(a)
	if argc == 0 {
		p.Fetch__SWIG_2()
		return
	}
	if argc == 1 {
		p.Fetch__SWIG_1(a[0].(MSetIterator))
		return
	}
	if argc == 2 {
		p.Fetch__SWIG_0(a[0].(MSetIterator), a[1].(MSetIterator))
		return
	}
	panic("No match for overloaded function call")
}

func _swig_wrap_MSet_convert_to_percent__SWIG_0(SwigcptrMSet, float64) int

func (arg1 SwigcptrMSet) Convert_to_percent__SWIG_0(arg2 float64) int {
	return _swig_wrap_MSet_convert_to_percent__SWIG_0(arg1, arg2)
}

func _swig_wrap_MSet_convert_to_percent__SWIG_1(SwigcptrMSet, uintptr) int

func (arg1 SwigcptrMSet) Convert_to_percent__SWIG_1(arg2 MSetIterator) int {
	return _swig_wrap_MSet_convert_to_percent__SWIG_1(arg1, arg2.Swigcptr())
}

func (p SwigcptrMSet) Convert_to_percent(a ...interface{}) int {
	argc := len(a)
	if argc == 1 {
		if _, ok := a[0].(SwigcptrMSetIterator); !ok {
			goto check_1
		}
		return p.Convert_to_percent__SWIG_1(a[0].(MSetIterator))
	}
check_1:
	if argc == 1 {
		return p.Convert_to_percent__SWIG_0(a[0].(float64))
	}
	panic("No match for overloaded function call")
}

func _swig_wrap_MSet_get_termfreq(SwigcptrMSet, string) uint

func (arg1 SwigcptrMSet) Get_termfreq(arg2 string) uint {
	return _swig_wrap_MSet_get_termfreq(arg1, arg2)
}

func _swig_wrap_MSet_get_termweight(SwigcptrMSet, string) float64

func (arg1 SwigcptrMSet) Get_termweight(arg2 string) float64 {
	return _swig_wrap_MSet_get_termweight(arg1, arg2)
}

func _swig_wrap_MSet_get_firstitem(SwigcptrMSet) uint

func (arg1 SwigcptrMSet) Get_firstitem() uint {
	return _swig_wrap_MSet_get_firstitem(arg1)
}

func _swig_wrap_MSet_get_matches_lower_bound(SwigcptrMSet) uint

func (arg1 SwigcptrMSet) Get_matches_lower_bound() uint {
	return _swig_wrap_MSet_get_matches_lower_bound(arg1)
}

func _swig_wrap_MSet_get_matches_estimated(SwigcptrMSet) uint

func (arg1 SwigcptrMSet) Get_matches_estimated() uint {
	return _swig_wrap_MSet_get_matches_estimated(arg1)
}

func _swig_wrap_MSet_get_matches_upper_bound(SwigcptrMSet) uint

func (arg1 SwigcptrMSet) Get_matches_upper_bound() uint {
	return _swig_wrap_MSet_get_matches_upper_bound(arg1)
}

func _swig_wrap_MSet_get_uncollapsed_matches_lower_bound(SwigcptrMSet) uint

func (arg1 SwigcptrMSet) Get_uncollapsed_matches_lower_bound() uint {
	return _swig_wrap_MSet_get_uncollapsed_matches_lower_bound(arg1)
}

func _swig_wrap_MSet_get_uncollapsed_matches_estimated(SwigcptrMSet) uint

func (arg1 SwigcptrMSet) Get_uncollapsed_matches_estimated() uint {
	return _swig_wrap_MSet_get_uncollapsed_matches_estimated(arg1)
}

func _swig_wrap_MSet_get_uncollapsed_matches_upper_bound(SwigcptrMSet) uint

func (arg1 SwigcptrMSet) Get_uncollapsed_matches_upper_bound() uint {
	return _swig_wrap_MSet_get_uncollapsed_matches_upper_bound(arg1)
}

func _swig_wrap_MSet_get_max_possible(SwigcptrMSet) float64

func (arg1 SwigcptrMSet) Get_max_possible() float64 {
	return _swig_wrap_MSet_get_max_possible(arg1)
}

func _swig_wrap_MSet_get_max_attained(SwigcptrMSet) float64

func (arg1 SwigcptrMSet) Get_max_attained() float64 {
	return _swig_wrap_MSet_get_max_attained(arg1)
}

func _swig_wrap_MSet_size(SwigcptrMSet) uint

func (arg1 SwigcptrMSet) Size() uint {
	return _swig_wrap_MSet_size(arg1)
}

func _swig_wrap_MSet_empty(SwigcptrMSet) bool

func (arg1 SwigcptrMSet) Empty() bool {
	return _swig_wrap_MSet_empty(arg1)
}

func _swig_wrap_MSet_begin(SwigcptrMSet) SwigcptrMSetIterator

func (arg1 SwigcptrMSet) Begin() MSetIterator {
	return _swig_wrap_MSet_begin(arg1)
}

func _swig_wrap_MSet_end(SwigcptrMSet) SwigcptrMSetIterator

func (arg1 SwigcptrMSet) End() MSetIterator {
	return _swig_wrap_MSet_end(arg1)
}

func _swig_wrap_MSet_back(SwigcptrMSet) SwigcptrMSetIterator

func (arg1 SwigcptrMSet) Back() MSetIterator {
	return _swig_wrap_MSet_back(arg1)
}

func _swig_wrap_MSet_get_description(SwigcptrMSet) string

func (arg1 SwigcptrMSet) Get_description() string {
	return _swig_wrap_MSet_get_description(arg1)
}

func _swig_wrap_MSet_get_docid(SwigcptrMSet, uint) uint

func (arg1 SwigcptrMSet) Get_docid(arg2 uint) uint {
	return _swig_wrap_MSet_get_docid(arg1, arg2)
}

func _swig_wrap_MSet_get_document(SwigcptrMSet, uint) SwigcptrDocument

func (arg1 SwigcptrMSet) Get_document(arg2 uint) Document {
	return _swig_wrap_MSet_get_document(arg1, arg2)
}

func _swig_wrap_MSet_get_hit(SwigcptrMSet, uint) SwigcptrMSetIterator

func (arg1 SwigcptrMSet) Get_hit(arg2 uint) MSetIterator {
	return _swig_wrap_MSet_get_hit(arg1, arg2)
}

func _swig_wrap_MSet_get_document_percentage(SwigcptrMSet, uint) int

func (arg1 SwigcptrMSet) Get_document_percentage(arg2 uint) int {
	return _swig_wrap_MSet_get_document_percentage(arg1, arg2)
}

type MSet interface {
	Swigcptr() uintptr
	SwigIsMSet()
	Fetch(a ...interface{})
	Convert_to_percent(a ...interface{}) int
	Get_termfreq(arg2 string) uint
	Get_termweight(arg2 string) float64
	Get_firstitem() uint
	Get_matches_lower_bound() uint
	Get_matches_estimated() uint
	Get_matches_upper_bound() uint
	Get_uncollapsed_matches_lower_bound() uint
	Get_uncollapsed_matches_estimated() uint
	Get_uncollapsed_matches_upper_bound() uint
	Get_max_possible() float64
	Get_max_attained() float64
	Size() uint
	Empty() bool
	Begin() MSetIterator
	End() MSetIterator
	Back() MSetIterator
	Get_description() string
	Get_docid(arg2 uint) uint
	Get_document(arg2 uint) Document
	Get_hit(arg2 uint) MSetIterator
	Get_document_percentage(arg2 uint) int
}

type SwigcptrMSetIterator uintptr

func (p SwigcptrMSetIterator) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrMSetIterator) SwigIsMSetIterator() {
}

func _swig_wrap_new_MSetIterator() SwigcptrMSetIterator

func NewMSetIterator() MSetIterator {
	return _swig_wrap_new_MSetIterator()
}

func _swig_wrap_MSetIterator_get_document(SwigcptrMSetIterator) SwigcptrDocument

func (arg1 SwigcptrMSetIterator) Get_document() Document {
	return _swig_wrap_MSetIterator_get_document(arg1)
}

func _swig_wrap_MSetIterator_get_rank(SwigcptrMSetIterator) uint

func (arg1 SwigcptrMSetIterator) Get_rank() uint {
	return _swig_wrap_MSetIterator_get_rank(arg1)
}

func _swig_wrap_MSetIterator_get_weight(SwigcptrMSetIterator) float64

func (arg1 SwigcptrMSetIterator) Get_weight() float64 {
	return _swig_wrap_MSetIterator_get_weight(arg1)
}

func _swig_wrap_MSetIterator_get_collapse_key(SwigcptrMSetIterator) string

func (arg1 SwigcptrMSetIterator) Get_collapse_key() string {
	return _swig_wrap_MSetIterator_get_collapse_key(arg1)
}

func _swig_wrap_MSetIterator_get_collapse_count(SwigcptrMSetIterator) uint

func (arg1 SwigcptrMSetIterator) Get_collapse_count() uint {
	return _swig_wrap_MSetIterator_get_collapse_count(arg1)
}

func _swig_wrap_MSetIterator_get_percent(SwigcptrMSetIterator) int

func (arg1 SwigcptrMSetIterator) Get_percent() int {
	return _swig_wrap_MSetIterator_get_percent(arg1)
}

func _swig_wrap_MSetIterator_at_end(SwigcptrMSetIterator) bool

func (arg1 SwigcptrMSetIterator) At_end() bool {
	return _swig_wrap_MSetIterator_at_end(arg1)
}

func _swig_wrap_MSetIterator_get_description(SwigcptrMSetIterator) string

func (arg1 SwigcptrMSetIterator) Get_description() string {
	return _swig_wrap_MSetIterator_get_description(arg1)
}

func _swig_wrap_MSetIterator_equals(SwigcptrMSetIterator, uintptr) bool

func (arg1 SwigcptrMSetIterator) Equals(arg2 MSetIterator) bool {
	return _swig_wrap_MSetIterator_equals(arg1, arg2.Swigcptr())
}

func _swig_wrap_MSetIterator_get_docid(SwigcptrMSetIterator) uint

func (arg1 SwigcptrMSetIterator) Get_docid() uint {
	return _swig_wrap_MSetIterator_get_docid(arg1)
}

func _swig_wrap_MSetIterator_next(SwigcptrMSetIterator)

func (arg1 SwigcptrMSetIterator) Next() {
	_swig_wrap_MSetIterator_next(arg1)
}

func _swig_wrap_MSetIterator_prev(SwigcptrMSetIterator)

func (arg1 SwigcptrMSetIterator) Prev() {
	_swig_wrap_MSetIterator_prev(arg1)
}

func _swig_wrap_delete_MSetIterator(uintptr)

func DeleteMSetIterator(arg1 MSetIterator) {
	_swig_wrap_delete_MSetIterator(arg1.Swigcptr())
}

type MSetIterator interface {
	Swigcptr() uintptr
	SwigIsMSetIterator()
	Get_document() Document
	Get_rank() uint
	Get_weight() float64
	Get_collapse_key() string
	Get_collapse_count() uint
	Get_percent() int
	At_end() bool
	Get_description() string
	Equals(arg2 MSetIterator) bool
	Get_docid() uint
	Next()
	Prev()
}

type SwigcptrESet uintptr

func (p SwigcptrESet) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrESet) SwigIsESet() {
}

func _swig_wrap_new_ESet() SwigcptrESet

func NewESet() ESet {
	return _swig_wrap_new_ESet()
}

func _swig_wrap_delete_ESet(uintptr)

func DeleteESet(arg1 ESet) {
	_swig_wrap_delete_ESet(arg1.Swigcptr())
}

func _swig_wrap_ESet_get_ebound(SwigcptrESet) uint

func (arg1 SwigcptrESet) Get_ebound() uint {
	return _swig_wrap_ESet_get_ebound(arg1)
}

func _swig_wrap_ESet_size(SwigcptrESet) uint

func (arg1 SwigcptrESet) Size() uint {
	return _swig_wrap_ESet_size(arg1)
}

func _swig_wrap_ESet_empty(SwigcptrESet) bool

func (arg1 SwigcptrESet) Empty() bool {
	return _swig_wrap_ESet_empty(arg1)
}

func _swig_wrap_ESet_begin(SwigcptrESet) SwigcptrESetIterator

func (arg1 SwigcptrESet) Begin() ESetIterator {
	return _swig_wrap_ESet_begin(arg1)
}

func _swig_wrap_ESet_end(SwigcptrESet) SwigcptrESetIterator

func (arg1 SwigcptrESet) End() ESetIterator {
	return _swig_wrap_ESet_end(arg1)
}

func _swig_wrap_ESet_back(SwigcptrESet) SwigcptrESetIterator

func (arg1 SwigcptrESet) Back() ESetIterator {
	return _swig_wrap_ESet_back(arg1)
}

func _swig_wrap_ESet_get_description(SwigcptrESet) string

func (arg1 SwigcptrESet) Get_description() string {
	return _swig_wrap_ESet_get_description(arg1)
}

type ESet interface {
	Swigcptr() uintptr
	SwigIsESet()
	Get_ebound() uint
	Size() uint
	Empty() bool
	Begin() ESetIterator
	End() ESetIterator
	Back() ESetIterator
	Get_description() string
}

type SwigcptrESetIterator uintptr

func (p SwigcptrESetIterator) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrESetIterator) SwigIsESetIterator() {
}

func _swig_wrap_new_ESetIterator() SwigcptrESetIterator

func NewESetIterator() ESetIterator {
	return _swig_wrap_new_ESetIterator()
}

func _swig_wrap_ESetIterator_get_weight(SwigcptrESetIterator) float64

func (arg1 SwigcptrESetIterator) Get_weight() float64 {
	return _swig_wrap_ESetIterator_get_weight(arg1)
}

func _swig_wrap_ESetIterator_get_description(SwigcptrESetIterator) string

func (arg1 SwigcptrESetIterator) Get_description() string {
	return _swig_wrap_ESetIterator_get_description(arg1)
}

func _swig_wrap_ESetIterator_at_end(SwigcptrESetIterator) bool

func (arg1 SwigcptrESetIterator) At_end() bool {
	return _swig_wrap_ESetIterator_at_end(arg1)
}

func _swig_wrap_ESetIterator_equals(SwigcptrESetIterator, uintptr) bool

func (arg1 SwigcptrESetIterator) Equals(arg2 ESetIterator) bool {
	return _swig_wrap_ESetIterator_equals(arg1, arg2.Swigcptr())
}

func _swig_wrap_ESetIterator_get_term(SwigcptrESetIterator) string

func (arg1 SwigcptrESetIterator) Get_term() string {
	return _swig_wrap_ESetIterator_get_term(arg1)
}

func _swig_wrap_ESetIterator_next(SwigcptrESetIterator)

func (arg1 SwigcptrESetIterator) Next() {
	_swig_wrap_ESetIterator_next(arg1)
}

func _swig_wrap_ESetIterator_prev(SwigcptrESetIterator)

func (arg1 SwigcptrESetIterator) Prev() {
	_swig_wrap_ESetIterator_prev(arg1)
}

func _swig_wrap_delete_ESetIterator(uintptr)

func DeleteESetIterator(arg1 ESetIterator) {
	_swig_wrap_delete_ESetIterator(arg1.Swigcptr())
}

type ESetIterator interface {
	Swigcptr() uintptr
	SwigIsESetIterator()
	Get_weight() float64
	Get_description() string
	At_end() bool
	Equals(arg2 ESetIterator) bool
	Get_term() string
	Next()
	Prev()
}

type SwigcptrRSet uintptr

func (p SwigcptrRSet) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrRSet) SwigIsRSet() {
}

func _swig_wrap_new_RSet() SwigcptrRSet

func NewRSet() RSet {
	return _swig_wrap_new_RSet()
}

func _swig_wrap_delete_RSet(uintptr)

func DeleteRSet(arg1 RSet) {
	_swig_wrap_delete_RSet(arg1.Swigcptr())
}

func _swig_wrap_RSet_size(SwigcptrRSet) uint

func (arg1 SwigcptrRSet) Size() uint {
	return _swig_wrap_RSet_size(arg1)
}

func _swig_wrap_RSet_empty(SwigcptrRSet) bool

func (arg1 SwigcptrRSet) Empty() bool {
	return _swig_wrap_RSet_empty(arg1)
}

func _swig_wrap_RSet_add_document__SWIG_0(SwigcptrRSet, uint)

func (arg1 SwigcptrRSet) Add_document__SWIG_0(arg2 uint) {
	_swig_wrap_RSet_add_document__SWIG_0(arg1, arg2)
}

func _swig_wrap_RSet_add_document__SWIG_1(SwigcptrRSet, uintptr)

func (arg1 SwigcptrRSet) Add_document__SWIG_1(arg2 MSetIterator) {
	_swig_wrap_RSet_add_document__SWIG_1(arg1, arg2.Swigcptr())
}

func (p SwigcptrRSet) Add_document(a ...interface{}) {
	argc := len(a)
	if argc == 1 {
		if _, ok := a[0].(SwigcptrMSetIterator); !ok {
			goto check_1
		}
		p.Add_document__SWIG_1(a[0].(MSetIterator))
		return
	}
check_1:
	if argc == 1 {
		p.Add_document__SWIG_0(a[0].(uint))
		return
	}
	panic("No match for overloaded function call")
}

func _swig_wrap_RSet_remove_document__SWIG_0(SwigcptrRSet, uint)

func (arg1 SwigcptrRSet) Remove_document__SWIG_0(arg2 uint) {
	_swig_wrap_RSet_remove_document__SWIG_0(arg1, arg2)
}

func _swig_wrap_RSet_remove_document__SWIG_1(SwigcptrRSet, uintptr)

func (arg1 SwigcptrRSet) Remove_document__SWIG_1(arg2 MSetIterator) {
	_swig_wrap_RSet_remove_document__SWIG_1(arg1, arg2.Swigcptr())
}

func (p SwigcptrRSet) Remove_document(a ...interface{}) {
	argc := len(a)
	if argc == 1 {
		if _, ok := a[0].(SwigcptrMSetIterator); !ok {
			goto check_1
		}
		p.Remove_document__SWIG_1(a[0].(MSetIterator))
		return
	}
check_1:
	if argc == 1 {
		p.Remove_document__SWIG_0(a[0].(uint))
		return
	}
	panic("No match for overloaded function call")
}

func _swig_wrap_RSet_contains__SWIG_0(SwigcptrRSet, uint) bool

func (arg1 SwigcptrRSet) Contains__SWIG_0(arg2 uint) bool {
	return _swig_wrap_RSet_contains__SWIG_0(arg1, arg2)
}

func _swig_wrap_RSet_contains__SWIG_1(SwigcptrRSet, uintptr) bool

func (arg1 SwigcptrRSet) Contains__SWIG_1(arg2 MSetIterator) bool {
	return _swig_wrap_RSet_contains__SWIG_1(arg1, arg2.Swigcptr())
}

func (p SwigcptrRSet) Contains(a ...interface{}) bool {
	argc := len(a)
	if argc == 1 {
		if _, ok := a[0].(SwigcptrMSetIterator); !ok {
			goto check_1
		}
		return p.Contains__SWIG_1(a[0].(MSetIterator))
	}
check_1:
	if argc == 1 {
		return p.Contains__SWIG_0(a[0].(uint))
	}
	panic("No match for overloaded function call")
}

func _swig_wrap_RSet_get_description(SwigcptrRSet) string

func (arg1 SwigcptrRSet) Get_description() string {
	return _swig_wrap_RSet_get_description(arg1)
}

type RSet interface {
	Swigcptr() uintptr
	SwigIsRSet()
	Size() uint
	Empty() bool
	Add_document(a ...interface{})
	Remove_document(a ...interface{})
	Contains(a ...interface{}) bool
	Get_description() string
}

type _swig_DirectorMatchDecider struct {
	SwigcptrMatchDecider
	v interface{}
}

func (p *_swig_DirectorMatchDecider) Swigcptr() uintptr {
	return p.SwigcptrMatchDecider.Swigcptr()
}

func (p *_swig_DirectorMatchDecider) SwigIsMatchDecider() {
}

func (p *_swig_DirectorMatchDecider) DirectorInterface() interface{} {
	return p.v
}

func _swig_NewDirectorMatchDeciderMatchDecider(*_swig_DirectorMatchDecider) SwigcptrMatchDecider

func NewDirectorMatchDecider(v interface{}) MatchDecider {
	p := &_swig_DirectorMatchDecider{0, v}
	p.SwigcptrMatchDecider = _swig_NewDirectorMatchDeciderMatchDecider(p)
	return p
}

type _swig_DirectorInterfaceMatchDeciderApply interface {
	Apply(Document) bool
}

func _swig_wrap__swig_DirectorMatchDecider_upcall_Apply(SwigcptrMatchDecider, uintptr) bool
func (swig_p *_swig_DirectorMatchDecider) Apply(doc Document) bool {
	if swig_g, swig_ok := swig_p.v.(_swig_DirectorInterfaceMatchDeciderApply); swig_ok {
		return swig_g.Apply(doc)
	}
	return _swig_wrap__swig_DirectorMatchDecider_upcall_Apply(swig_p.SwigcptrMatchDecider, doc.Swigcptr())
}

func DirectorMatchDeciderApply(p MatchDecider, arg2 Document) bool {
	return _swig_wrap__swig_DirectorMatchDecider_upcall_Apply(p.(*_swig_DirectorMatchDecider).SwigcptrMatchDecider, arg2.Swigcptr())
}

func Swig_DirectorMatchDecider_callback_Apply(p *_swig_DirectorMatchDecider, arg2 uintptr) (swig_result bool) {
	return p.Apply(SwigcptrDocument(arg2))
}

func _swig_wrap_DeleteDirectorMatchDecider(uintptr)

func DeleteDirectorMatchDecider(arg1 MatchDecider) {
	_swig_wrap_DeleteDirectorMatchDecider(arg1.Swigcptr())
}

func Swiggo_DeleteDirector_MatchDecider(p *_swig_DirectorMatchDecider) {
	p.SwigcptrMatchDecider = 0
}

type SwigcptrMatchDecider uintptr

func (p SwigcptrMatchDecider) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrMatchDecider) SwigIsMatchDecider() {
}

func (p SwigcptrMatchDecider) DirectorInterface() interface{} {
	return nil
}

func _swig_wrap_MatchDecider_Apply(SwigcptrMatchDecider, uintptr) bool

func (arg1 SwigcptrMatchDecider) Apply(arg2 Document) bool {
	return _swig_wrap_MatchDecider_Apply(arg1, arg2.Swigcptr())
}

func _swig_wrap_delete_MatchDecider(uintptr)

func DeleteMatchDecider(arg1 MatchDecider) {
	_swig_wrap_delete_MatchDecider(arg1.Swigcptr())
}

func _swig_wrap_new_MatchDecider() SwigcptrMatchDecider

func NewMatchDecider() MatchDecider {
	return _swig_wrap_new_MatchDecider()
}

type MatchDecider interface {
	Swigcptr() uintptr
	SwigIsMatchDecider()
	DirectorInterface() interface{}
	Apply(arg2 Document) bool
}

type SwigcptrEnquire uintptr

func (p SwigcptrEnquire) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrEnquire) SwigIsEnquire() {
}

func _swig_wrap_new_Enquire(uintptr) SwigcptrEnquire

func NewEnquire(arg1 Database) Enquire {
	return _swig_wrap_new_Enquire(arg1.Swigcptr())
}

func _swig_wrap_delete_Enquire(uintptr)

func DeleteEnquire(arg1 Enquire) {
	_swig_wrap_delete_Enquire(arg1.Swigcptr())
}

func _swig_wrap_Enquire_set_query__SWIG_0(SwigcptrEnquire, uintptr, uint)

func (arg1 SwigcptrEnquire) Set_query__SWIG_0(arg2 Query, arg3 uint) {
	_swig_wrap_Enquire_set_query__SWIG_0(arg1, arg2.Swigcptr(), arg3)
}

func _swig_wrap_Enquire_set_query__SWIG_1(SwigcptrEnquire, uintptr)

func (arg1 SwigcptrEnquire) Set_query__SWIG_1(arg2 Query) {
	_swig_wrap_Enquire_set_query__SWIG_1(arg1, arg2.Swigcptr())
}

func (p SwigcptrEnquire) Set_query(a ...interface{}) {
	argc := len(a)
	if argc == 1 {
		p.Set_query__SWIG_1(a[0].(Query))
		return
	}
	if argc == 2 {
		p.Set_query__SWIG_0(a[0].(Query), a[1].(uint))
		return
	}
	panic("No match for overloaded function call")
}

func _swig_wrap_Enquire_get_query(SwigcptrEnquire) SwigcptrQuery

func (arg1 SwigcptrEnquire) Get_query() Query {
	return _swig_wrap_Enquire_get_query(arg1)
}

func _swig_wrap_Enquire_add_matchspy(SwigcptrEnquire, uintptr)

func (arg1 SwigcptrEnquire) Add_matchspy(arg2 MatchSpy) {
	_swig_wrap_Enquire_add_matchspy(arg1, arg2.Swigcptr())
}

func _swig_wrap_Enquire_clear_matchspies(SwigcptrEnquire)

func (arg1 SwigcptrEnquire) Clear_matchspies() {
	_swig_wrap_Enquire_clear_matchspies(arg1)
}

func _swig_wrap_Enquire_set_weighting_scheme(SwigcptrEnquire, uintptr)

func (arg1 SwigcptrEnquire) Set_weighting_scheme(arg2 Weight) {
	_swig_wrap_Enquire_set_weighting_scheme(arg1, arg2.Swigcptr())
}

func _swig_wrap_Enquire_set_collapse_key__SWIG_0(SwigcptrEnquire, uint, uint)

func (arg1 SwigcptrEnquire) Set_collapse_key__SWIG_0(arg2 uint, arg3 uint) {
	_swig_wrap_Enquire_set_collapse_key__SWIG_0(arg1, arg2, arg3)
}

func _swig_wrap_Enquire_set_collapse_key__SWIG_1(SwigcptrEnquire, uint)

func (arg1 SwigcptrEnquire) Set_collapse_key__SWIG_1(arg2 uint) {
	_swig_wrap_Enquire_set_collapse_key__SWIG_1(arg1, arg2)
}

func (p SwigcptrEnquire) Set_collapse_key(a ...interface{}) {
	argc := len(a)
	if argc == 1 {
		p.Set_collapse_key__SWIG_1(a[0].(uint))
		return
	}
	if argc == 2 {
		p.Set_collapse_key__SWIG_0(a[0].(uint), a[1].(uint))
		return
	}
	panic("No match for overloaded function call")
}

type XapianEnquireDocid_order int
func _swig_getEnquire_ASCENDING_Enquire() int
var EnquireASCENDING int = _swig_getEnquire_ASCENDING_Enquire()
func _swig_getEnquire_DESCENDING_Enquire() int
var EnquireDESCENDING int = _swig_getEnquire_DESCENDING_Enquire()
func _swig_getEnquire_DONT_CARE_Enquire() int
var EnquireDONT_CARE int = _swig_getEnquire_DONT_CARE_Enquire()
func _swig_wrap_Enquire_set_docid_order(SwigcptrEnquire, XapianEnquireDocid_order)

func (arg1 SwigcptrEnquire) Set_docid_order(arg2 XapianEnquireDocid_order) {
	_swig_wrap_Enquire_set_docid_order(arg1, arg2)
}

func _swig_wrap_Enquire_set_cutoff__SWIG_0(SwigcptrEnquire, int, float64)

func (arg1 SwigcptrEnquire) Set_cutoff__SWIG_0(arg2 int, arg3 float64) {
	_swig_wrap_Enquire_set_cutoff__SWIG_0(arg1, arg2, arg3)
}

func _swig_wrap_Enquire_set_cutoff__SWIG_1(SwigcptrEnquire, int)

func (arg1 SwigcptrEnquire) Set_cutoff__SWIG_1(arg2 int) {
	_swig_wrap_Enquire_set_cutoff__SWIG_1(arg1, arg2)
}

func (p SwigcptrEnquire) Set_cutoff(a ...interface{}) {
	argc := len(a)
	if argc == 1 {
		p.Set_cutoff__SWIG_1(a[0].(int))
		return
	}
	if argc == 2 {
		p.Set_cutoff__SWIG_0(a[0].(int), a[1].(float64))
		return
	}
	panic("No match for overloaded function call")
}

func _swig_wrap_Enquire_set_sort_by_relevance(SwigcptrEnquire)

func (arg1 SwigcptrEnquire) Set_sort_by_relevance() {
	_swig_wrap_Enquire_set_sort_by_relevance(arg1)
}

func _swig_wrap_Enquire_set_sort_by_value(SwigcptrEnquire, uint, bool)

func (arg1 SwigcptrEnquire) Set_sort_by_value(arg2 uint, arg3 bool) {
	_swig_wrap_Enquire_set_sort_by_value(arg1, arg2, arg3)
}

func _swig_wrap_Enquire_set_sort_by_key(SwigcptrEnquire, uintptr, bool)

func (arg1 SwigcptrEnquire) Set_sort_by_key(arg2 KeyMaker, arg3 bool) {
	_swig_wrap_Enquire_set_sort_by_key(arg1, arg2.Swigcptr(), arg3)
}

func _swig_wrap_Enquire_set_sort_by_value_then_relevance(SwigcptrEnquire, uint, bool)

func (arg1 SwigcptrEnquire) Set_sort_by_value_then_relevance(arg2 uint, arg3 bool) {
	_swig_wrap_Enquire_set_sort_by_value_then_relevance(arg1, arg2, arg3)
}

func _swig_wrap_Enquire_set_sort_by_key_then_relevance(SwigcptrEnquire, uintptr, bool)

func (arg1 SwigcptrEnquire) Set_sort_by_key_then_relevance(arg2 KeyMaker, arg3 bool) {
	_swig_wrap_Enquire_set_sort_by_key_then_relevance(arg1, arg2.Swigcptr(), arg3)
}

func _swig_wrap_Enquire_set_sort_by_relevance_then_value(SwigcptrEnquire, uint, bool)

func (arg1 SwigcptrEnquire) Set_sort_by_relevance_then_value(arg2 uint, arg3 bool) {
	_swig_wrap_Enquire_set_sort_by_relevance_then_value(arg1, arg2, arg3)
}

func _swig_wrap_Enquire_set_sort_by_relevance_then_key(SwigcptrEnquire, uintptr, bool)

func (arg1 SwigcptrEnquire) Set_sort_by_relevance_then_key(arg2 KeyMaker, arg3 bool) {
	_swig_wrap_Enquire_set_sort_by_relevance_then_key(arg1, arg2.Swigcptr(), arg3)
}

func _swig_wrap_Enquire_get_mset__SWIG_0(SwigcptrEnquire, uint, uint, uint, uintptr, uintptr) SwigcptrMSet

func (arg1 SwigcptrEnquire) Get_mset__SWIG_0(arg2 uint, arg3 uint, arg4 uint, arg5 RSet, arg6 MatchDecider) MSet {
	return _swig_wrap_Enquire_get_mset__SWIG_0(arg1, arg2, arg3, arg4, arg5.Swigcptr(), arg6.Swigcptr())
}

func _swig_wrap_Enquire_get_mset__SWIG_1(SwigcptrEnquire, uint, uint, uint, uintptr) SwigcptrMSet

func (arg1 SwigcptrEnquire) Get_mset__SWIG_1(arg2 uint, arg3 uint, arg4 uint, arg5 RSet) MSet {
	return _swig_wrap_Enquire_get_mset__SWIG_1(arg1, arg2, arg3, arg4, arg5.Swigcptr())
}

func _swig_wrap_Enquire_get_mset__SWIG_2(SwigcptrEnquire, uint, uint, uint) SwigcptrMSet

func (arg1 SwigcptrEnquire) Get_mset__SWIG_2(arg2 uint, arg3 uint, arg4 uint) MSet {
	return _swig_wrap_Enquire_get_mset__SWIG_2(arg1, arg2, arg3, arg4)
}

func _swig_wrap_Enquire_get_mset__SWIG_3(SwigcptrEnquire, uint, uint) SwigcptrMSet

func (arg1 SwigcptrEnquire) Get_mset__SWIG_3(arg2 uint, arg3 uint) MSet {
	return _swig_wrap_Enquire_get_mset__SWIG_3(arg1, arg2, arg3)
}

func _swig_wrap_Enquire_get_mset__SWIG_4(SwigcptrEnquire, uint, uint, uintptr, uintptr) SwigcptrMSet

func (arg1 SwigcptrEnquire) Get_mset__SWIG_4(arg2 uint, arg3 uint, arg4 RSet, arg5 MatchDecider) MSet {
	return _swig_wrap_Enquire_get_mset__SWIG_4(arg1, arg2, arg3, arg4.Swigcptr(), arg5.Swigcptr())
}

func _swig_wrap_Enquire_get_mset__SWIG_5(SwigcptrEnquire, uint, uint, uintptr) SwigcptrMSet

func (arg1 SwigcptrEnquire) Get_mset__SWIG_5(arg2 uint, arg3 uint, arg4 RSet) MSet {
	return _swig_wrap_Enquire_get_mset__SWIG_5(arg1, arg2, arg3, arg4.Swigcptr())
}

func (p SwigcptrEnquire) Get_mset(a ...interface{}) MSet {
	argc := len(a)
	if argc == 2 {
		return p.Get_mset__SWIG_3(a[0].(uint), a[1].(uint))
	}
	if argc == 3 {
		if _, ok := a[2].(SwigcptrRSet); !ok {
			goto check_2
		}
		return p.Get_mset__SWIG_5(a[0].(uint), a[1].(uint), a[2].(RSet))
	}
check_2:
	if argc == 3 {
		return p.Get_mset__SWIG_2(a[0].(uint), a[1].(uint), a[2].(uint))
	}
	if argc == 4 {
		if _, ok := a[2].(SwigcptrRSet); !ok {
			goto check_4
		}
		if _, ok := a[3].(SwigcptrMatchDecider); !ok {
			goto check_4
		}
		return p.Get_mset__SWIG_4(a[0].(uint), a[1].(uint), a[2].(RSet), a[3].(MatchDecider))
	}
check_4:
	if argc == 4 {
		return p.Get_mset__SWIG_1(a[0].(uint), a[1].(uint), a[2].(uint), a[3].(RSet))
	}
	if argc == 5 {
		return p.Get_mset__SWIG_0(a[0].(uint), a[1].(uint), a[2].(uint), a[3].(RSet), a[4].(MatchDecider))
	}
	panic("No match for overloaded function call")
}

func _swig_getEnquire_Enquire_INCLUDE_QUERY_TERMS_Enquire() int
var EnquireINCLUDE_QUERY_TERMS int = _swig_getEnquire_Enquire_INCLUDE_QUERY_TERMS_Enquire()
func _swig_getEnquire_Enquire_USE_EXACT_TERMFREQ_Enquire() int
var EnquireUSE_EXACT_TERMFREQ int = _swig_getEnquire_Enquire_USE_EXACT_TERMFREQ_Enquire()
func _swig_wrap_Enquire_get_eset__SWIG_0(SwigcptrEnquire, uint, uintptr, int, float64, uintptr) SwigcptrESet

func (arg1 SwigcptrEnquire) Get_eset__SWIG_0(arg2 uint, arg3 RSet, arg4 int, arg5 float64, arg6 ExpandDecider) ESet {
	return _swig_wrap_Enquire_get_eset__SWIG_0(arg1, arg2, arg3.Swigcptr(), arg4, arg5, arg6.Swigcptr())
}

func _swig_wrap_Enquire_get_eset__SWIG_1(SwigcptrEnquire, uint, uintptr, int, float64) SwigcptrESet

func (arg1 SwigcptrEnquire) Get_eset__SWIG_1(arg2 uint, arg3 RSet, arg4 int, arg5 float64) ESet {
	return _swig_wrap_Enquire_get_eset__SWIG_1(arg1, arg2, arg3.Swigcptr(), arg4, arg5)
}

func _swig_wrap_Enquire_get_eset__SWIG_2(SwigcptrEnquire, uint, uintptr, int) SwigcptrESet

func (arg1 SwigcptrEnquire) Get_eset__SWIG_2(arg2 uint, arg3 RSet, arg4 int) ESet {
	return _swig_wrap_Enquire_get_eset__SWIG_2(arg1, arg2, arg3.Swigcptr(), arg4)
}

func _swig_wrap_Enquire_get_eset__SWIG_3(SwigcptrEnquire, uint, uintptr) SwigcptrESet

func (arg1 SwigcptrEnquire) Get_eset__SWIG_3(arg2 uint, arg3 RSet) ESet {
	return _swig_wrap_Enquire_get_eset__SWIG_3(arg1, arg2, arg3.Swigcptr())
}

func _swig_wrap_Enquire_get_eset__SWIG_4(SwigcptrEnquire, uint, uintptr, uintptr) SwigcptrESet

func (arg1 SwigcptrEnquire) Get_eset__SWIG_4(arg2 uint, arg3 RSet, arg4 ExpandDecider) ESet {
	return _swig_wrap_Enquire_get_eset__SWIG_4(arg1, arg2, arg3.Swigcptr(), arg4.Swigcptr())
}

func _swig_wrap_Enquire_get_eset__SWIG_5(SwigcptrEnquire, uint, uintptr, int, float64, uintptr, float64) SwigcptrESet

func (arg1 SwigcptrEnquire) Get_eset__SWIG_5(arg2 uint, arg3 RSet, arg4 int, arg5 float64, arg6 ExpandDecider, arg7 float64) ESet {
	return _swig_wrap_Enquire_get_eset__SWIG_5(arg1, arg2, arg3.Swigcptr(), arg4, arg5, arg6.Swigcptr(), arg7)
}

func (p SwigcptrEnquire) Get_eset(a ...interface{}) ESet {
	argc := len(a)
	if argc == 2 {
		return p.Get_eset__SWIG_3(a[0].(uint), a[1].(RSet))
	}
	if argc == 3 {
		if _, ok := a[2].(SwigcptrExpandDecider); !ok {
			goto check_2
		}
		return p.Get_eset__SWIG_4(a[0].(uint), a[1].(RSet), a[2].(ExpandDecider))
	}
check_2:
	if argc == 3 {
		return p.Get_eset__SWIG_2(a[0].(uint), a[1].(RSet), a[2].(int))
	}
	if argc == 4 {
		return p.Get_eset__SWIG_1(a[0].(uint), a[1].(RSet), a[2].(int), a[3].(float64))
	}
	if argc == 5 {
		return p.Get_eset__SWIG_0(a[0].(uint), a[1].(RSet), a[2].(int), a[3].(float64), a[4].(ExpandDecider))
	}
	if argc == 6 {
		return p.Get_eset__SWIG_5(a[0].(uint), a[1].(RSet), a[2].(int), a[3].(float64), a[4].(ExpandDecider), a[5].(float64))
	}
	panic("No match for overloaded function call")
}

func _swig_wrap_Enquire_get_matching_terms_begin__SWIG_0(SwigcptrEnquire, uint) SwigcptrTermIterator

func (arg1 SwigcptrEnquire) Get_matching_terms_begin__SWIG_0(arg2 uint) TermIterator {
	return _swig_wrap_Enquire_get_matching_terms_begin__SWIG_0(arg1, arg2)
}

func _swig_wrap_Enquire_get_matching_terms_end__SWIG_0(SwigcptrEnquire, uint) SwigcptrTermIterator

func (arg1 SwigcptrEnquire) Get_matching_terms_end__SWIG_0(arg2 uint) TermIterator {
	return _swig_wrap_Enquire_get_matching_terms_end__SWIG_0(arg1, arg2)
}

func _swig_wrap_Enquire_get_matching_terms_begin__SWIG_1(SwigcptrEnquire, uintptr) SwigcptrTermIterator

func (arg1 SwigcptrEnquire) Get_matching_terms_begin__SWIG_1(arg2 MSetIterator) TermIterator {
	return _swig_wrap_Enquire_get_matching_terms_begin__SWIG_1(arg1, arg2.Swigcptr())
}

func (p SwigcptrEnquire) Get_matching_terms_begin(a ...interface{}) TermIterator {
	argc := len(a)
	if argc == 1 {
		if _, ok := a[0].(SwigcptrMSetIterator); !ok {
			goto check_1
		}
		return p.Get_matching_terms_begin__SWIG_1(a[0].(MSetIterator))
	}
check_1:
	if argc == 1 {
		return p.Get_matching_terms_begin__SWIG_0(a[0].(uint))
	}
	panic("No match for overloaded function call")
}

func _swig_wrap_Enquire_get_matching_terms_end__SWIG_1(SwigcptrEnquire, uintptr) SwigcptrTermIterator

func (arg1 SwigcptrEnquire) Get_matching_terms_end__SWIG_1(arg2 MSetIterator) TermIterator {
	return _swig_wrap_Enquire_get_matching_terms_end__SWIG_1(arg1, arg2.Swigcptr())
}

func (p SwigcptrEnquire) Get_matching_terms_end(a ...interface{}) TermIterator {
	argc := len(a)
	if argc == 1 {
		if _, ok := a[0].(SwigcptrMSetIterator); !ok {
			goto check_1
		}
		return p.Get_matching_terms_end__SWIG_1(a[0].(MSetIterator))
	}
check_1:
	if argc == 1 {
		return p.Get_matching_terms_end__SWIG_0(a[0].(uint))
	}
	panic("No match for overloaded function call")
}

func _swig_wrap_Enquire_get_description(SwigcptrEnquire) string

func (arg1 SwigcptrEnquire) Get_description() string {
	return _swig_wrap_Enquire_get_description(arg1)
}

type Enquire interface {
	Swigcptr() uintptr
	SwigIsEnquire()
	Set_query(a ...interface{})
	Get_query() Query
	Add_matchspy(arg2 MatchSpy)
	Clear_matchspies()
	Set_weighting_scheme(arg2 Weight)
	Set_collapse_key(a ...interface{})
	Set_docid_order(arg2 XapianEnquireDocid_order)
	Set_cutoff(a ...interface{})
	Set_sort_by_relevance()
	Set_sort_by_value(arg2 uint, arg3 bool)
	Set_sort_by_key(arg2 KeyMaker, arg3 bool)
	Set_sort_by_value_then_relevance(arg2 uint, arg3 bool)
	Set_sort_by_key_then_relevance(arg2 KeyMaker, arg3 bool)
	Set_sort_by_relevance_then_value(arg2 uint, arg3 bool)
	Set_sort_by_relevance_then_key(arg2 KeyMaker, arg3 bool)
	Get_mset(a ...interface{}) MSet
	Get_eset(a ...interface{}) ESet
	Get_matching_terms_begin(a ...interface{}) TermIterator
	Get_matching_terms_end(a ...interface{}) TermIterator
	Get_description() string
}

type _swig_DirectorExpandDecider struct {
	SwigcptrExpandDecider
	v interface{}
}

func (p *_swig_DirectorExpandDecider) Swigcptr() uintptr {
	return p.SwigcptrExpandDecider.Swigcptr()
}

func (p *_swig_DirectorExpandDecider) SwigIsExpandDecider() {
}

func (p *_swig_DirectorExpandDecider) DirectorInterface() interface{} {
	return p.v
}

func _swig_NewDirectorExpandDeciderExpandDecider(*_swig_DirectorExpandDecider) SwigcptrExpandDecider

func NewDirectorExpandDecider(v interface{}) ExpandDecider {
	p := &_swig_DirectorExpandDecider{0, v}
	p.SwigcptrExpandDecider = _swig_NewDirectorExpandDeciderExpandDecider(p)
	return p
}

type _swig_DirectorInterfaceExpandDeciderApply interface {
	Apply(string) bool
}

func _swig_wrap__swig_DirectorExpandDecider_upcall_Apply(SwigcptrExpandDecider, string) bool
func (swig_p *_swig_DirectorExpandDecider) Apply(term string) bool {
	if swig_g, swig_ok := swig_p.v.(_swig_DirectorInterfaceExpandDeciderApply); swig_ok {
		return swig_g.Apply(term)
	}
	return _swig_wrap__swig_DirectorExpandDecider_upcall_Apply(swig_p.SwigcptrExpandDecider, term)
}

func DirectorExpandDeciderApply(p ExpandDecider, arg2 string) bool {
	return _swig_wrap__swig_DirectorExpandDecider_upcall_Apply(p.(*_swig_DirectorExpandDecider).SwigcptrExpandDecider, arg2)
}

func Swig_DirectorExpandDecider_callback_Apply(p *_swig_DirectorExpandDecider, arg2 string) (swig_result bool) {
	return p.Apply(arg2)
}

func _swig_wrap_DeleteDirectorExpandDecider(uintptr)

func DeleteDirectorExpandDecider(arg1 ExpandDecider) {
	_swig_wrap_DeleteDirectorExpandDecider(arg1.Swigcptr())
}

func Swiggo_DeleteDirector_ExpandDecider(p *_swig_DirectorExpandDecider) {
	p.SwigcptrExpandDecider = 0
}

type SwigcptrExpandDecider uintptr

func (p SwigcptrExpandDecider) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrExpandDecider) SwigIsExpandDecider() {
}

func (p SwigcptrExpandDecider) DirectorInterface() interface{} {
	return nil
}

func _swig_wrap_ExpandDecider_Apply(SwigcptrExpandDecider, string) bool

func (arg1 SwigcptrExpandDecider) Apply(arg2 string) bool {
	return _swig_wrap_ExpandDecider_Apply(arg1, arg2)
}

func _swig_wrap_delete_ExpandDecider(uintptr)

func DeleteExpandDecider(arg1 ExpandDecider) {
	_swig_wrap_delete_ExpandDecider(arg1.Swigcptr())
}

func _swig_wrap_new_ExpandDecider() SwigcptrExpandDecider

func NewExpandDecider() ExpandDecider {
	return _swig_wrap_new_ExpandDecider()
}

type ExpandDecider interface {
	Swigcptr() uintptr
	SwigIsExpandDecider()
	DirectorInterface() interface{}
	Apply(arg2 string) bool
}

type SwigcptrExpandDeciderAnd uintptr

func (p SwigcptrExpandDeciderAnd) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrExpandDeciderAnd) SwigIsExpandDeciderAnd() {
}

func _swig_wrap_new_ExpandDeciderAnd(uintptr, uintptr) SwigcptrExpandDeciderAnd

func NewExpandDeciderAnd(arg1 ExpandDecider, arg2 ExpandDecider) ExpandDeciderAnd {
	return _swig_wrap_new_ExpandDeciderAnd(arg1.Swigcptr(), arg2.Swigcptr())
}

func _swig_wrap_delete_ExpandDeciderAnd(uintptr)

func DeleteExpandDeciderAnd(arg1 ExpandDeciderAnd) {
	_swig_wrap_delete_ExpandDeciderAnd(arg1.Swigcptr())
}

func _swig_wrap_ExpandDeciderAnd_Apply(SwigcptrExpandDeciderAnd, string) bool

func (_swig_base SwigcptrExpandDeciderAnd) Apply(arg1 string) bool {
	return _swig_wrap_ExpandDeciderAnd_Apply(_swig_base, arg1)
}

func (p SwigcptrExpandDeciderAnd) SwigIsExpandDecider() {
}

func (p SwigcptrExpandDeciderAnd) SwigGetExpandDecider() ExpandDecider {
	return SwigcptrExpandDecider(p.Swigcptr())
}

type ExpandDeciderAnd interface {
	Swigcptr() uintptr
	SwigIsExpandDeciderAnd()
	Apply(arg1 string) bool
	SwigIsExpandDecider()
	SwigGetExpandDecider() ExpandDecider
}

type SwigcptrExpandDeciderFilterPrefix uintptr

func (p SwigcptrExpandDeciderFilterPrefix) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrExpandDeciderFilterPrefix) SwigIsExpandDeciderFilterPrefix() {
}

func _swig_wrap_new_ExpandDeciderFilterPrefix(string) SwigcptrExpandDeciderFilterPrefix

func NewExpandDeciderFilterPrefix(arg1 string) ExpandDeciderFilterPrefix {
	return _swig_wrap_new_ExpandDeciderFilterPrefix(arg1)
}

func _swig_wrap_delete_ExpandDeciderFilterPrefix(uintptr)

func DeleteExpandDeciderFilterPrefix(arg1 ExpandDeciderFilterPrefix) {
	_swig_wrap_delete_ExpandDeciderFilterPrefix(arg1.Swigcptr())
}

func _swig_wrap_ExpandDeciderFilterPrefix_Apply(SwigcptrExpandDeciderFilterPrefix, string) bool

func (_swig_base SwigcptrExpandDeciderFilterPrefix) Apply(arg1 string) bool {
	return _swig_wrap_ExpandDeciderFilterPrefix_Apply(_swig_base, arg1)
}

func (p SwigcptrExpandDeciderFilterPrefix) SwigIsExpandDecider() {
}

func (p SwigcptrExpandDeciderFilterPrefix) SwigGetExpandDecider() ExpandDecider {
	return SwigcptrExpandDecider(p.Swigcptr())
}

type ExpandDeciderFilterPrefix interface {
	Swigcptr() uintptr
	SwigIsExpandDeciderFilterPrefix()
	Apply(arg1 string) bool
	SwigIsExpandDecider()
	SwigGetExpandDecider() ExpandDecider
}

type _swig_DirectorKeyMaker struct {
	SwigcptrKeyMaker
	v interface{}
}

func (p *_swig_DirectorKeyMaker) Swigcptr() uintptr {
	return p.SwigcptrKeyMaker.Swigcptr()
}

func (p *_swig_DirectorKeyMaker) SwigIsKeyMaker() {
}

func (p *_swig_DirectorKeyMaker) DirectorInterface() interface{} {
	return p.v
}

func _swig_NewDirectorKeyMakerKeyMaker(*_swig_DirectorKeyMaker) SwigcptrKeyMaker

func NewDirectorKeyMaker(v interface{}) KeyMaker {
	p := &_swig_DirectorKeyMaker{0, v}
	p.SwigcptrKeyMaker = _swig_NewDirectorKeyMakerKeyMaker(p)
	return p
}

type _swig_DirectorInterfaceKeyMakerApply interface {
	Apply(Document) string
}

func _swig_wrap__swig_DirectorKeyMaker_upcall_Apply(SwigcptrKeyMaker, uintptr) string
func (swig_p *_swig_DirectorKeyMaker) Apply(doc Document) string {
	if swig_g, swig_ok := swig_p.v.(_swig_DirectorInterfaceKeyMakerApply); swig_ok {
		return swig_g.Apply(doc)
	}
	return _swig_wrap__swig_DirectorKeyMaker_upcall_Apply(swig_p.SwigcptrKeyMaker, doc.Swigcptr())
}

func DirectorKeyMakerApply(p KeyMaker, arg2 Document) string {
	return _swig_wrap__swig_DirectorKeyMaker_upcall_Apply(p.(*_swig_DirectorKeyMaker).SwigcptrKeyMaker, arg2.Swigcptr())
}

func Swig_DirectorKeyMaker_callback_Apply(p *_swig_DirectorKeyMaker, arg2 uintptr) (swig_result string) {
	return p.Apply(SwigcptrDocument(arg2))
}

func _swig_wrap_DeleteDirectorKeyMaker(uintptr)

func DeleteDirectorKeyMaker(arg1 KeyMaker) {
	_swig_wrap_DeleteDirectorKeyMaker(arg1.Swigcptr())
}

func Swiggo_DeleteDirector_KeyMaker(p *_swig_DirectorKeyMaker) {
	p.SwigcptrKeyMaker = 0
}

type SwigcptrKeyMaker uintptr

func (p SwigcptrKeyMaker) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrKeyMaker) SwigIsKeyMaker() {
}

func (p SwigcptrKeyMaker) DirectorInterface() interface{} {
	return nil
}

func _swig_wrap_KeyMaker_Apply(SwigcptrKeyMaker, uintptr) string

func (arg1 SwigcptrKeyMaker) Apply(arg2 Document) string {
	return _swig_wrap_KeyMaker_Apply(arg1, arg2.Swigcptr())
}

func _swig_wrap_delete_KeyMaker(uintptr)

func DeleteKeyMaker(arg1 KeyMaker) {
	_swig_wrap_delete_KeyMaker(arg1.Swigcptr())
}

func _swig_wrap_new_KeyMaker() SwigcptrKeyMaker

func NewKeyMaker() KeyMaker {
	return _swig_wrap_new_KeyMaker()
}

type KeyMaker interface {
	Swigcptr() uintptr
	SwigIsKeyMaker()
	DirectorInterface() interface{}
	Apply(arg2 Document) string
}

type SwigcptrMultiValueKeyMaker uintptr

func (p SwigcptrMultiValueKeyMaker) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrMultiValueKeyMaker) SwigIsMultiValueKeyMaker() {
}

func _swig_wrap_new_MultiValueKeyMaker() SwigcptrMultiValueKeyMaker

func NewMultiValueKeyMaker() MultiValueKeyMaker {
	return _swig_wrap_new_MultiValueKeyMaker()
}

func _swig_wrap_MultiValueKeyMaker_add_value__SWIG_0(SwigcptrMultiValueKeyMaker, uint, bool)

func (arg1 SwigcptrMultiValueKeyMaker) Add_value__SWIG_0(arg2 uint, arg3 bool) {
	_swig_wrap_MultiValueKeyMaker_add_value__SWIG_0(arg1, arg2, arg3)
}

func _swig_wrap_MultiValueKeyMaker_add_value__SWIG_1(SwigcptrMultiValueKeyMaker, uint)

func (arg1 SwigcptrMultiValueKeyMaker) Add_value__SWIG_1(arg2 uint) {
	_swig_wrap_MultiValueKeyMaker_add_value__SWIG_1(arg1, arg2)
}

func (p SwigcptrMultiValueKeyMaker) Add_value(a ...interface{}) {
	argc := len(a)
	if argc == 1 {
		p.Add_value__SWIG_1(a[0].(uint))
		return
	}
	if argc == 2 {
		p.Add_value__SWIG_0(a[0].(uint), a[1].(bool))
		return
	}
	panic("No match for overloaded function call")
}

func _swig_wrap_delete_MultiValueKeyMaker(uintptr)

func DeleteMultiValueKeyMaker(arg1 MultiValueKeyMaker) {
	_swig_wrap_delete_MultiValueKeyMaker(arg1.Swigcptr())
}

func _swig_wrap_MultiValueKeyMaker_Apply(SwigcptrMultiValueKeyMaker, uintptr) string

func (_swig_base SwigcptrMultiValueKeyMaker) Apply(arg1 Document) string {
	return _swig_wrap_MultiValueKeyMaker_Apply(_swig_base, arg1.Swigcptr())
}

func (p SwigcptrMultiValueKeyMaker) SwigIsKeyMaker() {
}

func (p SwigcptrMultiValueKeyMaker) SwigGetKeyMaker() KeyMaker {
	return SwigcptrKeyMaker(p.Swigcptr())
}

type MultiValueKeyMaker interface {
	Swigcptr() uintptr
	SwigIsMultiValueKeyMaker()
	Add_value(a ...interface{})
	Apply(arg1 Document) string
	SwigIsKeyMaker()
	SwigGetKeyMaker() KeyMaker
}

type _swig_DirectorStopper struct {
	SwigcptrStopper
	v interface{}
}

func (p *_swig_DirectorStopper) Swigcptr() uintptr {
	return p.SwigcptrStopper.Swigcptr()
}

func (p *_swig_DirectorStopper) SwigIsStopper() {
}

func (p *_swig_DirectorStopper) DirectorInterface() interface{} {
	return p.v
}

func _swig_NewDirectorStopperStopper(*_swig_DirectorStopper) SwigcptrStopper

func NewDirectorStopper(v interface{}) Stopper {
	p := &_swig_DirectorStopper{0, v}
	p.SwigcptrStopper = _swig_NewDirectorStopperStopper(p)
	return p
}

type _swig_DirectorInterfaceStopperApply interface {
	Apply(string) bool
}

func _swig_wrap__swig_DirectorStopper_upcall_Apply(SwigcptrStopper, string) bool
func (swig_p *_swig_DirectorStopper) Apply(term string) bool {
	if swig_g, swig_ok := swig_p.v.(_swig_DirectorInterfaceStopperApply); swig_ok {
		return swig_g.Apply(term)
	}
	return _swig_wrap__swig_DirectorStopper_upcall_Apply(swig_p.SwigcptrStopper, term)
}

func DirectorStopperApply(p Stopper, arg2 string) bool {
	return _swig_wrap__swig_DirectorStopper_upcall_Apply(p.(*_swig_DirectorStopper).SwigcptrStopper, arg2)
}

func Swig_DirectorStopper_callback_Apply(p *_swig_DirectorStopper, arg2 string) (swig_result bool) {
	return p.Apply(arg2)
}

func _swig_wrap_DeleteDirectorStopper(uintptr)

func DeleteDirectorStopper(arg1 Stopper) {
	_swig_wrap_DeleteDirectorStopper(arg1.Swigcptr())
}

func Swiggo_DeleteDirector_Stopper(p *_swig_DirectorStopper) {
	p.SwigcptrStopper = 0
}

type _swig_DirectorInterfaceStopperGet_description interface {
	Get_description() string
}

func _swig_wrap__swig_DirectorStopper_upcall_Get_description(SwigcptrStopper) string
func (swig_p *_swig_DirectorStopper) Get_description() string {
	if swig_g, swig_ok := swig_p.v.(_swig_DirectorInterfaceStopperGet_description); swig_ok {
		return swig_g.Get_description()
	}
	return _swig_wrap__swig_DirectorStopper_upcall_Get_description(swig_p.SwigcptrStopper)
}

func DirectorStopperGet_description(p Stopper) string {
	return _swig_wrap__swig_DirectorStopper_upcall_Get_description(p.(*_swig_DirectorStopper).SwigcptrStopper)
}

func Swig_DirectorStopper_callback_get_description(p *_swig_DirectorStopper) (swig_result string) {
	return p.Get_description()
}

type SwigcptrStopper uintptr

func (p SwigcptrStopper) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrStopper) SwigIsStopper() {
}

func (p SwigcptrStopper) DirectorInterface() interface{} {
	return nil
}

func _swig_wrap_Stopper_Apply(SwigcptrStopper, string) bool

func (arg1 SwigcptrStopper) Apply(arg2 string) bool {
	return _swig_wrap_Stopper_Apply(arg1, arg2)
}

func _swig_wrap_delete_Stopper(uintptr)

func DeleteStopper(arg1 Stopper) {
	_swig_wrap_delete_Stopper(arg1.Swigcptr())
}

func _swig_wrap_Stopper_get_description(SwigcptrStopper) string

func (arg1 SwigcptrStopper) Get_description() string {
	return _swig_wrap_Stopper_get_description(arg1)
}

func _swig_wrap_new_Stopper() SwigcptrStopper

func NewStopper() Stopper {
	return _swig_wrap_new_Stopper()
}

type Stopper interface {
	Swigcptr() uintptr
	SwigIsStopper()
	DirectorInterface() interface{}
	Apply(arg2 string) bool
	Get_description() string
}

type SwigcptrSimpleStopper uintptr

func (p SwigcptrSimpleStopper) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrSimpleStopper) SwigIsSimpleStopper() {
}

func _swig_wrap_new_SimpleStopper() SwigcptrSimpleStopper

func NewSimpleStopper() SimpleStopper {
	return _swig_wrap_new_SimpleStopper()
}

func _swig_wrap_SimpleStopper_add(SwigcptrSimpleStopper, string)

func (arg1 SwigcptrSimpleStopper) Add(arg2 string) {
	_swig_wrap_SimpleStopper_add(arg1, arg2)
}

func _swig_wrap_delete_SimpleStopper(uintptr)

func DeleteSimpleStopper(arg1 SimpleStopper) {
	_swig_wrap_delete_SimpleStopper(arg1.Swigcptr())
}

func _swig_wrap_SimpleStopper_Apply(SwigcptrSimpleStopper, string) bool

func (_swig_base SwigcptrSimpleStopper) Apply(arg1 string) bool {
	return _swig_wrap_SimpleStopper_Apply(_swig_base, arg1)
}

func (p SwigcptrSimpleStopper) SwigIsStopper() {
}

func (p SwigcptrSimpleStopper) SwigGetStopper() Stopper {
	return SwigcptrStopper(p.Swigcptr())
}

type SimpleStopper interface {
	Swigcptr() uintptr
	SwigIsSimpleStopper()
	Add(arg2 string)
	Apply(arg1 string) bool
	SwigIsStopper()
	SwigGetStopper() Stopper
}

type _swig_DirectorValueRangeProcessor struct {
	SwigcptrValueRangeProcessor
	v interface{}
}

func (p *_swig_DirectorValueRangeProcessor) Swigcptr() uintptr {
	return p.SwigcptrValueRangeProcessor.Swigcptr()
}

func (p *_swig_DirectorValueRangeProcessor) SwigIsValueRangeProcessor() {
}

func (p *_swig_DirectorValueRangeProcessor) DirectorInterface() interface{} {
	return p.v
}

func _swig_NewDirectorValueRangeProcessorValueRangeProcessor(*_swig_DirectorValueRangeProcessor) SwigcptrValueRangeProcessor

func NewDirectorValueRangeProcessor(v interface{}) ValueRangeProcessor {
	p := &_swig_DirectorValueRangeProcessor{0, v}
	p.SwigcptrValueRangeProcessor = _swig_NewDirectorValueRangeProcessorValueRangeProcessor(p)
	return p
}

func _swig_wrap_DeleteDirectorValueRangeProcessor(uintptr)

func DeleteDirectorValueRangeProcessor(arg1 ValueRangeProcessor) {
	_swig_wrap_DeleteDirectorValueRangeProcessor(arg1.Swigcptr())
}

func Swiggo_DeleteDirector_ValueRangeProcessor(p *_swig_DirectorValueRangeProcessor) {
	p.SwigcptrValueRangeProcessor = 0
}

type _swig_DirectorInterfaceValueRangeProcessorApply interface {
	Apply(*string, *string) uint
}

func _swig_wrap__swig_DirectorValueRangeProcessor_upcall_Apply(SwigcptrValueRangeProcessor, *string, *string) uint
func (swig_p *_swig_DirectorValueRangeProcessor) Apply(begin *string, end *string) uint {
	if swig_g, swig_ok := swig_p.v.(_swig_DirectorInterfaceValueRangeProcessorApply); swig_ok {
		return swig_g.Apply(begin, end)
	}
	return _swig_wrap__swig_DirectorValueRangeProcessor_upcall_Apply(swig_p.SwigcptrValueRangeProcessor, begin, end)
}

func DirectorValueRangeProcessorApply(p ValueRangeProcessor, arg2 *string, arg3 *string) uint {
	return _swig_wrap__swig_DirectorValueRangeProcessor_upcall_Apply(p.(*_swig_DirectorValueRangeProcessor).SwigcptrValueRangeProcessor, arg2, arg3)
}

func Swig_DirectorValueRangeProcessor_callback_Apply(p *_swig_DirectorValueRangeProcessor, arg2 *string, arg3 *string) (swig_result uint) {
	return p.Apply(arg2, arg3)
}

type SwigcptrValueRangeProcessor uintptr

func (p SwigcptrValueRangeProcessor) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrValueRangeProcessor) SwigIsValueRangeProcessor() {
}

func (p SwigcptrValueRangeProcessor) DirectorInterface() interface{} {
	return nil
}

func _swig_wrap_delete_ValueRangeProcessor(uintptr)

func DeleteValueRangeProcessor(arg1 ValueRangeProcessor) {
	_swig_wrap_delete_ValueRangeProcessor(arg1.Swigcptr())
}

func _swig_wrap_ValueRangeProcessor_Apply(SwigcptrValueRangeProcessor, *string, *string) uint

func (arg1 SwigcptrValueRangeProcessor) Apply(arg2 *string, arg3 *string) uint {
	return _swig_wrap_ValueRangeProcessor_Apply(arg1, arg2, arg3)
}

func _swig_wrap_new_ValueRangeProcessor() SwigcptrValueRangeProcessor

func NewValueRangeProcessor() ValueRangeProcessor {
	return _swig_wrap_new_ValueRangeProcessor()
}

type ValueRangeProcessor interface {
	Swigcptr() uintptr
	SwigIsValueRangeProcessor()
	DirectorInterface() interface{}
	Apply(arg2 *string, arg3 *string) uint
}

type SwigcptrStringValueRangeProcessor uintptr

func (p SwigcptrStringValueRangeProcessor) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrStringValueRangeProcessor) SwigIsStringValueRangeProcessor() {
}

func _swig_wrap_new_StringValueRangeProcessor__SWIG_0(uint) SwigcptrStringValueRangeProcessor

func NewStringValueRangeProcessor__SWIG_0(arg1 uint) StringValueRangeProcessor {
	return _swig_wrap_new_StringValueRangeProcessor__SWIG_0(arg1)
}

func _swig_wrap_new_StringValueRangeProcessor__SWIG_1(uint, string, bool) SwigcptrStringValueRangeProcessor

func NewStringValueRangeProcessor__SWIG_1(arg1 uint, arg2 string, arg3 bool) StringValueRangeProcessor {
	return _swig_wrap_new_StringValueRangeProcessor__SWIG_1(arg1, arg2, arg3)
}

func _swig_wrap_new_StringValueRangeProcessor__SWIG_2(uint, string) SwigcptrStringValueRangeProcessor

func NewStringValueRangeProcessor__SWIG_2(arg1 uint, arg2 string) StringValueRangeProcessor {
	return _swig_wrap_new_StringValueRangeProcessor__SWIG_2(arg1, arg2)
}

func NewStringValueRangeProcessor(a ...interface{}) StringValueRangeProcessor {
	argc := len(a)
	if argc == 1 {
		return NewStringValueRangeProcessor__SWIG_0(a[0].(uint))
	}
	if argc == 2 {
		return NewStringValueRangeProcessor__SWIG_2(a[0].(uint), a[1].(string))
	}
	if argc == 3 {
		return NewStringValueRangeProcessor__SWIG_1(a[0].(uint), a[1].(string), a[2].(bool))
	}
	panic("No match for overloaded function call")
}

func _swig_wrap_delete_StringValueRangeProcessor(uintptr)

func DeleteStringValueRangeProcessor(arg1 StringValueRangeProcessor) {
	_swig_wrap_delete_StringValueRangeProcessor(arg1.Swigcptr())
}

func _swig_wrap_StringValueRangeProcessor_Apply(SwigcptrStringValueRangeProcessor, *string, *string) uint

func (_swig_base SwigcptrStringValueRangeProcessor) Apply(arg1 *string, arg2 *string) uint {
	return _swig_wrap_StringValueRangeProcessor_Apply(_swig_base, arg1, arg2)
}

func (p SwigcptrStringValueRangeProcessor) SwigIsValueRangeProcessor() {
}

func (p SwigcptrStringValueRangeProcessor) SwigGetValueRangeProcessor() ValueRangeProcessor {
	return SwigcptrValueRangeProcessor(p.Swigcptr())
}

type StringValueRangeProcessor interface {
	Swigcptr() uintptr
	SwigIsStringValueRangeProcessor()
	Apply(arg1 *string, arg2 *string) uint
	SwigIsValueRangeProcessor()
	SwigGetValueRangeProcessor() ValueRangeProcessor
}

type SwigcptrDateValueRangeProcessor uintptr

func (p SwigcptrDateValueRangeProcessor) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrDateValueRangeProcessor) SwigIsDateValueRangeProcessor() {
}

func _swig_wrap_new_DateValueRangeProcessor__SWIG_0(uint, bool, int) SwigcptrDateValueRangeProcessor

func NewDateValueRangeProcessor__SWIG_0(arg1 uint, arg2 bool, arg3 int) DateValueRangeProcessor {
	return _swig_wrap_new_DateValueRangeProcessor__SWIG_0(arg1, arg2, arg3)
}

func _swig_wrap_new_DateValueRangeProcessor__SWIG_1(uint, bool) SwigcptrDateValueRangeProcessor

func NewDateValueRangeProcessor__SWIG_1(arg1 uint, arg2 bool) DateValueRangeProcessor {
	return _swig_wrap_new_DateValueRangeProcessor__SWIG_1(arg1, arg2)
}

func _swig_wrap_new_DateValueRangeProcessor__SWIG_2(uint) SwigcptrDateValueRangeProcessor

func NewDateValueRangeProcessor__SWIG_2(arg1 uint) DateValueRangeProcessor {
	return _swig_wrap_new_DateValueRangeProcessor__SWIG_2(arg1)
}

func _swig_wrap_new_DateValueRangeProcessor__SWIG_3(uint, string, bool, bool, int) SwigcptrDateValueRangeProcessor

func NewDateValueRangeProcessor__SWIG_3(arg1 uint, arg2 string, arg3 bool, arg4 bool, arg5 int) DateValueRangeProcessor {
	return _swig_wrap_new_DateValueRangeProcessor__SWIG_3(arg1, arg2, arg3, arg4, arg5)
}

func _swig_wrap_new_DateValueRangeProcessor__SWIG_4(uint, string, bool, bool) SwigcptrDateValueRangeProcessor

func NewDateValueRangeProcessor__SWIG_4(arg1 uint, arg2 string, arg3 bool, arg4 bool) DateValueRangeProcessor {
	return _swig_wrap_new_DateValueRangeProcessor__SWIG_4(arg1, arg2, arg3, arg4)
}

func _swig_wrap_new_DateValueRangeProcessor__SWIG_5(uint, string, bool) SwigcptrDateValueRangeProcessor

func NewDateValueRangeProcessor__SWIG_5(arg1 uint, arg2 string, arg3 bool) DateValueRangeProcessor {
	return _swig_wrap_new_DateValueRangeProcessor__SWIG_5(arg1, arg2, arg3)
}

func _swig_wrap_new_DateValueRangeProcessor__SWIG_6(uint, string) SwigcptrDateValueRangeProcessor

func NewDateValueRangeProcessor__SWIG_6(arg1 uint, arg2 string) DateValueRangeProcessor {
	return _swig_wrap_new_DateValueRangeProcessor__SWIG_6(arg1, arg2)
}

func NewDateValueRangeProcessor(a ...interface{}) DateValueRangeProcessor {
	argc := len(a)
	if argc == 1 {
		return NewDateValueRangeProcessor__SWIG_2(a[0].(uint))
	}
	if argc == 2 {
		if _, ok := a[1].(string); !ok {
			goto check_2
		}
		return NewDateValueRangeProcessor__SWIG_6(a[0].(uint), a[1].(string))
	}
check_2:
	if argc == 2 {
		return NewDateValueRangeProcessor__SWIG_1(a[0].(uint), a[1].(bool))
	}
	if argc == 3 {
		if _, ok := a[1].(string); !ok {
			goto check_4
		}
		if _, ok := a[2].(bool); !ok {
			goto check_4
		}
		return NewDateValueRangeProcessor__SWIG_5(a[0].(uint), a[1].(string), a[2].(bool))
	}
check_4:
	if argc == 3 {
		return NewDateValueRangeProcessor__SWIG_0(a[0].(uint), a[1].(bool), a[2].(int))
	}
	if argc == 4 {
		return NewDateValueRangeProcessor__SWIG_4(a[0].(uint), a[1].(string), a[2].(bool), a[3].(bool))
	}
	if argc == 5 {
		return NewDateValueRangeProcessor__SWIG_3(a[0].(uint), a[1].(string), a[2].(bool), a[3].(bool), a[4].(int))
	}
	panic("No match for overloaded function call")
}

func _swig_wrap_delete_DateValueRangeProcessor(uintptr)

func DeleteDateValueRangeProcessor(arg1 DateValueRangeProcessor) {
	_swig_wrap_delete_DateValueRangeProcessor(arg1.Swigcptr())
}

func _swig_wrap_DateValueRangeProcessor_Apply(SwigcptrDateValueRangeProcessor, *string, *string) uint

func (_swig_base SwigcptrDateValueRangeProcessor) Apply(arg1 *string, arg2 *string) uint {
	return _swig_wrap_DateValueRangeProcessor_Apply(_swig_base, arg1, arg2)
}

func (p SwigcptrDateValueRangeProcessor) SwigIsStringValueRangeProcessor() {
}

func (p SwigcptrDateValueRangeProcessor) SwigGetStringValueRangeProcessor() StringValueRangeProcessor {
	return SwigcptrStringValueRangeProcessor(p.Swigcptr())
}

func (p SwigcptrDateValueRangeProcessor) SwigIsValueRangeProcessor() {
}

func (p SwigcptrDateValueRangeProcessor) SwigGetValueRangeProcessor() ValueRangeProcessor {
	return SwigcptrValueRangeProcessor(p.Swigcptr())
}

type DateValueRangeProcessor interface {
	Swigcptr() uintptr
	SwigIsDateValueRangeProcessor()
	Apply(arg1 *string, arg2 *string) uint
	SwigIsStringValueRangeProcessor()
	SwigGetStringValueRangeProcessor() StringValueRangeProcessor
	SwigIsValueRangeProcessor()
	SwigGetValueRangeProcessor() ValueRangeProcessor
}

type SwigcptrNumberValueRangeProcessor uintptr

func (p SwigcptrNumberValueRangeProcessor) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrNumberValueRangeProcessor) SwigIsNumberValueRangeProcessor() {
}

func _swig_wrap_new_NumberValueRangeProcessor__SWIG_0(uint) SwigcptrNumberValueRangeProcessor

func NewNumberValueRangeProcessor__SWIG_0(arg1 uint) NumberValueRangeProcessor {
	return _swig_wrap_new_NumberValueRangeProcessor__SWIG_0(arg1)
}

func _swig_wrap_new_NumberValueRangeProcessor__SWIG_1(uint, string, bool) SwigcptrNumberValueRangeProcessor

func NewNumberValueRangeProcessor__SWIG_1(arg1 uint, arg2 string, arg3 bool) NumberValueRangeProcessor {
	return _swig_wrap_new_NumberValueRangeProcessor__SWIG_1(arg1, arg2, arg3)
}

func _swig_wrap_new_NumberValueRangeProcessor__SWIG_2(uint, string) SwigcptrNumberValueRangeProcessor

func NewNumberValueRangeProcessor__SWIG_2(arg1 uint, arg2 string) NumberValueRangeProcessor {
	return _swig_wrap_new_NumberValueRangeProcessor__SWIG_2(arg1, arg2)
}

func NewNumberValueRangeProcessor(a ...interface{}) NumberValueRangeProcessor {
	argc := len(a)
	if argc == 1 {
		return NewNumberValueRangeProcessor__SWIG_0(a[0].(uint))
	}
	if argc == 2 {
		return NewNumberValueRangeProcessor__SWIG_2(a[0].(uint), a[1].(string))
	}
	if argc == 3 {
		return NewNumberValueRangeProcessor__SWIG_1(a[0].(uint), a[1].(string), a[2].(bool))
	}
	panic("No match for overloaded function call")
}

func _swig_wrap_delete_NumberValueRangeProcessor(uintptr)

func DeleteNumberValueRangeProcessor(arg1 NumberValueRangeProcessor) {
	_swig_wrap_delete_NumberValueRangeProcessor(arg1.Swigcptr())
}

func _swig_wrap_NumberValueRangeProcessor_Apply(SwigcptrNumberValueRangeProcessor, *string, *string) uint

func (_swig_base SwigcptrNumberValueRangeProcessor) Apply(arg1 *string, arg2 *string) uint {
	return _swig_wrap_NumberValueRangeProcessor_Apply(_swig_base, arg1, arg2)
}

func (p SwigcptrNumberValueRangeProcessor) SwigIsStringValueRangeProcessor() {
}

func (p SwigcptrNumberValueRangeProcessor) SwigGetStringValueRangeProcessor() StringValueRangeProcessor {
	return SwigcptrStringValueRangeProcessor(p.Swigcptr())
}

func (p SwigcptrNumberValueRangeProcessor) SwigIsValueRangeProcessor() {
}

func (p SwigcptrNumberValueRangeProcessor) SwigGetValueRangeProcessor() ValueRangeProcessor {
	return SwigcptrValueRangeProcessor(p.Swigcptr())
}

type NumberValueRangeProcessor interface {
	Swigcptr() uintptr
	SwigIsNumberValueRangeProcessor()
	Apply(arg1 *string, arg2 *string) uint
	SwigIsStringValueRangeProcessor()
	SwigGetStringValueRangeProcessor() StringValueRangeProcessor
	SwigIsValueRangeProcessor()
	SwigGetValueRangeProcessor() ValueRangeProcessor
}

type _swig_DirectorFieldProcessor struct {
	SwigcptrFieldProcessor
	v interface{}
}

func (p *_swig_DirectorFieldProcessor) Swigcptr() uintptr {
	return p.SwigcptrFieldProcessor.Swigcptr()
}

func (p *_swig_DirectorFieldProcessor) SwigIsFieldProcessor() {
}

func (p *_swig_DirectorFieldProcessor) DirectorInterface() interface{} {
	return p.v
}

func _swig_NewDirectorFieldProcessorFieldProcessor(*_swig_DirectorFieldProcessor) SwigcptrFieldProcessor

func NewDirectorFieldProcessor(v interface{}) FieldProcessor {
	p := &_swig_DirectorFieldProcessor{0, v}
	p.SwigcptrFieldProcessor = _swig_NewDirectorFieldProcessorFieldProcessor(p)
	return p
}

func _swig_wrap_DeleteDirectorFieldProcessor(uintptr)

func DeleteDirectorFieldProcessor(arg1 FieldProcessor) {
	_swig_wrap_DeleteDirectorFieldProcessor(arg1.Swigcptr())
}

func Swiggo_DeleteDirector_FieldProcessor(p *_swig_DirectorFieldProcessor) {
	p.SwigcptrFieldProcessor = 0
}

type _swig_DirectorInterfaceFieldProcessorApply interface {
	Apply(string) Query
}

func _swig_wrap__swig_DirectorFieldProcessor_upcall_Apply(SwigcptrFieldProcessor, string) SwigcptrQuery
func (swig_p *_swig_DirectorFieldProcessor) Apply(str string) Query {
	if swig_g, swig_ok := swig_p.v.(_swig_DirectorInterfaceFieldProcessorApply); swig_ok {
		return swig_g.Apply(str)
	}
	return _swig_wrap__swig_DirectorFieldProcessor_upcall_Apply(swig_p.SwigcptrFieldProcessor, str)
}

func DirectorFieldProcessorApply(p FieldProcessor, arg2 string) Query {
	return _swig_wrap__swig_DirectorFieldProcessor_upcall_Apply(p.(*_swig_DirectorFieldProcessor).SwigcptrFieldProcessor, arg2)
}

func Swig_DirectorFieldProcessor_callback_Apply(p *_swig_DirectorFieldProcessor, arg2 string) (swig_result SwigcptrQuery) {
	return SwigcptrQuery(p.Apply(arg2).Swigcptr())
}

type SwigcptrFieldProcessor uintptr

func (p SwigcptrFieldProcessor) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrFieldProcessor) SwigIsFieldProcessor() {
}

func (p SwigcptrFieldProcessor) DirectorInterface() interface{} {
	return nil
}

func _swig_wrap_delete_FieldProcessor(uintptr)

func DeleteFieldProcessor(arg1 FieldProcessor) {
	_swig_wrap_delete_FieldProcessor(arg1.Swigcptr())
}

func _swig_wrap_FieldProcessor_Apply(SwigcptrFieldProcessor, string) SwigcptrQuery

func (arg1 SwigcptrFieldProcessor) Apply(arg2 string) Query {
	return _swig_wrap_FieldProcessor_Apply(arg1, arg2)
}

func _swig_wrap_new_FieldProcessor() SwigcptrFieldProcessor

func NewFieldProcessor() FieldProcessor {
	return _swig_wrap_new_FieldProcessor()
}

type FieldProcessor interface {
	Swigcptr() uintptr
	SwigIsFieldProcessor()
	DirectorInterface() interface{}
	Apply(arg2 string) Query
}

type SwigcptrQueryParser uintptr

func (p SwigcptrQueryParser) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrQueryParser) SwigIsQueryParser() {
}

type XapianQueryParserFeature_flag int
func _swig_getQueryParser_FLAG_BOOLEAN_QueryParser() int
var QueryParserFLAG_BOOLEAN int = _swig_getQueryParser_FLAG_BOOLEAN_QueryParser()
func _swig_getQueryParser_FLAG_PHRASE_QueryParser() int
var QueryParserFLAG_PHRASE int = _swig_getQueryParser_FLAG_PHRASE_QueryParser()
func _swig_getQueryParser_FLAG_LOVEHATE_QueryParser() int
var QueryParserFLAG_LOVEHATE int = _swig_getQueryParser_FLAG_LOVEHATE_QueryParser()
func _swig_getQueryParser_FLAG_BOOLEAN_ANY_CASE_QueryParser() int
var QueryParserFLAG_BOOLEAN_ANY_CASE int = _swig_getQueryParser_FLAG_BOOLEAN_ANY_CASE_QueryParser()
func _swig_getQueryParser_FLAG_WILDCARD_QueryParser() int
var QueryParserFLAG_WILDCARD int = _swig_getQueryParser_FLAG_WILDCARD_QueryParser()
func _swig_getQueryParser_FLAG_PURE_NOT_QueryParser() int
var QueryParserFLAG_PURE_NOT int = _swig_getQueryParser_FLAG_PURE_NOT_QueryParser()
func _swig_getQueryParser_FLAG_PARTIAL_QueryParser() int
var QueryParserFLAG_PARTIAL int = _swig_getQueryParser_FLAG_PARTIAL_QueryParser()
func _swig_getQueryParser_FLAG_SPELLING_CORRECTION_QueryParser() int
var QueryParserFLAG_SPELLING_CORRECTION int = _swig_getQueryParser_FLAG_SPELLING_CORRECTION_QueryParser()
func _swig_getQueryParser_FLAG_SYNONYM_QueryParser() int
var QueryParserFLAG_SYNONYM int = _swig_getQueryParser_FLAG_SYNONYM_QueryParser()
func _swig_getQueryParser_FLAG_AUTO_SYNONYMS_QueryParser() int
var QueryParserFLAG_AUTO_SYNONYMS int = _swig_getQueryParser_FLAG_AUTO_SYNONYMS_QueryParser()
func _swig_getQueryParser_FLAG_AUTO_MULTIWORD_SYNONYMS_QueryParser() int
var QueryParserFLAG_AUTO_MULTIWORD_SYNONYMS int = _swig_getQueryParser_FLAG_AUTO_MULTIWORD_SYNONYMS_QueryParser()
func _swig_getQueryParser_FLAG_DEFAULT_QueryParser() int
var QueryParserFLAG_DEFAULT int = _swig_getQueryParser_FLAG_DEFAULT_QueryParser()
type XapianQueryParserStem_strategy int
func _swig_getQueryParser_STEM_NONE_QueryParser() int
var QueryParserSTEM_NONE int = _swig_getQueryParser_STEM_NONE_QueryParser()
func _swig_getQueryParser_STEM_SOME_QueryParser() int
var QueryParserSTEM_SOME int = _swig_getQueryParser_STEM_SOME_QueryParser()
func _swig_getQueryParser_STEM_ALL_QueryParser() int
var QueryParserSTEM_ALL int = _swig_getQueryParser_STEM_ALL_QueryParser()
func _swig_getQueryParser_STEM_ALL_Z_QueryParser() int
var QueryParserSTEM_ALL_Z int = _swig_getQueryParser_STEM_ALL_Z_QueryParser()
func _swig_wrap_new_QueryParser() SwigcptrQueryParser

func NewQueryParser() QueryParser {
	return _swig_wrap_new_QueryParser()
}

func _swig_wrap_delete_QueryParser(uintptr)

func DeleteQueryParser(arg1 QueryParser) {
	_swig_wrap_delete_QueryParser(arg1.Swigcptr())
}

func _swig_wrap_QueryParser_set_stemmer(SwigcptrQueryParser, uintptr)

func (arg1 SwigcptrQueryParser) Set_stemmer(arg2 Stem) {
	_swig_wrap_QueryParser_set_stemmer(arg1, arg2.Swigcptr())
}

func _swig_wrap_QueryParser_set_stemming_strategy(SwigcptrQueryParser, XapianQueryParserStem_strategy)

func (arg1 SwigcptrQueryParser) Set_stemming_strategy(arg2 XapianQueryParserStem_strategy) {
	_swig_wrap_QueryParser_set_stemming_strategy(arg1, arg2)
}

func _swig_wrap_QueryParser_set_stopper__SWIG_0(SwigcptrQueryParser, uintptr)

func (arg1 SwigcptrQueryParser) Set_stopper__SWIG_0(arg2 Stopper) {
	_swig_wrap_QueryParser_set_stopper__SWIG_0(arg1, arg2.Swigcptr())
}

func _swig_wrap_QueryParser_set_stopper__SWIG_1(SwigcptrQueryParser)

func (arg1 SwigcptrQueryParser) Set_stopper__SWIG_1() {
	_swig_wrap_QueryParser_set_stopper__SWIG_1(arg1)
}

func (p SwigcptrQueryParser) Set_stopper(a ...interface{}) {
	argc := len(a)
	if argc == 0 {
		p.Set_stopper__SWIG_1()
		return
	}
	if argc == 1 {
		p.Set_stopper__SWIG_0(a[0].(Stopper))
		return
	}
	panic("No match for overloaded function call")
}

func _swig_wrap_QueryParser_set_default_op(SwigcptrQueryParser, XapianQueryOp)

func (arg1 SwigcptrQueryParser) Set_default_op(arg2 XapianQueryOp) {
	_swig_wrap_QueryParser_set_default_op(arg1, arg2)
}

func _swig_wrap_QueryParser_get_default_op(SwigcptrQueryParser) XapianQueryOp

func (arg1 SwigcptrQueryParser) Get_default_op() XapianQueryOp {
	return _swig_wrap_QueryParser_get_default_op(arg1)
}

func _swig_wrap_QueryParser_set_database(SwigcptrQueryParser, uintptr)

func (arg1 SwigcptrQueryParser) Set_database(arg2 Database) {
	_swig_wrap_QueryParser_set_database(arg1, arg2.Swigcptr())
}

func _swig_wrap_QueryParser_set_max_wildcard_expansion(SwigcptrQueryParser, uint)

func (arg1 SwigcptrQueryParser) Set_max_wildcard_expansion(arg2 uint) {
	_swig_wrap_QueryParser_set_max_wildcard_expansion(arg1, arg2)
}

func _swig_wrap_QueryParser_parse_query__SWIG_0(SwigcptrQueryParser, string, uint, string) SwigcptrQuery

func (arg1 SwigcptrQueryParser) Parse_query__SWIG_0(arg2 string, arg3 uint, arg4 string) Query {
	return _swig_wrap_QueryParser_parse_query__SWIG_0(arg1, arg2, arg3, arg4)
}

func _swig_wrap_QueryParser_parse_query__SWIG_1(SwigcptrQueryParser, string, uint) SwigcptrQuery

func (arg1 SwigcptrQueryParser) Parse_query__SWIG_1(arg2 string, arg3 uint) Query {
	return _swig_wrap_QueryParser_parse_query__SWIG_1(arg1, arg2, arg3)
}

func _swig_wrap_QueryParser_parse_query__SWIG_2(SwigcptrQueryParser, string) SwigcptrQuery

func (arg1 SwigcptrQueryParser) Parse_query__SWIG_2(arg2 string) Query {
	return _swig_wrap_QueryParser_parse_query__SWIG_2(arg1, arg2)
}

func (p SwigcptrQueryParser) Parse_query(a ...interface{}) Query {
	argc := len(a)
	if argc == 1 {
		return p.Parse_query__SWIG_2(a[0].(string))
	}
	if argc == 2 {
		return p.Parse_query__SWIG_1(a[0].(string), a[1].(uint))
	}
	if argc == 3 {
		return p.Parse_query__SWIG_0(a[0].(string), a[1].(uint), a[2].(string))
	}
	panic("No match for overloaded function call")
}

func _swig_wrap_QueryParser_add_prefix__SWIG_0(SwigcptrQueryParser, string, string)

func (arg1 SwigcptrQueryParser) Add_prefix__SWIG_0(arg2 string, arg3 string) {
	_swig_wrap_QueryParser_add_prefix__SWIG_0(arg1, arg2, arg3)
}

func _swig_wrap_QueryParser_add_prefix__SWIG_1(SwigcptrQueryParser, string, uintptr)

func (arg1 SwigcptrQueryParser) Add_prefix__SWIG_1(arg2 string, arg3 FieldProcessor) {
	_swig_wrap_QueryParser_add_prefix__SWIG_1(arg1, arg2, arg3.Swigcptr())
}

func (p SwigcptrQueryParser) Add_prefix(a ...interface{}) {
	argc := len(a)
	if argc == 2 {
		if _, ok := a[1].(string); !ok {
			goto check_1
		}
		p.Add_prefix__SWIG_0(a[0].(string), a[1].(string))
		return
	}
check_1:
	if argc == 2 {
		p.Add_prefix__SWIG_1(a[0].(string), a[1].(FieldProcessor))
		return
	}
	panic("No match for overloaded function call")
}

func _swig_wrap_QueryParser_add_boolean_prefix__SWIG_0(SwigcptrQueryParser, string, string, bool)

func (arg1 SwigcptrQueryParser) Add_boolean_prefix__SWIG_0(arg2 string, arg3 string, arg4 bool) {
	_swig_wrap_QueryParser_add_boolean_prefix__SWIG_0(arg1, arg2, arg3, arg4)
}

func _swig_wrap_QueryParser_add_boolean_prefix__SWIG_1(SwigcptrQueryParser, string, string)

func (arg1 SwigcptrQueryParser) Add_boolean_prefix__SWIG_1(arg2 string, arg3 string) {
	_swig_wrap_QueryParser_add_boolean_prefix__SWIG_1(arg1, arg2, arg3)
}

func _swig_wrap_QueryParser_add_boolean_prefix__SWIG_2(SwigcptrQueryParser, string, uintptr, bool)

func (arg1 SwigcptrQueryParser) Add_boolean_prefix__SWIG_2(arg2 string, arg3 FieldProcessor, arg4 bool) {
	_swig_wrap_QueryParser_add_boolean_prefix__SWIG_2(arg1, arg2, arg3.Swigcptr(), arg4)
}

func _swig_wrap_QueryParser_add_boolean_prefix__SWIG_3(SwigcptrQueryParser, string, uintptr)

func (arg1 SwigcptrQueryParser) Add_boolean_prefix__SWIG_3(arg2 string, arg3 FieldProcessor) {
	_swig_wrap_QueryParser_add_boolean_prefix__SWIG_3(arg1, arg2, arg3.Swigcptr())
}

func (p SwigcptrQueryParser) Add_boolean_prefix(a ...interface{}) {
	argc := len(a)
	if argc == 2 {
		if _, ok := a[1].(string); !ok {
			goto check_1
		}
		p.Add_boolean_prefix__SWIG_1(a[0].(string), a[1].(string))
		return
	}
check_1:
	if argc == 2 {
		p.Add_boolean_prefix__SWIG_3(a[0].(string), a[1].(FieldProcessor))
		return
	}
	if argc == 3 {
		if _, ok := a[1].(SwigcptrFieldProcessor); !ok {
			goto check_3
		}
		p.Add_boolean_prefix__SWIG_2(a[0].(string), a[1].(FieldProcessor), a[2].(bool))
		return
	}
check_3:
	if argc == 3 {
		p.Add_boolean_prefix__SWIG_0(a[0].(string), a[1].(string), a[2].(bool))
		return
	}
	panic("No match for overloaded function call")
}

func _swig_wrap_QueryParser_stoplist_begin(SwigcptrQueryParser) SwigcptrTermIterator

func (arg1 SwigcptrQueryParser) Stoplist_begin() TermIterator {
	return _swig_wrap_QueryParser_stoplist_begin(arg1)
}

func _swig_wrap_QueryParser_stoplist_end(SwigcptrQueryParser) SwigcptrTermIterator

func (arg1 SwigcptrQueryParser) Stoplist_end() TermIterator {
	return _swig_wrap_QueryParser_stoplist_end(arg1)
}

func _swig_wrap_QueryParser_unstem_begin(SwigcptrQueryParser, string) SwigcptrTermIterator

func (arg1 SwigcptrQueryParser) Unstem_begin(arg2 string) TermIterator {
	return _swig_wrap_QueryParser_unstem_begin(arg1, arg2)
}

func _swig_wrap_QueryParser_unstem_end(SwigcptrQueryParser, string) SwigcptrTermIterator

func (arg1 SwigcptrQueryParser) Unstem_end(arg2 string) TermIterator {
	return _swig_wrap_QueryParser_unstem_end(arg1, arg2)
}

func _swig_wrap_QueryParser_add_valuerangeprocessor(SwigcptrQueryParser, uintptr)

func (arg1 SwigcptrQueryParser) Add_valuerangeprocessor(arg2 ValueRangeProcessor) {
	_swig_wrap_QueryParser_add_valuerangeprocessor(arg1, arg2.Swigcptr())
}

func _swig_wrap_QueryParser_get_corrected_query_string(SwigcptrQueryParser) string

func (arg1 SwigcptrQueryParser) Get_corrected_query_string() string {
	return _swig_wrap_QueryParser_get_corrected_query_string(arg1)
}

func _swig_wrap_QueryParser_get_description(SwigcptrQueryParser) string

func (arg1 SwigcptrQueryParser) Get_description() string {
	return _swig_wrap_QueryParser_get_description(arg1)
}

type QueryParser interface {
	Swigcptr() uintptr
	SwigIsQueryParser()
	Set_stemmer(arg2 Stem)
	Set_stemming_strategy(arg2 XapianQueryParserStem_strategy)
	Set_stopper(a ...interface{})
	Set_default_op(arg2 XapianQueryOp)
	Get_default_op() XapianQueryOp
	Set_database(arg2 Database)
	Set_max_wildcard_expansion(arg2 uint)
	Parse_query(a ...interface{}) Query
	Add_prefix(a ...interface{})
	Add_boolean_prefix(a ...interface{})
	Stoplist_begin() TermIterator
	Stoplist_end() TermIterator
	Unstem_begin(arg2 string) TermIterator
	Unstem_end(arg2 string) TermIterator
	Add_valuerangeprocessor(arg2 ValueRangeProcessor)
	Get_corrected_query_string() string
	Get_description() string
}

func Sortable_serialise(float64) string
func Sortable_unserialise(string) float64
type SwigcptrValueSetMatchDecider uintptr

func (p SwigcptrValueSetMatchDecider) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrValueSetMatchDecider) SwigIsValueSetMatchDecider() {
}

func _swig_wrap_new_ValueSetMatchDecider(uint, bool) SwigcptrValueSetMatchDecider

func NewValueSetMatchDecider(arg1 uint, arg2 bool) ValueSetMatchDecider {
	return _swig_wrap_new_ValueSetMatchDecider(arg1, arg2)
}

func _swig_wrap_ValueSetMatchDecider_add_value(SwigcptrValueSetMatchDecider, string)

func (arg1 SwigcptrValueSetMatchDecider) Add_value(arg2 string) {
	_swig_wrap_ValueSetMatchDecider_add_value(arg1, arg2)
}

func _swig_wrap_ValueSetMatchDecider_remove_value(SwigcptrValueSetMatchDecider, string)

func (arg1 SwigcptrValueSetMatchDecider) Remove_value(arg2 string) {
	_swig_wrap_ValueSetMatchDecider_remove_value(arg1, arg2)
}

func _swig_wrap_delete_ValueSetMatchDecider(uintptr)

func DeleteValueSetMatchDecider(arg1 ValueSetMatchDecider) {
	_swig_wrap_delete_ValueSetMatchDecider(arg1.Swigcptr())
}

func _swig_wrap_ValueSetMatchDecider_Apply(SwigcptrValueSetMatchDecider, uintptr) bool

func (_swig_base SwigcptrValueSetMatchDecider) Apply(arg1 Document) bool {
	return _swig_wrap_ValueSetMatchDecider_Apply(_swig_base, arg1.Swigcptr())
}

func (p SwigcptrValueSetMatchDecider) SwigIsMatchDecider() {
}

func (p SwigcptrValueSetMatchDecider) SwigGetMatchDecider() MatchDecider {
	return SwigcptrMatchDecider(p.Swigcptr())
}

type ValueSetMatchDecider interface {
	Swigcptr() uintptr
	SwigIsValueSetMatchDecider()
	Add_value(arg2 string)
	Remove_value(arg2 string)
	Apply(arg1 Document) bool
	SwigIsMatchDecider()
	SwigGetMatchDecider() MatchDecider
}

type SwigcptrWeight uintptr

func (p SwigcptrWeight) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrWeight) SwigIsWeight() {
}

type XapianWeightStat_flags int
func _swig_wrap_delete_Weight(uintptr)

func DeleteWeight(arg1 Weight) {
	_swig_wrap_delete_Weight(arg1.Swigcptr())
}

func _swig_wrap_Weight_name(SwigcptrWeight) string

func (arg1 SwigcptrWeight) Name() string {
	return _swig_wrap_Weight_name(arg1)
}

func _swig_wrap_Weight_get_sumpart(SwigcptrWeight, uint, uint) float64

func (arg1 SwigcptrWeight) Get_sumpart(arg2 uint, arg3 uint) float64 {
	return _swig_wrap_Weight_get_sumpart(arg1, arg2, arg3)
}

func _swig_wrap_Weight_get_maxpart(SwigcptrWeight) float64

func (arg1 SwigcptrWeight) Get_maxpart() float64 {
	return _swig_wrap_Weight_get_maxpart(arg1)
}

func _swig_wrap_Weight_get_sumextra(SwigcptrWeight, uint) float64

func (arg1 SwigcptrWeight) Get_sumextra(arg2 uint) float64 {
	return _swig_wrap_Weight_get_sumextra(arg1, arg2)
}

func _swig_wrap_Weight_get_maxextra(SwigcptrWeight) float64

func (arg1 SwigcptrWeight) Get_maxextra() float64 {
	return _swig_wrap_Weight_get_maxextra(arg1)
}

func _swig_wrap_Weight_get_sumpart_needs_doclength_(SwigcptrWeight) bool

func (arg1 SwigcptrWeight) Get_sumpart_needs_doclength_() bool {
	return _swig_wrap_Weight_get_sumpart_needs_doclength_(arg1)
}

func _swig_wrap_Weight_get_sumpart_needs_wdf_(SwigcptrWeight) bool

func (arg1 SwigcptrWeight) Get_sumpart_needs_wdf_() bool {
	return _swig_wrap_Weight_get_sumpart_needs_wdf_(arg1)
}

type Weight interface {
	Swigcptr() uintptr
	SwigIsWeight()
	Name() string
	Get_sumpart(arg2 uint, arg3 uint) float64
	Get_maxpart() float64
	Get_sumextra(arg2 uint) float64
	Get_maxextra() float64
	Get_sumpart_needs_doclength_() bool
	Get_sumpart_needs_wdf_() bool
}

type SwigcptrBoolWeight uintptr

func (p SwigcptrBoolWeight) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrBoolWeight) SwigIsBoolWeight() {
}

func _swig_wrap_new_BoolWeight() SwigcptrBoolWeight

func NewBoolWeight() BoolWeight {
	return _swig_wrap_new_BoolWeight()
}

func _swig_wrap_delete_BoolWeight(uintptr)

func DeleteBoolWeight(arg1 BoolWeight) {
	_swig_wrap_delete_BoolWeight(arg1.Swigcptr())
}

func _swig_wrap_BoolWeight_get_sumpart_needs_doclength_(SwigcptrBoolWeight) bool

func (_swig_base SwigcptrBoolWeight) Get_sumpart_needs_doclength_() bool {
	return _swig_wrap_BoolWeight_get_sumpart_needs_doclength_(_swig_base)
}

func _swig_wrap_BoolWeight_get_sumpart_needs_wdf_(SwigcptrBoolWeight) bool

func (_swig_base SwigcptrBoolWeight) Get_sumpart_needs_wdf_() bool {
	return _swig_wrap_BoolWeight_get_sumpart_needs_wdf_(_swig_base)
}

func (p SwigcptrBoolWeight) SwigIsWeight() {
}

func (p SwigcptrBoolWeight) SwigGetWeight() Weight {
	return SwigcptrWeight(p.Swigcptr())
}

type BoolWeight interface {
	Swigcptr() uintptr
	SwigIsBoolWeight()
	Get_sumpart_needs_doclength_() bool
	Get_sumpart_needs_wdf_() bool
	SwigIsWeight()
	SwigGetWeight() Weight
}

type SwigcptrBM25Weight uintptr

func (p SwigcptrBM25Weight) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrBM25Weight) SwigIsBM25Weight() {
}

func _swig_wrap_new_BM25Weight__SWIG_0(float64, float64, float64, float64, float64) SwigcptrBM25Weight

func NewBM25Weight__SWIG_0(arg1 float64, arg2 float64, arg3 float64, arg4 float64, arg5 float64) BM25Weight {
	return _swig_wrap_new_BM25Weight__SWIG_0(arg1, arg2, arg3, arg4, arg5)
}

func _swig_wrap_new_BM25Weight__SWIG_1() SwigcptrBM25Weight

func NewBM25Weight__SWIG_1() BM25Weight {
	return _swig_wrap_new_BM25Weight__SWIG_1()
}

func NewBM25Weight(a ...interface{}) BM25Weight {
	argc := len(a)
	if argc == 0 {
		return NewBM25Weight__SWIG_1()
	}
	if argc == 5 {
		return NewBM25Weight__SWIG_0(a[0].(float64), a[1].(float64), a[2].(float64), a[3].(float64), a[4].(float64))
	}
	panic("No match for overloaded function call")
}

func _swig_wrap_delete_BM25Weight(uintptr)

func DeleteBM25Weight(arg1 BM25Weight) {
	_swig_wrap_delete_BM25Weight(arg1.Swigcptr())
}

func _swig_wrap_BM25Weight_get_sumpart_needs_doclength_(SwigcptrBM25Weight) bool

func (_swig_base SwigcptrBM25Weight) Get_sumpart_needs_doclength_() bool {
	return _swig_wrap_BM25Weight_get_sumpart_needs_doclength_(_swig_base)
}

func _swig_wrap_BM25Weight_get_sumpart_needs_wdf_(SwigcptrBM25Weight) bool

func (_swig_base SwigcptrBM25Weight) Get_sumpart_needs_wdf_() bool {
	return _swig_wrap_BM25Weight_get_sumpart_needs_wdf_(_swig_base)
}

func (p SwigcptrBM25Weight) SwigIsWeight() {
}

func (p SwigcptrBM25Weight) SwigGetWeight() Weight {
	return SwigcptrWeight(p.Swigcptr())
}

type BM25Weight interface {
	Swigcptr() uintptr
	SwigIsBM25Weight()
	Get_sumpart_needs_doclength_() bool
	Get_sumpart_needs_wdf_() bool
	SwigIsWeight()
	SwigGetWeight() Weight
}

type SwigcptrTradWeight uintptr

func (p SwigcptrTradWeight) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrTradWeight) SwigIsTradWeight() {
}

func _swig_wrap_new_TradWeight__SWIG_0(float64) SwigcptrTradWeight

func NewTradWeight__SWIG_0(arg1 float64) TradWeight {
	return _swig_wrap_new_TradWeight__SWIG_0(arg1)
}

func _swig_wrap_new_TradWeight__SWIG_1() SwigcptrTradWeight

func NewTradWeight__SWIG_1() TradWeight {
	return _swig_wrap_new_TradWeight__SWIG_1()
}

func NewTradWeight(a ...interface{}) TradWeight {
	argc := len(a)
	if argc == 0 {
		return NewTradWeight__SWIG_1()
	}
	if argc == 1 {
		return NewTradWeight__SWIG_0(a[0].(float64))
	}
	panic("No match for overloaded function call")
}

func _swig_wrap_delete_TradWeight(uintptr)

func DeleteTradWeight(arg1 TradWeight) {
	_swig_wrap_delete_TradWeight(arg1.Swigcptr())
}

func _swig_wrap_TradWeight_get_sumpart_needs_doclength_(SwigcptrTradWeight) bool

func (_swig_base SwigcptrTradWeight) Get_sumpart_needs_doclength_() bool {
	return _swig_wrap_TradWeight_get_sumpart_needs_doclength_(_swig_base)
}

func _swig_wrap_TradWeight_get_sumpart_needs_wdf_(SwigcptrTradWeight) bool

func (_swig_base SwigcptrTradWeight) Get_sumpart_needs_wdf_() bool {
	return _swig_wrap_TradWeight_get_sumpart_needs_wdf_(_swig_base)
}

func (p SwigcptrTradWeight) SwigIsWeight() {
}

func (p SwigcptrTradWeight) SwigGetWeight() Weight {
	return SwigcptrWeight(p.Swigcptr())
}

type TradWeight interface {
	Swigcptr() uintptr
	SwigIsTradWeight()
	Get_sumpart_needs_doclength_() bool
	Get_sumpart_needs_wdf_() bool
	SwigIsWeight()
	SwigGetWeight() Weight
}

type _swig_DirectorCompactor struct {
	SwigcptrCompactor
	v interface{}
}

func (p *_swig_DirectorCompactor) Swigcptr() uintptr {
	return p.SwigcptrCompactor.Swigcptr()
}

func (p *_swig_DirectorCompactor) SwigIsCompactor() {
}

func (p *_swig_DirectorCompactor) DirectorInterface() interface{} {
	return p.v
}

func _swig_NewDirectorCompactorCompactor(*_swig_DirectorCompactor) SwigcptrCompactor

func NewDirectorCompactor(v interface{}) Compactor {
	p := &_swig_DirectorCompactor{0, v}
	p.SwigcptrCompactor = _swig_NewDirectorCompactorCompactor(p)
	return p
}

func _swig_wrap_DeleteDirectorCompactor(uintptr)

func DeleteDirectorCompactor(arg1 Compactor) {
	_swig_wrap_DeleteDirectorCompactor(arg1.Swigcptr())
}

func Swiggo_DeleteDirector_Compactor(p *_swig_DirectorCompactor) {
	p.SwigcptrCompactor = 0
}

type _swig_DirectorInterfaceCompactorSet_status interface {
	Set_status(string, string)
}

func _swig_wrap__swig_DirectorCompactor_upcall_Set_status(SwigcptrCompactor, string, string)
func (swig_p *_swig_DirectorCompactor) Set_status(table string, status string) {
	if swig_g, swig_ok := swig_p.v.(_swig_DirectorInterfaceCompactorSet_status); swig_ok {
		swig_g.Set_status(table, status)
		return
	}
	_swig_wrap__swig_DirectorCompactor_upcall_Set_status(swig_p.SwigcptrCompactor, table, status)
}

func DirectorCompactorSet_status(p Compactor, arg2 string, arg3 string) {
	_swig_wrap__swig_DirectorCompactor_upcall_Set_status(p.(*_swig_DirectorCompactor).SwigcptrCompactor, arg2, arg3)
}

func Swig_DirectorCompactor_callback_set_status(p *_swig_DirectorCompactor, arg2 string, arg3 string) {
	p.Set_status(arg2, arg3)
}

type SwigcptrCompactor uintptr

func (p SwigcptrCompactor) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrCompactor) SwigIsCompactor() {
}

func (p SwigcptrCompactor) DirectorInterface() interface{} {
	return nil
}

type XapianCompactorCompaction_level int
func _swig_getCompactor_STANDARD_Compactor() int
var CompactorSTANDARD int = _swig_getCompactor_STANDARD_Compactor()
func _swig_getCompactor_FULL_Compactor() int
var CompactorFULL int = _swig_getCompactor_FULL_Compactor()
func _swig_getCompactor_FULLER_Compactor() int
var CompactorFULLER int = _swig_getCompactor_FULLER_Compactor()
func _swig_wrap_new_Compactor() SwigcptrCompactor

func NewCompactor() Compactor {
	return _swig_wrap_new_Compactor()
}

func _swig_wrap_delete_Compactor(uintptr)

func DeleteCompactor(arg1 Compactor) {
	_swig_wrap_delete_Compactor(arg1.Swigcptr())
}

func _swig_wrap_Compactor_set_block_size(SwigcptrCompactor, int)

func (arg1 SwigcptrCompactor) Set_block_size(arg2 int) {
	_swig_wrap_Compactor_set_block_size(arg1, arg2)
}

func _swig_wrap_Compactor_set_renumber(SwigcptrCompactor, bool)

func (arg1 SwigcptrCompactor) Set_renumber(arg2 bool) {
	_swig_wrap_Compactor_set_renumber(arg1, arg2)
}

func _swig_wrap_Compactor_set_multipass(SwigcptrCompactor, bool)

func (arg1 SwigcptrCompactor) Set_multipass(arg2 bool) {
	_swig_wrap_Compactor_set_multipass(arg1, arg2)
}

func _swig_wrap_Compactor_set_compaction_level(SwigcptrCompactor, XapianCompactorCompaction_level)

func (arg1 SwigcptrCompactor) Set_compaction_level(arg2 XapianCompactorCompaction_level) {
	_swig_wrap_Compactor_set_compaction_level(arg1, arg2)
}

func _swig_wrap_Compactor_set_destdir(SwigcptrCompactor, string)

func (arg1 SwigcptrCompactor) Set_destdir(arg2 string) {
	_swig_wrap_Compactor_set_destdir(arg1, arg2)
}

func _swig_wrap_Compactor_add_source(SwigcptrCompactor, string)

func (arg1 SwigcptrCompactor) Add_source(arg2 string) {
	_swig_wrap_Compactor_add_source(arg1, arg2)
}

func _swig_wrap_Compactor_compact(SwigcptrCompactor)

func (arg1 SwigcptrCompactor) Compact() {
	_swig_wrap_Compactor_compact(arg1)
}

func _swig_wrap_Compactor_set_status(SwigcptrCompactor, string, string)

func (arg1 SwigcptrCompactor) Set_status(arg2 string, arg3 string) {
	_swig_wrap_Compactor_set_status(arg1, arg2, arg3)
}

type Compactor interface {
	Swigcptr() uintptr
	SwigIsCompactor()
	DirectorInterface() interface{}
	Set_block_size(arg2 int)
	Set_renumber(arg2 bool)
	Set_multipass(arg2 bool)
	Set_compaction_level(arg2 XapianCompactorCompaction_level)
	Set_destdir(arg2 string)
	Add_source(arg2 string)
	Compact()
	Set_status(arg2 string, arg3 string)
}

type _swig_DirectorPostingSource struct {
	SwigcptrPostingSource
	v interface{}
}

func (p *_swig_DirectorPostingSource) Swigcptr() uintptr {
	return p.SwigcptrPostingSource.Swigcptr()
}

func (p *_swig_DirectorPostingSource) SwigIsPostingSource() {
}

func (p *_swig_DirectorPostingSource) DirectorInterface() interface{} {
	return p.v
}

func _swig_NewDirectorPostingSourcePostingSource(*_swig_DirectorPostingSource) SwigcptrPostingSource

func NewDirectorPostingSource(v interface{}) PostingSource {
	p := &_swig_DirectorPostingSource{0, v}
	p.SwigcptrPostingSource = _swig_NewDirectorPostingSourcePostingSource(p)
	return p
}

func _swig_wrap_DeleteDirectorPostingSource(uintptr)

func DeleteDirectorPostingSource(arg1 PostingSource) {
	_swig_wrap_DeleteDirectorPostingSource(arg1.Swigcptr())
}

func Swiggo_DeleteDirector_PostingSource(p *_swig_DirectorPostingSource) {
	p.SwigcptrPostingSource = 0
}

type _swig_DirectorInterfacePostingSourceGet_termfreq_min interface {
	Get_termfreq_min() uint
}

func _swig_wrap__swig_DirectorPostingSource_upcall_Get_termfreq_min(SwigcptrPostingSource) uint
func (swig_p *_swig_DirectorPostingSource) Get_termfreq_min() uint {
	if swig_g, swig_ok := swig_p.v.(_swig_DirectorInterfacePostingSourceGet_termfreq_min); swig_ok {
		return swig_g.Get_termfreq_min()
	}
	return _swig_wrap__swig_DirectorPostingSource_upcall_Get_termfreq_min(swig_p.SwigcptrPostingSource)
}

func DirectorPostingSourceGet_termfreq_min(p PostingSource) uint {
	return _swig_wrap__swig_DirectorPostingSource_upcall_Get_termfreq_min(p.(*_swig_DirectorPostingSource).SwigcptrPostingSource)
}

func Swig_DirectorPostingSource_callback_get_termfreq_min(p *_swig_DirectorPostingSource) (swig_result uint) {
	return p.Get_termfreq_min()
}

type _swig_DirectorInterfacePostingSourceGet_termfreq_est interface {
	Get_termfreq_est() uint
}

func _swig_wrap__swig_DirectorPostingSource_upcall_Get_termfreq_est(SwigcptrPostingSource) uint
func (swig_p *_swig_DirectorPostingSource) Get_termfreq_est() uint {
	if swig_g, swig_ok := swig_p.v.(_swig_DirectorInterfacePostingSourceGet_termfreq_est); swig_ok {
		return swig_g.Get_termfreq_est()
	}
	return _swig_wrap__swig_DirectorPostingSource_upcall_Get_termfreq_est(swig_p.SwigcptrPostingSource)
}

func DirectorPostingSourceGet_termfreq_est(p PostingSource) uint {
	return _swig_wrap__swig_DirectorPostingSource_upcall_Get_termfreq_est(p.(*_swig_DirectorPostingSource).SwigcptrPostingSource)
}

func Swig_DirectorPostingSource_callback_get_termfreq_est(p *_swig_DirectorPostingSource) (swig_result uint) {
	return p.Get_termfreq_est()
}

type _swig_DirectorInterfacePostingSourceGet_termfreq_max interface {
	Get_termfreq_max() uint
}

func _swig_wrap__swig_DirectorPostingSource_upcall_Get_termfreq_max(SwigcptrPostingSource) uint
func (swig_p *_swig_DirectorPostingSource) Get_termfreq_max() uint {
	if swig_g, swig_ok := swig_p.v.(_swig_DirectorInterfacePostingSourceGet_termfreq_max); swig_ok {
		return swig_g.Get_termfreq_max()
	}
	return _swig_wrap__swig_DirectorPostingSource_upcall_Get_termfreq_max(swig_p.SwigcptrPostingSource)
}

func DirectorPostingSourceGet_termfreq_max(p PostingSource) uint {
	return _swig_wrap__swig_DirectorPostingSource_upcall_Get_termfreq_max(p.(*_swig_DirectorPostingSource).SwigcptrPostingSource)
}

func Swig_DirectorPostingSource_callback_get_termfreq_max(p *_swig_DirectorPostingSource) (swig_result uint) {
	return p.Get_termfreq_max()
}

type _swig_DirectorInterfacePostingSourceGet_weight interface {
	Get_weight() float64
}

func _swig_wrap__swig_DirectorPostingSource_upcall_Get_weight(SwigcptrPostingSource) float64
func (swig_p *_swig_DirectorPostingSource) Get_weight() float64 {
	if swig_g, swig_ok := swig_p.v.(_swig_DirectorInterfacePostingSourceGet_weight); swig_ok {
		return swig_g.Get_weight()
	}
	return _swig_wrap__swig_DirectorPostingSource_upcall_Get_weight(swig_p.SwigcptrPostingSource)
}

func DirectorPostingSourceGet_weight(p PostingSource) float64 {
	return _swig_wrap__swig_DirectorPostingSource_upcall_Get_weight(p.(*_swig_DirectorPostingSource).SwigcptrPostingSource)
}

func Swig_DirectorPostingSource_callback_get_weight(p *_swig_DirectorPostingSource) (swig_result float64) {
	return p.Get_weight()
}

type _swig_DirectorInterfacePostingSourceGet_docid interface {
	Get_docid() uint
}

func _swig_wrap__swig_DirectorPostingSource_upcall_Get_docid(SwigcptrPostingSource) uint
func (swig_p *_swig_DirectorPostingSource) Get_docid() uint {
	if swig_g, swig_ok := swig_p.v.(_swig_DirectorInterfacePostingSourceGet_docid); swig_ok {
		return swig_g.Get_docid()
	}
	return _swig_wrap__swig_DirectorPostingSource_upcall_Get_docid(swig_p.SwigcptrPostingSource)
}

func DirectorPostingSourceGet_docid(p PostingSource) uint {
	return _swig_wrap__swig_DirectorPostingSource_upcall_Get_docid(p.(*_swig_DirectorPostingSource).SwigcptrPostingSource)
}

func Swig_DirectorPostingSource_callback_get_docid(p *_swig_DirectorPostingSource) (swig_result uint) {
	return p.Get_docid()
}

type _swig_DirectorInterfacePostingSourceNext interface {
	Next(float64)
}

func _swig_wrap__swig_DirectorPostingSource_upcall_Next(SwigcptrPostingSource, float64)
func (swig_p *_swig_DirectorPostingSource) Next(min_wt float64) {
	if swig_g, swig_ok := swig_p.v.(_swig_DirectorInterfacePostingSourceNext); swig_ok {
		swig_g.Next(min_wt)
		return
	}
	_swig_wrap__swig_DirectorPostingSource_upcall_Next(swig_p.SwigcptrPostingSource, min_wt)
}

func DirectorPostingSourceNext(p PostingSource, arg2 float64) {
	_swig_wrap__swig_DirectorPostingSource_upcall_Next(p.(*_swig_DirectorPostingSource).SwigcptrPostingSource, arg2)
}

func Swig_DirectorPostingSource_callback_next(p *_swig_DirectorPostingSource, arg2 float64) {
	p.Next(arg2)
}

type _swig_DirectorInterfacePostingSourceSkip_to interface {
	Skip_to(uint, float64)
}

func _swig_wrap__swig_DirectorPostingSource_upcall_Skip_to(SwigcptrPostingSource, uint, float64)
func (swig_p *_swig_DirectorPostingSource) Skip_to(did uint, min_wt float64) {
	if swig_g, swig_ok := swig_p.v.(_swig_DirectorInterfacePostingSourceSkip_to); swig_ok {
		swig_g.Skip_to(did, min_wt)
		return
	}
	_swig_wrap__swig_DirectorPostingSource_upcall_Skip_to(swig_p.SwigcptrPostingSource, did, min_wt)
}

func DirectorPostingSourceSkip_to(p PostingSource, arg2 uint, arg3 float64) {
	_swig_wrap__swig_DirectorPostingSource_upcall_Skip_to(p.(*_swig_DirectorPostingSource).SwigcptrPostingSource, arg2, arg3)
}

func Swig_DirectorPostingSource_callback_skip_to(p *_swig_DirectorPostingSource, arg2 uint, arg3 float64) {
	p.Skip_to(arg2, arg3)
}

type _swig_DirectorInterfacePostingSourceCheck interface {
	Check(uint, float64) bool
}

func _swig_wrap__swig_DirectorPostingSource_upcall_Check(SwigcptrPostingSource, uint, float64) bool
func (swig_p *_swig_DirectorPostingSource) Check(did uint, min_wt float64) bool {
	if swig_g, swig_ok := swig_p.v.(_swig_DirectorInterfacePostingSourceCheck); swig_ok {
		return swig_g.Check(did, min_wt)
	}
	return _swig_wrap__swig_DirectorPostingSource_upcall_Check(swig_p.SwigcptrPostingSource, did, min_wt)
}

func DirectorPostingSourceCheck(p PostingSource, arg2 uint, arg3 float64) bool {
	return _swig_wrap__swig_DirectorPostingSource_upcall_Check(p.(*_swig_DirectorPostingSource).SwigcptrPostingSource, arg2, arg3)
}

func Swig_DirectorPostingSource_callback_check(p *_swig_DirectorPostingSource, arg2 uint, arg3 float64) (swig_result bool) {
	return p.Check(arg2, arg3)
}

type _swig_DirectorInterfacePostingSourceAt_end interface {
	At_end() bool
}

func _swig_wrap__swig_DirectorPostingSource_upcall_At_end(SwigcptrPostingSource) bool
func (swig_p *_swig_DirectorPostingSource) At_end() bool {
	if swig_g, swig_ok := swig_p.v.(_swig_DirectorInterfacePostingSourceAt_end); swig_ok {
		return swig_g.At_end()
	}
	return _swig_wrap__swig_DirectorPostingSource_upcall_At_end(swig_p.SwigcptrPostingSource)
}

func DirectorPostingSourceAt_end(p PostingSource) bool {
	return _swig_wrap__swig_DirectorPostingSource_upcall_At_end(p.(*_swig_DirectorPostingSource).SwigcptrPostingSource)
}

func Swig_DirectorPostingSource_callback_at_end(p *_swig_DirectorPostingSource) (swig_result bool) {
	return p.At_end()
}

type _swig_DirectorInterfacePostingSourceName interface {
	Name() string
}

func _swig_wrap__swig_DirectorPostingSource_upcall_Name(SwigcptrPostingSource) string
func (swig_p *_swig_DirectorPostingSource) Name() string {
	if swig_g, swig_ok := swig_p.v.(_swig_DirectorInterfacePostingSourceName); swig_ok {
		return swig_g.Name()
	}
	return _swig_wrap__swig_DirectorPostingSource_upcall_Name(swig_p.SwigcptrPostingSource)
}

func DirectorPostingSourceName(p PostingSource) string {
	return _swig_wrap__swig_DirectorPostingSource_upcall_Name(p.(*_swig_DirectorPostingSource).SwigcptrPostingSource)
}

func Swig_DirectorPostingSource_callback_name(p *_swig_DirectorPostingSource) (swig_result string) {
	return p.Name()
}

type _swig_DirectorInterfacePostingSourceInit interface {
	Init(Database)
}

func _swig_wrap__swig_DirectorPostingSource_upcall_Init(SwigcptrPostingSource, uintptr)
func (swig_p *_swig_DirectorPostingSource) Init(db Database) {
	if swig_g, swig_ok := swig_p.v.(_swig_DirectorInterfacePostingSourceInit); swig_ok {
		swig_g.Init(db)
		return
	}
	_swig_wrap__swig_DirectorPostingSource_upcall_Init(swig_p.SwigcptrPostingSource, db.Swigcptr())
}

func DirectorPostingSourceInit(p PostingSource, arg2 Database) {
	_swig_wrap__swig_DirectorPostingSource_upcall_Init(p.(*_swig_DirectorPostingSource).SwigcptrPostingSource, arg2.Swigcptr())
}

func Swig_DirectorPostingSource_callback_init(p *_swig_DirectorPostingSource, arg2 uintptr) {
	p.Init(SwigcptrDatabase(arg2))
}

type _swig_DirectorInterfacePostingSourceGet_description interface {
	Get_description() string
}

func _swig_wrap__swig_DirectorPostingSource_upcall_Get_description(SwigcptrPostingSource) string
func (swig_p *_swig_DirectorPostingSource) Get_description() string {
	if swig_g, swig_ok := swig_p.v.(_swig_DirectorInterfacePostingSourceGet_description); swig_ok {
		return swig_g.Get_description()
	}
	return _swig_wrap__swig_DirectorPostingSource_upcall_Get_description(swig_p.SwigcptrPostingSource)
}

func DirectorPostingSourceGet_description(p PostingSource) string {
	return _swig_wrap__swig_DirectorPostingSource_upcall_Get_description(p.(*_swig_DirectorPostingSource).SwigcptrPostingSource)
}

func Swig_DirectorPostingSource_callback_get_description(p *_swig_DirectorPostingSource) (swig_result string) {
	return p.Get_description()
}

type SwigcptrPostingSource uintptr

func (p SwigcptrPostingSource) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrPostingSource) SwigIsPostingSource() {
}

func (p SwigcptrPostingSource) DirectorInterface() interface{} {
	return nil
}

func _swig_wrap_new_PostingSource() SwigcptrPostingSource

func NewPostingSource() PostingSource {
	return _swig_wrap_new_PostingSource()
}

func _swig_wrap_delete_PostingSource(uintptr)

func DeletePostingSource(arg1 PostingSource) {
	_swig_wrap_delete_PostingSource(arg1.Swigcptr())
}

func _swig_wrap_PostingSource_get_termfreq_min(SwigcptrPostingSource) uint

func (arg1 SwigcptrPostingSource) Get_termfreq_min() uint {
	return _swig_wrap_PostingSource_get_termfreq_min(arg1)
}

func _swig_wrap_PostingSource_get_termfreq_est(SwigcptrPostingSource) uint

func (arg1 SwigcptrPostingSource) Get_termfreq_est() uint {
	return _swig_wrap_PostingSource_get_termfreq_est(arg1)
}

func _swig_wrap_PostingSource_get_termfreq_max(SwigcptrPostingSource) uint

func (arg1 SwigcptrPostingSource) Get_termfreq_max() uint {
	return _swig_wrap_PostingSource_get_termfreq_max(arg1)
}

func _swig_wrap_PostingSource_get_maxweight(SwigcptrPostingSource) float64

func (arg1 SwigcptrPostingSource) Get_maxweight() float64 {
	return _swig_wrap_PostingSource_get_maxweight(arg1)
}

func _swig_wrap_PostingSource_get_weight(SwigcptrPostingSource) float64

func (arg1 SwigcptrPostingSource) Get_weight() float64 {
	return _swig_wrap_PostingSource_get_weight(arg1)
}

func _swig_wrap_PostingSource_get_docid(SwigcptrPostingSource) uint

func (arg1 SwigcptrPostingSource) Get_docid() uint {
	return _swig_wrap_PostingSource_get_docid(arg1)
}

func _swig_wrap_PostingSource_next(SwigcptrPostingSource, float64)

func (arg1 SwigcptrPostingSource) Next(arg2 float64) {
	_swig_wrap_PostingSource_next(arg1, arg2)
}

func _swig_wrap_PostingSource_skip_to(SwigcptrPostingSource, uint, float64)

func (arg1 SwigcptrPostingSource) Skip_to(arg2 uint, arg3 float64) {
	_swig_wrap_PostingSource_skip_to(arg1, arg2, arg3)
}

func _swig_wrap_PostingSource_check(SwigcptrPostingSource, uint, float64) bool

func (arg1 SwigcptrPostingSource) Check(arg2 uint, arg3 float64) bool {
	return _swig_wrap_PostingSource_check(arg1, arg2, arg3)
}

func _swig_wrap_PostingSource_at_end(SwigcptrPostingSource) bool

func (arg1 SwigcptrPostingSource) At_end() bool {
	return _swig_wrap_PostingSource_at_end(arg1)
}

func _swig_wrap_PostingSource_name(SwigcptrPostingSource) string

func (arg1 SwigcptrPostingSource) Name() string {
	return _swig_wrap_PostingSource_name(arg1)
}

func _swig_wrap_PostingSource_init(SwigcptrPostingSource, uintptr)

func (arg1 SwigcptrPostingSource) Init(arg2 Database) {
	_swig_wrap_PostingSource_init(arg1, arg2.Swigcptr())
}

func _swig_wrap_PostingSource_get_description(SwigcptrPostingSource) string

func (arg1 SwigcptrPostingSource) Get_description() string {
	return _swig_wrap_PostingSource_get_description(arg1)
}

type PostingSource interface {
	Swigcptr() uintptr
	SwigIsPostingSource()
	DirectorInterface() interface{}
	Get_termfreq_min() uint
	Get_termfreq_est() uint
	Get_termfreq_max() uint
	Get_maxweight() float64
	Get_weight() float64
	Get_docid() uint
	Next(arg2 float64)
	Skip_to(arg2 uint, arg3 float64)
	Check(arg2 uint, arg3 float64) bool
	At_end() bool
	Name() string
	Init(arg2 Database)
	Get_description() string
}

type SwigcptrValuePostingSource uintptr

func (p SwigcptrValuePostingSource) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrValuePostingSource) SwigIsValuePostingSource() {
}

func _swig_wrap_new_ValuePostingSource(uint) SwigcptrValuePostingSource

func NewValuePostingSource(arg1 uint) ValuePostingSource {
	return _swig_wrap_new_ValuePostingSource(arg1)
}

func _swig_wrap_delete_ValuePostingSource(uintptr)

func DeleteValuePostingSource(arg1 ValuePostingSource) {
	_swig_wrap_delete_ValuePostingSource(arg1.Swigcptr())
}

func _swig_wrap_ValuePostingSource_get_maxweight(SwigcptrValuePostingSource) float64

func (_swig_base SwigcptrValuePostingSource) Get_maxweight() float64 {
	return _swig_wrap_ValuePostingSource_get_maxweight(_swig_base)
}

func _swig_wrap_ValuePostingSource_get_weight(SwigcptrValuePostingSource) float64

func (_swig_base SwigcptrValuePostingSource) Get_weight() float64 {
	return _swig_wrap_ValuePostingSource_get_weight(_swig_base)
}

func _swig_wrap_ValuePostingSource_name(SwigcptrValuePostingSource) string

func (_swig_base SwigcptrValuePostingSource) Name() string {
	return _swig_wrap_ValuePostingSource_name(_swig_base)
}

func _swig_wrap_ValuePostingSource_get_description(SwigcptrValuePostingSource) string

func (_swig_base SwigcptrValuePostingSource) Get_description() string {
	return _swig_wrap_ValuePostingSource_get_description(_swig_base)
}

func (p SwigcptrValuePostingSource) SwigIsPostingSource() {
}

func (p SwigcptrValuePostingSource) SwigGetPostingSource() PostingSource {
	return SwigcptrPostingSource(p.Swigcptr())
}

type ValuePostingSource interface {
	Swigcptr() uintptr
	SwigIsValuePostingSource()
	Get_maxweight() float64
	Get_weight() float64
	Name() string
	Get_description() string
	SwigIsPostingSource()
	SwigGetPostingSource() PostingSource
}

type SwigcptrValueWeightPostingSource uintptr

func (p SwigcptrValueWeightPostingSource) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrValueWeightPostingSource) SwigIsValueWeightPostingSource() {
}

func _swig_wrap_new_ValueWeightPostingSource(uint) SwigcptrValueWeightPostingSource

func NewValueWeightPostingSource(arg1 uint) ValueWeightPostingSource {
	return _swig_wrap_new_ValueWeightPostingSource(arg1)
}

func _swig_wrap_delete_ValueWeightPostingSource(uintptr)

func DeleteValueWeightPostingSource(arg1 ValueWeightPostingSource) {
	_swig_wrap_delete_ValueWeightPostingSource(arg1.Swigcptr())
}

func _swig_wrap_ValueWeightPostingSource_get_termfreq_min(SwigcptrValueWeightPostingSource) uint

func (_swig_base SwigcptrValueWeightPostingSource) Get_termfreq_min() uint {
	return _swig_wrap_ValueWeightPostingSource_get_termfreq_min(_swig_base)
}

func _swig_wrap_ValueWeightPostingSource_get_termfreq_est(SwigcptrValueWeightPostingSource) uint

func (_swig_base SwigcptrValueWeightPostingSource) Get_termfreq_est() uint {
	return _swig_wrap_ValueWeightPostingSource_get_termfreq_est(_swig_base)
}

func _swig_wrap_ValueWeightPostingSource_get_termfreq_max(SwigcptrValueWeightPostingSource) uint

func (_swig_base SwigcptrValueWeightPostingSource) Get_termfreq_max() uint {
	return _swig_wrap_ValueWeightPostingSource_get_termfreq_max(_swig_base)
}

func _swig_wrap_ValueWeightPostingSource_get_maxweight(SwigcptrValueWeightPostingSource) float64

func (_swig_base SwigcptrValueWeightPostingSource) Get_maxweight() float64 {
	return _swig_wrap_ValueWeightPostingSource_get_maxweight(_swig_base)
}

func _swig_wrap_ValueWeightPostingSource_get_docid(SwigcptrValueWeightPostingSource) uint

func (_swig_base SwigcptrValueWeightPostingSource) Get_docid() uint {
	return _swig_wrap_ValueWeightPostingSource_get_docid(_swig_base)
}

func _swig_wrap_ValueWeightPostingSource_next(SwigcptrValueWeightPostingSource, float64)

func (_swig_base SwigcptrValueWeightPostingSource) Next(arg1 float64) {
	_swig_wrap_ValueWeightPostingSource_next(_swig_base, arg1)
}

func _swig_wrap_ValueWeightPostingSource_skip_to(SwigcptrValueWeightPostingSource, uint, float64)

func (_swig_base SwigcptrValueWeightPostingSource) Skip_to(arg1 uint, arg2 float64) {
	_swig_wrap_ValueWeightPostingSource_skip_to(_swig_base, arg1, arg2)
}

func _swig_wrap_ValueWeightPostingSource_check(SwigcptrValueWeightPostingSource, uint, float64) bool

func (_swig_base SwigcptrValueWeightPostingSource) Check(arg1 uint, arg2 float64) bool {
	return _swig_wrap_ValueWeightPostingSource_check(_swig_base, arg1, arg2)
}

func _swig_wrap_ValueWeightPostingSource_at_end(SwigcptrValueWeightPostingSource) bool

func (_swig_base SwigcptrValueWeightPostingSource) At_end() bool {
	return _swig_wrap_ValueWeightPostingSource_at_end(_swig_base)
}

func (p SwigcptrValueWeightPostingSource) SwigIsValuePostingSource() {
}

func (p SwigcptrValueWeightPostingSource) SwigGetValuePostingSource() ValuePostingSource {
	return SwigcptrValuePostingSource(p.Swigcptr())
}

func (p SwigcptrValueWeightPostingSource) SwigIsPostingSource() {
}

func (p SwigcptrValueWeightPostingSource) SwigGetPostingSource() PostingSource {
	return SwigcptrPostingSource(p.Swigcptr())
}

type ValueWeightPostingSource interface {
	Swigcptr() uintptr
	SwigIsValueWeightPostingSource()
	Get_termfreq_min() uint
	Get_termfreq_est() uint
	Get_termfreq_max() uint
	Get_maxweight() float64
	Get_docid() uint
	Next(arg1 float64)
	Skip_to(arg1 uint, arg2 float64)
	Check(arg1 uint, arg2 float64) bool
	At_end() bool
	SwigIsValuePostingSource()
	SwigGetValuePostingSource() ValuePostingSource
	SwigIsPostingSource()
	SwigGetPostingSource() PostingSource
}

type SwigcptrDecreasingValueWeightPostingSource uintptr

func (p SwigcptrDecreasingValueWeightPostingSource) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrDecreasingValueWeightPostingSource) SwigIsDecreasingValueWeightPostingSource() {
}

func _swig_wrap_new_DecreasingValueWeightPostingSource__SWIG_0(uint, uint, uint) SwigcptrDecreasingValueWeightPostingSource

func NewDecreasingValueWeightPostingSource__SWIG_0(arg1 uint, arg2 uint, arg3 uint) DecreasingValueWeightPostingSource {
	return _swig_wrap_new_DecreasingValueWeightPostingSource__SWIG_0(arg1, arg2, arg3)
}

func _swig_wrap_new_DecreasingValueWeightPostingSource__SWIG_1(uint, uint) SwigcptrDecreasingValueWeightPostingSource

func NewDecreasingValueWeightPostingSource__SWIG_1(arg1 uint, arg2 uint) DecreasingValueWeightPostingSource {
	return _swig_wrap_new_DecreasingValueWeightPostingSource__SWIG_1(arg1, arg2)
}

func _swig_wrap_new_DecreasingValueWeightPostingSource__SWIG_2(uint) SwigcptrDecreasingValueWeightPostingSource

func NewDecreasingValueWeightPostingSource__SWIG_2(arg1 uint) DecreasingValueWeightPostingSource {
	return _swig_wrap_new_DecreasingValueWeightPostingSource__SWIG_2(arg1)
}

func NewDecreasingValueWeightPostingSource(a ...interface{}) DecreasingValueWeightPostingSource {
	argc := len(a)
	if argc == 1 {
		return NewDecreasingValueWeightPostingSource__SWIG_2(a[0].(uint))
	}
	if argc == 2 {
		return NewDecreasingValueWeightPostingSource__SWIG_1(a[0].(uint), a[1].(uint))
	}
	if argc == 3 {
		return NewDecreasingValueWeightPostingSource__SWIG_0(a[0].(uint), a[1].(uint), a[2].(uint))
	}
	panic("No match for overloaded function call")
}

func _swig_wrap_delete_DecreasingValueWeightPostingSource(uintptr)

func DeleteDecreasingValueWeightPostingSource(arg1 DecreasingValueWeightPostingSource) {
	_swig_wrap_delete_DecreasingValueWeightPostingSource(arg1.Swigcptr())
}

func _swig_wrap_DecreasingValueWeightPostingSource_get_termfreq_min(SwigcptrDecreasingValueWeightPostingSource) uint

func (_swig_base SwigcptrDecreasingValueWeightPostingSource) Get_termfreq_min() uint {
	return _swig_wrap_DecreasingValueWeightPostingSource_get_termfreq_min(_swig_base)
}

func _swig_wrap_DecreasingValueWeightPostingSource_get_termfreq_est(SwigcptrDecreasingValueWeightPostingSource) uint

func (_swig_base SwigcptrDecreasingValueWeightPostingSource) Get_termfreq_est() uint {
	return _swig_wrap_DecreasingValueWeightPostingSource_get_termfreq_est(_swig_base)
}

func _swig_wrap_DecreasingValueWeightPostingSource_get_termfreq_max(SwigcptrDecreasingValueWeightPostingSource) uint

func (_swig_base SwigcptrDecreasingValueWeightPostingSource) Get_termfreq_max() uint {
	return _swig_wrap_DecreasingValueWeightPostingSource_get_termfreq_max(_swig_base)
}

func _swig_wrap_DecreasingValueWeightPostingSource_get_maxweight(SwigcptrDecreasingValueWeightPostingSource) float64

func (_swig_base SwigcptrDecreasingValueWeightPostingSource) Get_maxweight() float64 {
	return _swig_wrap_DecreasingValueWeightPostingSource_get_maxweight(_swig_base)
}

func _swig_wrap_DecreasingValueWeightPostingSource_get_docid(SwigcptrDecreasingValueWeightPostingSource) uint

func (_swig_base SwigcptrDecreasingValueWeightPostingSource) Get_docid() uint {
	return _swig_wrap_DecreasingValueWeightPostingSource_get_docid(_swig_base)
}

func _swig_wrap_DecreasingValueWeightPostingSource_at_end(SwigcptrDecreasingValueWeightPostingSource) bool

func (_swig_base SwigcptrDecreasingValueWeightPostingSource) At_end() bool {
	return _swig_wrap_DecreasingValueWeightPostingSource_at_end(_swig_base)
}

func (p SwigcptrDecreasingValueWeightPostingSource) SwigIsValueWeightPostingSource() {
}

func (p SwigcptrDecreasingValueWeightPostingSource) SwigGetValueWeightPostingSource() ValueWeightPostingSource {
	return SwigcptrValueWeightPostingSource(p.Swigcptr())
}

func (p SwigcptrDecreasingValueWeightPostingSource) SwigIsValuePostingSource() {
}

func (p SwigcptrDecreasingValueWeightPostingSource) SwigGetValuePostingSource() ValuePostingSource {
	return SwigcptrValuePostingSource(p.Swigcptr())
}

func (p SwigcptrDecreasingValueWeightPostingSource) SwigIsPostingSource() {
}

func (p SwigcptrDecreasingValueWeightPostingSource) SwigGetPostingSource() PostingSource {
	return SwigcptrPostingSource(p.Swigcptr())
}

type DecreasingValueWeightPostingSource interface {
	Swigcptr() uintptr
	SwigIsDecreasingValueWeightPostingSource()
	Get_termfreq_min() uint
	Get_termfreq_est() uint
	Get_termfreq_max() uint
	Get_maxweight() float64
	Get_docid() uint
	At_end() bool
	SwigIsValueWeightPostingSource()
	SwigGetValueWeightPostingSource() ValueWeightPostingSource
	SwigIsValuePostingSource()
	SwigGetValuePostingSource() ValuePostingSource
	SwigIsPostingSource()
	SwigGetPostingSource() PostingSource
}

type SwigcptrValueMapPostingSource uintptr

func (p SwigcptrValueMapPostingSource) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrValueMapPostingSource) SwigIsValueMapPostingSource() {
}

func _swig_wrap_new_ValueMapPostingSource(uint) SwigcptrValueMapPostingSource

func NewValueMapPostingSource(arg1 uint) ValueMapPostingSource {
	return _swig_wrap_new_ValueMapPostingSource(arg1)
}

func _swig_wrap_ValueMapPostingSource_add_mapping(SwigcptrValueMapPostingSource, string, float64)

func (arg1 SwigcptrValueMapPostingSource) Add_mapping(arg2 string, arg3 float64) {
	_swig_wrap_ValueMapPostingSource_add_mapping(arg1, arg2, arg3)
}

func _swig_wrap_ValueMapPostingSource_clear_mappings(SwigcptrValueMapPostingSource)

func (arg1 SwigcptrValueMapPostingSource) Clear_mappings() {
	_swig_wrap_ValueMapPostingSource_clear_mappings(arg1)
}

func _swig_wrap_ValueMapPostingSource_set_default_weight(SwigcptrValueMapPostingSource, float64)

func (arg1 SwigcptrValueMapPostingSource) Set_default_weight(arg2 float64) {
	_swig_wrap_ValueMapPostingSource_set_default_weight(arg1, arg2)
}

func _swig_wrap_delete_ValueMapPostingSource(uintptr)

func DeleteValueMapPostingSource(arg1 ValueMapPostingSource) {
	_swig_wrap_delete_ValueMapPostingSource(arg1.Swigcptr())
}

func _swig_wrap_ValueMapPostingSource_get_termfreq_min(SwigcptrValueMapPostingSource) uint

func (_swig_base SwigcptrValueMapPostingSource) Get_termfreq_min() uint {
	return _swig_wrap_ValueMapPostingSource_get_termfreq_min(_swig_base)
}

func _swig_wrap_ValueMapPostingSource_get_termfreq_est(SwigcptrValueMapPostingSource) uint

func (_swig_base SwigcptrValueMapPostingSource) Get_termfreq_est() uint {
	return _swig_wrap_ValueMapPostingSource_get_termfreq_est(_swig_base)
}

func _swig_wrap_ValueMapPostingSource_get_termfreq_max(SwigcptrValueMapPostingSource) uint

func (_swig_base SwigcptrValueMapPostingSource) Get_termfreq_max() uint {
	return _swig_wrap_ValueMapPostingSource_get_termfreq_max(_swig_base)
}

func _swig_wrap_ValueMapPostingSource_get_maxweight(SwigcptrValueMapPostingSource) float64

func (_swig_base SwigcptrValueMapPostingSource) Get_maxweight() float64 {
	return _swig_wrap_ValueMapPostingSource_get_maxweight(_swig_base)
}

func _swig_wrap_ValueMapPostingSource_get_docid(SwigcptrValueMapPostingSource) uint

func (_swig_base SwigcptrValueMapPostingSource) Get_docid() uint {
	return _swig_wrap_ValueMapPostingSource_get_docid(_swig_base)
}

func _swig_wrap_ValueMapPostingSource_next(SwigcptrValueMapPostingSource, float64)

func (_swig_base SwigcptrValueMapPostingSource) Next(arg1 float64) {
	_swig_wrap_ValueMapPostingSource_next(_swig_base, arg1)
}

func _swig_wrap_ValueMapPostingSource_skip_to(SwigcptrValueMapPostingSource, uint, float64)

func (_swig_base SwigcptrValueMapPostingSource) Skip_to(arg1 uint, arg2 float64) {
	_swig_wrap_ValueMapPostingSource_skip_to(_swig_base, arg1, arg2)
}

func _swig_wrap_ValueMapPostingSource_check(SwigcptrValueMapPostingSource, uint, float64) bool

func (_swig_base SwigcptrValueMapPostingSource) Check(arg1 uint, arg2 float64) bool {
	return _swig_wrap_ValueMapPostingSource_check(_swig_base, arg1, arg2)
}

func _swig_wrap_ValueMapPostingSource_at_end(SwigcptrValueMapPostingSource) bool

func (_swig_base SwigcptrValueMapPostingSource) At_end() bool {
	return _swig_wrap_ValueMapPostingSource_at_end(_swig_base)
}

func (p SwigcptrValueMapPostingSource) SwigIsValuePostingSource() {
}

func (p SwigcptrValueMapPostingSource) SwigGetValuePostingSource() ValuePostingSource {
	return SwigcptrValuePostingSource(p.Swigcptr())
}

func (p SwigcptrValueMapPostingSource) SwigIsPostingSource() {
}

func (p SwigcptrValueMapPostingSource) SwigGetPostingSource() PostingSource {
	return SwigcptrPostingSource(p.Swigcptr())
}

type ValueMapPostingSource interface {
	Swigcptr() uintptr
	SwigIsValueMapPostingSource()
	Add_mapping(arg2 string, arg3 float64)
	Clear_mappings()
	Set_default_weight(arg2 float64)
	Get_termfreq_min() uint
	Get_termfreq_est() uint
	Get_termfreq_max() uint
	Get_maxweight() float64
	Get_docid() uint
	Next(arg1 float64)
	Skip_to(arg1 uint, arg2 float64)
	Check(arg1 uint, arg2 float64) bool
	At_end() bool
	SwigIsValuePostingSource()
	SwigGetValuePostingSource() ValuePostingSource
	SwigIsPostingSource()
	SwigGetPostingSource() PostingSource
}

type SwigcptrFixedWeightPostingSource uintptr

func (p SwigcptrFixedWeightPostingSource) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrFixedWeightPostingSource) SwigIsFixedWeightPostingSource() {
}

func _swig_wrap_new_FixedWeightPostingSource(float64) SwigcptrFixedWeightPostingSource

func NewFixedWeightPostingSource(arg1 float64) FixedWeightPostingSource {
	return _swig_wrap_new_FixedWeightPostingSource(arg1)
}

func _swig_wrap_delete_FixedWeightPostingSource(uintptr)

func DeleteFixedWeightPostingSource(arg1 FixedWeightPostingSource) {
	_swig_wrap_delete_FixedWeightPostingSource(arg1.Swigcptr())
}

func _swig_wrap_FixedWeightPostingSource_get_maxweight(SwigcptrFixedWeightPostingSource) float64

func (_swig_base SwigcptrFixedWeightPostingSource) Get_maxweight() float64 {
	return _swig_wrap_FixedWeightPostingSource_get_maxweight(_swig_base)
}

func (p SwigcptrFixedWeightPostingSource) SwigIsPostingSource() {
}

func (p SwigcptrFixedWeightPostingSource) SwigGetPostingSource() PostingSource {
	return SwigcptrPostingSource(p.Swigcptr())
}

type FixedWeightPostingSource interface {
	Swigcptr() uintptr
	SwigIsFixedWeightPostingSource()
	Get_maxweight() float64
	SwigIsPostingSource()
	SwigGetPostingSource() PostingSource
}

type _swig_DirectorMatchSpy struct {
	SwigcptrMatchSpy
	v interface{}
}

func (p *_swig_DirectorMatchSpy) Swigcptr() uintptr {
	return p.SwigcptrMatchSpy.Swigcptr()
}

func (p *_swig_DirectorMatchSpy) SwigIsMatchSpy() {
}

func (p *_swig_DirectorMatchSpy) DirectorInterface() interface{} {
	return p.v
}

func _swig_NewDirectorMatchSpyMatchSpy(*_swig_DirectorMatchSpy) SwigcptrMatchSpy

func NewDirectorMatchSpy(v interface{}) MatchSpy {
	p := &_swig_DirectorMatchSpy{0, v}
	p.SwigcptrMatchSpy = _swig_NewDirectorMatchSpyMatchSpy(p)
	return p
}

func _swig_wrap_DeleteDirectorMatchSpy(uintptr)

func DeleteDirectorMatchSpy(arg1 MatchSpy) {
	_swig_wrap_DeleteDirectorMatchSpy(arg1.Swigcptr())
}

func Swiggo_DeleteDirector_MatchSpy(p *_swig_DirectorMatchSpy) {
	p.SwigcptrMatchSpy = 0
}

type _swig_DirectorInterfaceMatchSpyApply interface {
	Apply(Document, float64)
}

func _swig_wrap__swig_DirectorMatchSpy_upcall_Apply(SwigcptrMatchSpy, uintptr, float64)
func (swig_p *_swig_DirectorMatchSpy) Apply(doc Document, wt float64) {
	if swig_g, swig_ok := swig_p.v.(_swig_DirectorInterfaceMatchSpyApply); swig_ok {
		swig_g.Apply(doc, wt)
		return
	}
	_swig_wrap__swig_DirectorMatchSpy_upcall_Apply(swig_p.SwigcptrMatchSpy, doc.Swigcptr(), wt)
}

func DirectorMatchSpyApply(p MatchSpy, arg2 Document, arg3 float64) {
	_swig_wrap__swig_DirectorMatchSpy_upcall_Apply(p.(*_swig_DirectorMatchSpy).SwigcptrMatchSpy, arg2.Swigcptr(), arg3)
}

func Swig_DirectorMatchSpy_callback_Apply(p *_swig_DirectorMatchSpy, arg2 uintptr, arg3 float64) {
	p.Apply(SwigcptrDocument(arg2), arg3)
}

type _swig_DirectorInterfaceMatchSpyName interface {
	Name() string
}

func _swig_wrap__swig_DirectorMatchSpy_upcall_Name(SwigcptrMatchSpy) string
func (swig_p *_swig_DirectorMatchSpy) Name() string {
	if swig_g, swig_ok := swig_p.v.(_swig_DirectorInterfaceMatchSpyName); swig_ok {
		return swig_g.Name()
	}
	return _swig_wrap__swig_DirectorMatchSpy_upcall_Name(swig_p.SwigcptrMatchSpy)
}

func DirectorMatchSpyName(p MatchSpy) string {
	return _swig_wrap__swig_DirectorMatchSpy_upcall_Name(p.(*_swig_DirectorMatchSpy).SwigcptrMatchSpy)
}

func Swig_DirectorMatchSpy_callback_name(p *_swig_DirectorMatchSpy) (swig_result string) {
	return p.Name()
}

type _swig_DirectorInterfaceMatchSpyMerge_results interface {
	Merge_results(string)
}

func _swig_wrap__swig_DirectorMatchSpy_upcall_Merge_results(SwigcptrMatchSpy, string)
func (swig_p *_swig_DirectorMatchSpy) Merge_results(s string) {
	if swig_g, swig_ok := swig_p.v.(_swig_DirectorInterfaceMatchSpyMerge_results); swig_ok {
		swig_g.Merge_results(s)
		return
	}
	_swig_wrap__swig_DirectorMatchSpy_upcall_Merge_results(swig_p.SwigcptrMatchSpy, s)
}

func DirectorMatchSpyMerge_results(p MatchSpy, arg2 string) {
	_swig_wrap__swig_DirectorMatchSpy_upcall_Merge_results(p.(*_swig_DirectorMatchSpy).SwigcptrMatchSpy, arg2)
}

func Swig_DirectorMatchSpy_callback_merge_results(p *_swig_DirectorMatchSpy, arg2 string) {
	p.Merge_results(arg2)
}

type _swig_DirectorInterfaceMatchSpyGet_description interface {
	Get_description() string
}

func _swig_wrap__swig_DirectorMatchSpy_upcall_Get_description(SwigcptrMatchSpy) string
func (swig_p *_swig_DirectorMatchSpy) Get_description() string {
	if swig_g, swig_ok := swig_p.v.(_swig_DirectorInterfaceMatchSpyGet_description); swig_ok {
		return swig_g.Get_description()
	}
	return _swig_wrap__swig_DirectorMatchSpy_upcall_Get_description(swig_p.SwigcptrMatchSpy)
}

func DirectorMatchSpyGet_description(p MatchSpy) string {
	return _swig_wrap__swig_DirectorMatchSpy_upcall_Get_description(p.(*_swig_DirectorMatchSpy).SwigcptrMatchSpy)
}

func Swig_DirectorMatchSpy_callback_get_description(p *_swig_DirectorMatchSpy) (swig_result string) {
	return p.Get_description()
}

type SwigcptrMatchSpy uintptr

func (p SwigcptrMatchSpy) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrMatchSpy) SwigIsMatchSpy() {
}

func (p SwigcptrMatchSpy) DirectorInterface() interface{} {
	return nil
}

func _swig_wrap_new_MatchSpy() SwigcptrMatchSpy

func NewMatchSpy() MatchSpy {
	return _swig_wrap_new_MatchSpy()
}

func _swig_wrap_delete_MatchSpy(uintptr)

func DeleteMatchSpy(arg1 MatchSpy) {
	_swig_wrap_delete_MatchSpy(arg1.Swigcptr())
}

func _swig_wrap_MatchSpy_Apply(SwigcptrMatchSpy, uintptr, float64)

func (arg1 SwigcptrMatchSpy) Apply(arg2 Document, arg3 float64) {
	_swig_wrap_MatchSpy_Apply(arg1, arg2.Swigcptr(), arg3)
}

func _swig_wrap_MatchSpy_name(SwigcptrMatchSpy) string

func (arg1 SwigcptrMatchSpy) Name() string {
	return _swig_wrap_MatchSpy_name(arg1)
}

func _swig_wrap_MatchSpy_merge_results(SwigcptrMatchSpy, string)

func (arg1 SwigcptrMatchSpy) Merge_results(arg2 string) {
	_swig_wrap_MatchSpy_merge_results(arg1, arg2)
}

func _swig_wrap_MatchSpy_get_description(SwigcptrMatchSpy) string

func (arg1 SwigcptrMatchSpy) Get_description() string {
	return _swig_wrap_MatchSpy_get_description(arg1)
}

type MatchSpy interface {
	Swigcptr() uintptr
	SwigIsMatchSpy()
	DirectorInterface() interface{}
	Apply(arg2 Document, arg3 float64)
	Name() string
	Merge_results(arg2 string)
	Get_description() string
}

type SwigcptrValueCountMatchSpy uintptr

func (p SwigcptrValueCountMatchSpy) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrValueCountMatchSpy) SwigIsValueCountMatchSpy() {
}

func _swig_wrap_new_ValueCountMatchSpy__SWIG_0() SwigcptrValueCountMatchSpy

func NewValueCountMatchSpy__SWIG_0() ValueCountMatchSpy {
	return _swig_wrap_new_ValueCountMatchSpy__SWIG_0()
}

func _swig_wrap_new_ValueCountMatchSpy__SWIG_1(uint) SwigcptrValueCountMatchSpy

func NewValueCountMatchSpy__SWIG_1(arg1 uint) ValueCountMatchSpy {
	return _swig_wrap_new_ValueCountMatchSpy__SWIG_1(arg1)
}

func NewValueCountMatchSpy(a ...interface{}) ValueCountMatchSpy {
	argc := len(a)
	if argc == 0 {
		return NewValueCountMatchSpy__SWIG_0()
	}
	if argc == 1 {
		return NewValueCountMatchSpy__SWIG_1(a[0].(uint))
	}
	panic("No match for overloaded function call")
}

func _swig_wrap_ValueCountMatchSpy_get_total(SwigcptrValueCountMatchSpy) int

func (arg1 SwigcptrValueCountMatchSpy) Get_total() int {
	return _swig_wrap_ValueCountMatchSpy_get_total(arg1)
}

func _swig_wrap_ValueCountMatchSpy_values_begin(SwigcptrValueCountMatchSpy) SwigcptrTermIterator

func (arg1 SwigcptrValueCountMatchSpy) Values_begin() TermIterator {
	return _swig_wrap_ValueCountMatchSpy_values_begin(arg1)
}

func _swig_wrap_ValueCountMatchSpy_values_end(SwigcptrValueCountMatchSpy) SwigcptrTermIterator

func (arg1 SwigcptrValueCountMatchSpy) Values_end() TermIterator {
	return _swig_wrap_ValueCountMatchSpy_values_end(arg1)
}

func _swig_wrap_ValueCountMatchSpy_top_values_begin(SwigcptrValueCountMatchSpy, int) SwigcptrTermIterator

func (arg1 SwigcptrValueCountMatchSpy) Top_values_begin(arg2 int) TermIterator {
	return _swig_wrap_ValueCountMatchSpy_top_values_begin(arg1, arg2)
}

func _swig_wrap_ValueCountMatchSpy_top_values_end(SwigcptrValueCountMatchSpy, int) SwigcptrTermIterator

func (arg1 SwigcptrValueCountMatchSpy) Top_values_end(arg2 int) TermIterator {
	return _swig_wrap_ValueCountMatchSpy_top_values_end(arg1, arg2)
}

func _swig_wrap_delete_ValueCountMatchSpy(uintptr)

func DeleteValueCountMatchSpy(arg1 ValueCountMatchSpy) {
	_swig_wrap_delete_ValueCountMatchSpy(arg1.Swigcptr())
}

func _swig_wrap_ValueCountMatchSpy_Apply(SwigcptrValueCountMatchSpy, uintptr, float64)

func (_swig_base SwigcptrValueCountMatchSpy) Apply(arg1 Document, arg2 float64) {
	_swig_wrap_ValueCountMatchSpy_Apply(_swig_base, arg1.Swigcptr(), arg2)
}

func (p SwigcptrValueCountMatchSpy) SwigIsMatchSpy() {
}

func (p SwigcptrValueCountMatchSpy) SwigGetMatchSpy() MatchSpy {
	return SwigcptrMatchSpy(p.Swigcptr())
}

type ValueCountMatchSpy interface {
	Swigcptr() uintptr
	SwigIsValueCountMatchSpy()
	Get_total() int
	Values_begin() TermIterator
	Values_end() TermIterator
	Top_values_begin(arg2 int) TermIterator
	Top_values_end(arg2 int) TermIterator
	Apply(arg1 Document, arg2 float64)
	SwigIsMatchSpy()
	SwigGetMatchSpy() MatchSpy
}

func Miles_to_metres(float64) float64
func Metres_to_miles(float64) float64
type SwigcptrLatLongCoord uintptr

func (p SwigcptrLatLongCoord) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrLatLongCoord) SwigIsLatLongCoord() {
}

func _swig_wrap_LatLongCoord_latitude_set(SwigcptrLatLongCoord, float64)

func (arg1 SwigcptrLatLongCoord) SetLatitude(arg2 float64) {
	_swig_wrap_LatLongCoord_latitude_set(arg1, arg2)
}

func _swig_wrap_LatLongCoord_latitude_get(SwigcptrLatLongCoord) float64

func (arg1 SwigcptrLatLongCoord) GetLatitude() float64 {
	return _swig_wrap_LatLongCoord_latitude_get(arg1)
}

func _swig_wrap_LatLongCoord_longitude_set(SwigcptrLatLongCoord, float64)

func (arg1 SwigcptrLatLongCoord) SetLongitude(arg2 float64) {
	_swig_wrap_LatLongCoord_longitude_set(arg1, arg2)
}

func _swig_wrap_LatLongCoord_longitude_get(SwigcptrLatLongCoord) float64

func (arg1 SwigcptrLatLongCoord) GetLongitude() float64 {
	return _swig_wrap_LatLongCoord_longitude_get(arg1)
}

func _swig_wrap_new_LatLongCoord__SWIG_0() SwigcptrLatLongCoord

func NewLatLongCoord__SWIG_0() LatLongCoord {
	return _swig_wrap_new_LatLongCoord__SWIG_0()
}

func _swig_wrap_new_LatLongCoord__SWIG_1(float64, float64) SwigcptrLatLongCoord

func NewLatLongCoord__SWIG_1(arg1 float64, arg2 float64) LatLongCoord {
	return _swig_wrap_new_LatLongCoord__SWIG_1(arg1, arg2)
}

func NewLatLongCoord(a ...interface{}) LatLongCoord {
	argc := len(a)
	if argc == 0 {
		return NewLatLongCoord__SWIG_0()
	}
	if argc == 2 {
		return NewLatLongCoord__SWIG_1(a[0].(float64), a[1].(float64))
	}
	panic("No match for overloaded function call")
}

func _swig_wrap_LatLongCoord_unserialise(SwigcptrLatLongCoord, string)

func (arg1 SwigcptrLatLongCoord) Unserialise(arg2 string) {
	_swig_wrap_LatLongCoord_unserialise(arg1, arg2)
}

func _swig_wrap_LatLongCoord_serialise(SwigcptrLatLongCoord) string

func (arg1 SwigcptrLatLongCoord) Serialise() string {
	return _swig_wrap_LatLongCoord_serialise(arg1)
}

func _swig_wrap_LatLongCoord_get_description(SwigcptrLatLongCoord) string

func (arg1 SwigcptrLatLongCoord) Get_description() string {
	return _swig_wrap_LatLongCoord_get_description(arg1)
}

func _swig_wrap_delete_LatLongCoord(uintptr)

func DeleteLatLongCoord(arg1 LatLongCoord) {
	_swig_wrap_delete_LatLongCoord(arg1.Swigcptr())
}

type LatLongCoord interface {
	Swigcptr() uintptr
	SwigIsLatLongCoord()
	SetLatitude(arg2 float64)
	GetLatitude() float64
	SetLongitude(arg2 float64)
	GetLongitude() float64
	Unserialise(arg2 string)
	Serialise() string
	Get_description() string
}

type SwigcptrLatLongCoordsIterator uintptr

func (p SwigcptrLatLongCoordsIterator) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrLatLongCoordsIterator) SwigIsLatLongCoordsIterator() {
}

func _swig_wrap_new_LatLongCoordsIterator() SwigcptrLatLongCoordsIterator

func NewLatLongCoordsIterator() LatLongCoordsIterator {
	return _swig_wrap_new_LatLongCoordsIterator()
}

func _swig_wrap_LatLongCoordsIterator_equals(SwigcptrLatLongCoordsIterator, uintptr) bool

func (arg1 SwigcptrLatLongCoordsIterator) Equals(arg2 LatLongCoordsIterator) bool {
	return _swig_wrap_LatLongCoordsIterator_equals(arg1, arg2.Swigcptr())
}

func _swig_wrap_LatLongCoordsIterator_get_coord(SwigcptrLatLongCoordsIterator) SwigcptrLatLongCoord

func (arg1 SwigcptrLatLongCoordsIterator) Get_coord() LatLongCoord {
	return _swig_wrap_LatLongCoordsIterator_get_coord(arg1)
}

func _swig_wrap_LatLongCoordsIterator_next(SwigcptrLatLongCoordsIterator)

func (arg1 SwigcptrLatLongCoordsIterator) Next() {
	_swig_wrap_LatLongCoordsIterator_next(arg1)
}

func _swig_wrap_delete_LatLongCoordsIterator(uintptr)

func DeleteLatLongCoordsIterator(arg1 LatLongCoordsIterator) {
	_swig_wrap_delete_LatLongCoordsIterator(arg1.Swigcptr())
}

type LatLongCoordsIterator interface {
	Swigcptr() uintptr
	SwigIsLatLongCoordsIterator()
	Equals(arg2 LatLongCoordsIterator) bool
	Get_coord() LatLongCoord
	Next()
}

type SwigcptrLatLongCoords uintptr

func (p SwigcptrLatLongCoords) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrLatLongCoords) SwigIsLatLongCoords() {
}

func _swig_wrap_LatLongCoords_begin(SwigcptrLatLongCoords) SwigcptrLatLongCoordsIterator

func (arg1 SwigcptrLatLongCoords) Begin() LatLongCoordsIterator {
	return _swig_wrap_LatLongCoords_begin(arg1)
}

func _swig_wrap_LatLongCoords_end(SwigcptrLatLongCoords) SwigcptrLatLongCoordsIterator

func (arg1 SwigcptrLatLongCoords) End() LatLongCoordsIterator {
	return _swig_wrap_LatLongCoords_end(arg1)
}

func _swig_wrap_LatLongCoords_size(SwigcptrLatLongCoords) int

func (arg1 SwigcptrLatLongCoords) Size() int {
	return _swig_wrap_LatLongCoords_size(arg1)
}

func _swig_wrap_LatLongCoords_empty(SwigcptrLatLongCoords) bool

func (arg1 SwigcptrLatLongCoords) Empty() bool {
	return _swig_wrap_LatLongCoords_empty(arg1)
}

func _swig_wrap_LatLongCoords_append(SwigcptrLatLongCoords, uintptr)

func (arg1 SwigcptrLatLongCoords) Append(arg2 LatLongCoord) {
	_swig_wrap_LatLongCoords_append(arg1, arg2.Swigcptr())
}

func _swig_wrap_new_LatLongCoords__SWIG_0() SwigcptrLatLongCoords

func NewLatLongCoords__SWIG_0() LatLongCoords {
	return _swig_wrap_new_LatLongCoords__SWIG_0()
}

func _swig_wrap_new_LatLongCoords__SWIG_1(uintptr) SwigcptrLatLongCoords

func NewLatLongCoords__SWIG_1(arg1 LatLongCoord) LatLongCoords {
	return _swig_wrap_new_LatLongCoords__SWIG_1(arg1.Swigcptr())
}

func NewLatLongCoords(a ...interface{}) LatLongCoords {
	argc := len(a)
	if argc == 0 {
		return NewLatLongCoords__SWIG_0()
	}
	if argc == 1 {
		return NewLatLongCoords__SWIG_1(a[0].(LatLongCoord))
	}
	panic("No match for overloaded function call")
}

func _swig_wrap_LatLongCoords_unserialise(SwigcptrLatLongCoords, string)

func (arg1 SwigcptrLatLongCoords) Unserialise(arg2 string) {
	_swig_wrap_LatLongCoords_unserialise(arg1, arg2)
}

func _swig_wrap_LatLongCoords_serialise(SwigcptrLatLongCoords) string

func (arg1 SwigcptrLatLongCoords) Serialise() string {
	return _swig_wrap_LatLongCoords_serialise(arg1)
}

func _swig_wrap_LatLongCoords_get_description(SwigcptrLatLongCoords) string

func (arg1 SwigcptrLatLongCoords) Get_description() string {
	return _swig_wrap_LatLongCoords_get_description(arg1)
}

func _swig_wrap_delete_LatLongCoords(uintptr)

func DeleteLatLongCoords(arg1 LatLongCoords) {
	_swig_wrap_delete_LatLongCoords(arg1.Swigcptr())
}

type LatLongCoords interface {
	Swigcptr() uintptr
	SwigIsLatLongCoords()
	Begin() LatLongCoordsIterator
	End() LatLongCoordsIterator
	Size() int
	Empty() bool
	Append(arg2 LatLongCoord)
	Unserialise(arg2 string)
	Serialise() string
	Get_description() string
}

type _swig_DirectorLatLongMetric struct {
	SwigcptrLatLongMetric
	v interface{}
}

func (p *_swig_DirectorLatLongMetric) Swigcptr() uintptr {
	return p.SwigcptrLatLongMetric.Swigcptr()
}

func (p *_swig_DirectorLatLongMetric) SwigIsLatLongMetric() {
}

func (p *_swig_DirectorLatLongMetric) DirectorInterface() interface{} {
	return p.v
}

func _swig_NewDirectorLatLongMetricLatLongMetric(*_swig_DirectorLatLongMetric) SwigcptrLatLongMetric

func NewDirectorLatLongMetric(v interface{}) LatLongMetric {
	p := &_swig_DirectorLatLongMetric{0, v}
	p.SwigcptrLatLongMetric = _swig_NewDirectorLatLongMetricLatLongMetric(p)
	return p
}

func _swig_wrap_DeleteDirectorLatLongMetric(uintptr)

func DeleteDirectorLatLongMetric(arg1 LatLongMetric) {
	_swig_wrap_DeleteDirectorLatLongMetric(arg1.Swigcptr())
}

func Swiggo_DeleteDirector_LatLongMetric(p *_swig_DirectorLatLongMetric) {
	p.SwigcptrLatLongMetric = 0
}

type _swig_DirectorInterfaceLatLongMetricPointwise_distance interface {
	Pointwise_distance(LatLongCoord, LatLongCoord) float64
}

func _swig_wrap__swig_DirectorLatLongMetric_upcall_Pointwise_distance(SwigcptrLatLongMetric, uintptr, uintptr) float64
func (swig_p *_swig_DirectorLatLongMetric) Pointwise_distance(a LatLongCoord, b LatLongCoord) float64 {
	if swig_g, swig_ok := swig_p.v.(_swig_DirectorInterfaceLatLongMetricPointwise_distance); swig_ok {
		return swig_g.Pointwise_distance(a, b)
	}
	return _swig_wrap__swig_DirectorLatLongMetric_upcall_Pointwise_distance(swig_p.SwigcptrLatLongMetric, a.Swigcptr(), b.Swigcptr())
}

func DirectorLatLongMetricPointwise_distance(p LatLongMetric, arg2 LatLongCoord, arg3 LatLongCoord) float64 {
	return _swig_wrap__swig_DirectorLatLongMetric_upcall_Pointwise_distance(p.(*_swig_DirectorLatLongMetric).SwigcptrLatLongMetric, arg2.Swigcptr(), arg3.Swigcptr())
}

func Swig_DirectorLatLongMetric_callback_pointwise_distance(p *_swig_DirectorLatLongMetric, arg2 uintptr, arg3 uintptr) (swig_result float64) {
	return p.Pointwise_distance(SwigcptrLatLongCoord(arg2), SwigcptrLatLongCoord(arg3))
}

type _swig_DirectorInterfaceLatLongMetricName interface {
	Name() string
}

func _swig_wrap__swig_DirectorLatLongMetric_upcall_Name(SwigcptrLatLongMetric) string
func (swig_p *_swig_DirectorLatLongMetric) Name() string {
	if swig_g, swig_ok := swig_p.v.(_swig_DirectorInterfaceLatLongMetricName); swig_ok {
		return swig_g.Name()
	}
	return _swig_wrap__swig_DirectorLatLongMetric_upcall_Name(swig_p.SwigcptrLatLongMetric)
}

func DirectorLatLongMetricName(p LatLongMetric) string {
	return _swig_wrap__swig_DirectorLatLongMetric_upcall_Name(p.(*_swig_DirectorLatLongMetric).SwigcptrLatLongMetric)
}

func Swig_DirectorLatLongMetric_callback_name(p *_swig_DirectorLatLongMetric) (swig_result string) {
	return p.Name()
}

type SwigcptrLatLongMetric uintptr

func (p SwigcptrLatLongMetric) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrLatLongMetric) SwigIsLatLongMetric() {
}

func (p SwigcptrLatLongMetric) DirectorInterface() interface{} {
	return nil
}

func _swig_wrap_delete_LatLongMetric(uintptr)

func DeleteLatLongMetric(arg1 LatLongMetric) {
	_swig_wrap_delete_LatLongMetric(arg1.Swigcptr())
}

func _swig_wrap_LatLongMetric_pointwise_distance(SwigcptrLatLongMetric, uintptr, uintptr) float64

func (arg1 SwigcptrLatLongMetric) Pointwise_distance(arg2 LatLongCoord, arg3 LatLongCoord) float64 {
	return _swig_wrap_LatLongMetric_pointwise_distance(arg1, arg2.Swigcptr(), arg3.Swigcptr())
}

func _swig_wrap_LatLongMetric_Apply__SWIG_0(SwigcptrLatLongMetric, uintptr, uintptr) float64

func (arg1 SwigcptrLatLongMetric) Apply__SWIG_0(arg2 LatLongCoords, arg3 LatLongCoords) float64 {
	return _swig_wrap_LatLongMetric_Apply__SWIG_0(arg1, arg2.Swigcptr(), arg3.Swigcptr())
}

func _swig_wrap_LatLongMetric_Apply__SWIG_1(SwigcptrLatLongMetric, uintptr, string) float64

func (arg1 SwigcptrLatLongMetric) Apply__SWIG_1(arg2 LatLongCoords, arg3 string) float64 {
	return _swig_wrap_LatLongMetric_Apply__SWIG_1(arg1, arg2.Swigcptr(), arg3)
}

func _swig_wrap_LatLongMetric_Apply__SWIG_2(SwigcptrLatLongMetric, uintptr, string, int) float64

func (arg1 SwigcptrLatLongMetric) Apply__SWIG_2(arg2 LatLongCoords, arg3 string, arg4 int) float64 {
	return _swig_wrap_LatLongMetric_Apply__SWIG_2(arg1, arg2.Swigcptr(), arg3, arg4)
}

func (p SwigcptrLatLongMetric) Apply(a ...interface{}) float64 {
	argc := len(a)
	if argc == 2 {
		if _, ok := a[1].(SwigcptrLatLongCoords); !ok {
			goto check_1
		}
		return p.Apply__SWIG_0(a[0].(LatLongCoords), a[1].(LatLongCoords))
	}
check_1:
	if argc == 2 {
		return p.Apply__SWIG_1(a[0].(LatLongCoords), a[1].(string))
	}
	if argc == 3 {
		return p.Apply__SWIG_2(a[0].(LatLongCoords), a[1].(string), a[2].(int))
	}
	panic("No match for overloaded function call")
}

func _swig_wrap_LatLongMetric_name(SwigcptrLatLongMetric) string

func (arg1 SwigcptrLatLongMetric) Name() string {
	return _swig_wrap_LatLongMetric_name(arg1)
}

func _swig_wrap_new_LatLongMetric() SwigcptrLatLongMetric

func NewLatLongMetric() LatLongMetric {
	return _swig_wrap_new_LatLongMetric()
}

type LatLongMetric interface {
	Swigcptr() uintptr
	SwigIsLatLongMetric()
	DirectorInterface() interface{}
	Pointwise_distance(arg2 LatLongCoord, arg3 LatLongCoord) float64
	Apply(a ...interface{}) float64
	Name() string
}

type SwigcptrGreatCircleMetric uintptr

func (p SwigcptrGreatCircleMetric) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrGreatCircleMetric) SwigIsGreatCircleMetric() {
}

func _swig_wrap_new_GreatCircleMetric__SWIG_0() SwigcptrGreatCircleMetric

func NewGreatCircleMetric__SWIG_0() GreatCircleMetric {
	return _swig_wrap_new_GreatCircleMetric__SWIG_0()
}

func _swig_wrap_new_GreatCircleMetric__SWIG_1(float64) SwigcptrGreatCircleMetric

func NewGreatCircleMetric__SWIG_1(arg1 float64) GreatCircleMetric {
	return _swig_wrap_new_GreatCircleMetric__SWIG_1(arg1)
}

func NewGreatCircleMetric(a ...interface{}) GreatCircleMetric {
	argc := len(a)
	if argc == 0 {
		return NewGreatCircleMetric__SWIG_0()
	}
	if argc == 1 {
		return NewGreatCircleMetric__SWIG_1(a[0].(float64))
	}
	panic("No match for overloaded function call")
}

func _swig_wrap_delete_GreatCircleMetric(uintptr)

func DeleteGreatCircleMetric(arg1 GreatCircleMetric) {
	_swig_wrap_delete_GreatCircleMetric(arg1.Swigcptr())
}

func _swig_wrap_GreatCircleMetric_Apply__SWIG_0(SwigcptrGreatCircleMetric, uintptr, uintptr) float64

func (_swig_base SwigcptrGreatCircleMetric) Apply__SWIG_0(arg1 LatLongCoords, arg2 LatLongCoords) float64 {
	return _swig_wrap_GreatCircleMetric_Apply__SWIG_0(_swig_base, arg1.Swigcptr(), arg2.Swigcptr())
}

func _swig_wrap_GreatCircleMetric_Apply__SWIG_1(SwigcptrGreatCircleMetric, uintptr, string) float64

func (_swig_base SwigcptrGreatCircleMetric) Apply__SWIG_1(arg1 LatLongCoords, arg2 string) float64 {
	return _swig_wrap_GreatCircleMetric_Apply__SWIG_1(_swig_base, arg1.Swigcptr(), arg2)
}

func _swig_wrap_GreatCircleMetric_Apply__SWIG_2(SwigcptrGreatCircleMetric, uintptr, string, int) float64

func (_swig_base SwigcptrGreatCircleMetric) Apply__SWIG_2(arg1 LatLongCoords, arg2 string, arg3 int) float64 {
	return _swig_wrap_GreatCircleMetric_Apply__SWIG_2(_swig_base, arg1.Swigcptr(), arg2, arg3)
}

func (p SwigcptrGreatCircleMetric) Apply(a ...interface{}) float64 {
	argc := len(a)
	if argc == 2 {
		if _, ok := a[1].(SwigcptrLatLongCoords); !ok {
			goto check_1
		}
		return p.Apply__SWIG_0(a[0].(LatLongCoords), a[1].(LatLongCoords))
	}
check_1:
	if argc == 2 {
		return p.Apply__SWIG_1(a[0].(LatLongCoords), a[1].(string))
	}
	if argc == 3 {
		return p.Apply__SWIG_2(a[0].(LatLongCoords), a[1].(string), a[2].(int))
	}
	panic("No match for overloaded function call")
}

func (p SwigcptrGreatCircleMetric) SwigIsLatLongMetric() {
}

func (p SwigcptrGreatCircleMetric) SwigGetLatLongMetric() LatLongMetric {
	return SwigcptrLatLongMetric(p.Swigcptr())
}

type GreatCircleMetric interface {
	Swigcptr() uintptr
	SwigIsGreatCircleMetric()
	Apply(a ...interface{}) float64
	SwigIsLatLongMetric()
	SwigGetLatLongMetric() LatLongMetric
}

type SwigcptrLatLongDistancePostingSource uintptr

func (p SwigcptrLatLongDistancePostingSource) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrLatLongDistancePostingSource) SwigIsLatLongDistancePostingSource() {
}

func _swig_wrap_new_LatLongDistancePostingSource__SWIG_0(uint, uintptr, uintptr, float64, float64, float64) SwigcptrLatLongDistancePostingSource

func NewLatLongDistancePostingSource__SWIG_0(arg1 uint, arg2 LatLongCoords, arg3 LatLongMetric, arg4 float64, arg5 float64, arg6 float64) LatLongDistancePostingSource {
	return _swig_wrap_new_LatLongDistancePostingSource__SWIG_0(arg1, arg2.Swigcptr(), arg3.Swigcptr(), arg4, arg5, arg6)
}

func _swig_wrap_new_LatLongDistancePostingSource__SWIG_1(uint, uintptr, uintptr, float64, float64) SwigcptrLatLongDistancePostingSource

func NewLatLongDistancePostingSource__SWIG_1(arg1 uint, arg2 LatLongCoords, arg3 LatLongMetric, arg4 float64, arg5 float64) LatLongDistancePostingSource {
	return _swig_wrap_new_LatLongDistancePostingSource__SWIG_1(arg1, arg2.Swigcptr(), arg3.Swigcptr(), arg4, arg5)
}

func _swig_wrap_new_LatLongDistancePostingSource__SWIG_2(uint, uintptr, uintptr, float64) SwigcptrLatLongDistancePostingSource

func NewLatLongDistancePostingSource__SWIG_2(arg1 uint, arg2 LatLongCoords, arg3 LatLongMetric, arg4 float64) LatLongDistancePostingSource {
	return _swig_wrap_new_LatLongDistancePostingSource__SWIG_2(arg1, arg2.Swigcptr(), arg3.Swigcptr(), arg4)
}

func _swig_wrap_new_LatLongDistancePostingSource__SWIG_3(uint, uintptr, uintptr) SwigcptrLatLongDistancePostingSource

func NewLatLongDistancePostingSource__SWIG_3(arg1 uint, arg2 LatLongCoords, arg3 LatLongMetric) LatLongDistancePostingSource {
	return _swig_wrap_new_LatLongDistancePostingSource__SWIG_3(arg1, arg2.Swigcptr(), arg3.Swigcptr())
}

func NewLatLongDistancePostingSource(a ...interface{}) LatLongDistancePostingSource {
	argc := len(a)
	if argc == 3 {
		return NewLatLongDistancePostingSource__SWIG_3(a[0].(uint), a[1].(LatLongCoords), a[2].(LatLongMetric))
	}
	if argc == 4 {
		return NewLatLongDistancePostingSource__SWIG_2(a[0].(uint), a[1].(LatLongCoords), a[2].(LatLongMetric), a[3].(float64))
	}
	if argc == 5 {
		return NewLatLongDistancePostingSource__SWIG_1(a[0].(uint), a[1].(LatLongCoords), a[2].(LatLongMetric), a[3].(float64), a[4].(float64))
	}
	if argc == 6 {
		return NewLatLongDistancePostingSource__SWIG_0(a[0].(uint), a[1].(LatLongCoords), a[2].(LatLongMetric), a[3].(float64), a[4].(float64), a[5].(float64))
	}
	panic("No match for overloaded function call")
}

func _swig_wrap_delete_LatLongDistancePostingSource(uintptr)

func DeleteLatLongDistancePostingSource(arg1 LatLongDistancePostingSource) {
	_swig_wrap_delete_LatLongDistancePostingSource(arg1.Swigcptr())
}

func _swig_wrap_LatLongDistancePostingSource_get_termfreq_min(SwigcptrLatLongDistancePostingSource) uint

func (_swig_base SwigcptrLatLongDistancePostingSource) Get_termfreq_min() uint {
	return _swig_wrap_LatLongDistancePostingSource_get_termfreq_min(_swig_base)
}

func _swig_wrap_LatLongDistancePostingSource_get_termfreq_est(SwigcptrLatLongDistancePostingSource) uint

func (_swig_base SwigcptrLatLongDistancePostingSource) Get_termfreq_est() uint {
	return _swig_wrap_LatLongDistancePostingSource_get_termfreq_est(_swig_base)
}

func _swig_wrap_LatLongDistancePostingSource_get_termfreq_max(SwigcptrLatLongDistancePostingSource) uint

func (_swig_base SwigcptrLatLongDistancePostingSource) Get_termfreq_max() uint {
	return _swig_wrap_LatLongDistancePostingSource_get_termfreq_max(_swig_base)
}

func _swig_wrap_LatLongDistancePostingSource_get_maxweight(SwigcptrLatLongDistancePostingSource) float64

func (_swig_base SwigcptrLatLongDistancePostingSource) Get_maxweight() float64 {
	return _swig_wrap_LatLongDistancePostingSource_get_maxweight(_swig_base)
}

func _swig_wrap_LatLongDistancePostingSource_get_docid(SwigcptrLatLongDistancePostingSource) uint

func (_swig_base SwigcptrLatLongDistancePostingSource) Get_docid() uint {
	return _swig_wrap_LatLongDistancePostingSource_get_docid(_swig_base)
}

func _swig_wrap_LatLongDistancePostingSource_at_end(SwigcptrLatLongDistancePostingSource) bool

func (_swig_base SwigcptrLatLongDistancePostingSource) At_end() bool {
	return _swig_wrap_LatLongDistancePostingSource_at_end(_swig_base)
}

func (p SwigcptrLatLongDistancePostingSource) SwigIsValuePostingSource() {
}

func (p SwigcptrLatLongDistancePostingSource) SwigGetValuePostingSource() ValuePostingSource {
	return SwigcptrValuePostingSource(p.Swigcptr())
}

func (p SwigcptrLatLongDistancePostingSource) SwigIsPostingSource() {
}

func (p SwigcptrLatLongDistancePostingSource) SwigGetPostingSource() PostingSource {
	return SwigcptrPostingSource(p.Swigcptr())
}

type LatLongDistancePostingSource interface {
	Swigcptr() uintptr
	SwigIsLatLongDistancePostingSource()
	Get_termfreq_min() uint
	Get_termfreq_est() uint
	Get_termfreq_max() uint
	Get_maxweight() float64
	Get_docid() uint
	At_end() bool
	SwigIsValuePostingSource()
	SwigGetValuePostingSource() ValuePostingSource
	SwigIsPostingSource()
	SwigGetPostingSource() PostingSource
}

type SwigcptrLatLongDistanceKeyMaker uintptr

func (p SwigcptrLatLongDistanceKeyMaker) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrLatLongDistanceKeyMaker) SwigIsLatLongDistanceKeyMaker() {
}

func _swig_wrap_new_LatLongDistanceKeyMaker__SWIG_0(uint, uintptr, uintptr, float64) SwigcptrLatLongDistanceKeyMaker

func NewLatLongDistanceKeyMaker__SWIG_0(arg1 uint, arg2 LatLongCoords, arg3 LatLongMetric, arg4 float64) LatLongDistanceKeyMaker {
	return _swig_wrap_new_LatLongDistanceKeyMaker__SWIG_0(arg1, arg2.Swigcptr(), arg3.Swigcptr(), arg4)
}

func _swig_wrap_new_LatLongDistanceKeyMaker__SWIG_1(uint, uintptr, uintptr) SwigcptrLatLongDistanceKeyMaker

func NewLatLongDistanceKeyMaker__SWIG_1(arg1 uint, arg2 LatLongCoords, arg3 LatLongMetric) LatLongDistanceKeyMaker {
	return _swig_wrap_new_LatLongDistanceKeyMaker__SWIG_1(arg1, arg2.Swigcptr(), arg3.Swigcptr())
}

func _swig_wrap_new_LatLongDistanceKeyMaker__SWIG_2(uint, uintptr, uintptr, float64) SwigcptrLatLongDistanceKeyMaker

func NewLatLongDistanceKeyMaker__SWIG_2(arg1 uint, arg2 LatLongCoord, arg3 LatLongMetric, arg4 float64) LatLongDistanceKeyMaker {
	return _swig_wrap_new_LatLongDistanceKeyMaker__SWIG_2(arg1, arg2.Swigcptr(), arg3.Swigcptr(), arg4)
}

func _swig_wrap_new_LatLongDistanceKeyMaker__SWIG_3(uint, uintptr, uintptr) SwigcptrLatLongDistanceKeyMaker

func NewLatLongDistanceKeyMaker__SWIG_3(arg1 uint, arg2 LatLongCoord, arg3 LatLongMetric) LatLongDistanceKeyMaker {
	return _swig_wrap_new_LatLongDistanceKeyMaker__SWIG_3(arg1, arg2.Swigcptr(), arg3.Swigcptr())
}

func NewLatLongDistanceKeyMaker(a ...interface{}) LatLongDistanceKeyMaker {
	argc := len(a)
	if argc == 3 {
		if _, ok := a[1].(SwigcptrLatLongCoords); !ok {
			goto check_1
		}
		return NewLatLongDistanceKeyMaker__SWIG_1(a[0].(uint), a[1].(LatLongCoords), a[2].(LatLongMetric))
	}
check_1:
	if argc == 3 {
		return NewLatLongDistanceKeyMaker__SWIG_3(a[0].(uint), a[1].(LatLongCoord), a[2].(LatLongMetric))
	}
	if argc == 4 {
		if _, ok := a[1].(SwigcptrLatLongCoord); !ok {
			goto check_3
		}
		return NewLatLongDistanceKeyMaker__SWIG_2(a[0].(uint), a[1].(LatLongCoord), a[2].(LatLongMetric), a[3].(float64))
	}
check_3:
	if argc == 4 {
		return NewLatLongDistanceKeyMaker__SWIG_0(a[0].(uint), a[1].(LatLongCoords), a[2].(LatLongMetric), a[3].(float64))
	}
	panic("No match for overloaded function call")
}

func _swig_wrap_delete_LatLongDistanceKeyMaker(uintptr)

func DeleteLatLongDistanceKeyMaker(arg1 LatLongDistanceKeyMaker) {
	_swig_wrap_delete_LatLongDistanceKeyMaker(arg1.Swigcptr())
}

func _swig_wrap_LatLongDistanceKeyMaker_Apply(SwigcptrLatLongDistanceKeyMaker, uintptr) string

func (_swig_base SwigcptrLatLongDistanceKeyMaker) Apply(arg1 Document) string {
	return _swig_wrap_LatLongDistanceKeyMaker_Apply(_swig_base, arg1.Swigcptr())
}

func (p SwigcptrLatLongDistanceKeyMaker) SwigIsKeyMaker() {
}

func (p SwigcptrLatLongDistanceKeyMaker) SwigGetKeyMaker() KeyMaker {
	return SwigcptrKeyMaker(p.Swigcptr())
}

type LatLongDistanceKeyMaker interface {
	Swigcptr() uintptr
	SwigIsLatLongDistanceKeyMaker()
	Apply(arg1 Document) string
	SwigIsKeyMaker()
	SwigGetKeyMaker() KeyMaker
}

func _swig_getDB_CREATE() int
var DB_CREATE int = _swig_getDB_CREATE()
func _swig_getDB_CREATE_OR_OPEN() int
var DB_CREATE_OR_OPEN int = _swig_getDB_CREATE_OR_OPEN()
func _swig_getDB_CREATE_OR_OVERWRITE() int
var DB_CREATE_OR_OVERWRITE int = _swig_getDB_CREATE_OR_OVERWRITE()
func _swig_getDB_OPEN() int
var DB_OPEN int = _swig_getDB_OPEN()
func _swig_getDBCHECK_SHORT_TREE() int
var DBCHECK_SHORT_TREE int = _swig_getDBCHECK_SHORT_TREE()
func _swig_getDBCHECK_FULL_TREE() int
var DBCHECK_FULL_TREE int = _swig_getDBCHECK_FULL_TREE()
func _swig_getDBCHECK_SHOW_BITMAP() int
var DBCHECK_SHOW_BITMAP int = _swig_getDBCHECK_SHOW_BITMAP()
func _swig_getDBCHECK_SHOW_STATS() int
var DBCHECK_SHOW_STATS int = _swig_getDBCHECK_SHOW_STATS()
func _swig_getDBCHECK_FIX() int
var DBCHECK_FIX int = _swig_getDBCHECK_FIX()
type SwigcptrDatabase uintptr

func (p SwigcptrDatabase) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrDatabase) SwigIsDatabase() {
}

func _swig_wrap_Database_add_database(SwigcptrDatabase, uintptr)

func (arg1 SwigcptrDatabase) Add_database(arg2 Database) {
	_swig_wrap_Database_add_database(arg1, arg2.Swigcptr())
}

func _swig_wrap_new_Database__SWIG_0() SwigcptrDatabase

func NewDatabase__SWIG_0() Database {
	return _swig_wrap_new_Database__SWIG_0()
}

func _swig_wrap_new_Database__SWIG_1(string) SwigcptrDatabase

func NewDatabase__SWIG_1(arg1 string) Database {
	return _swig_wrap_new_Database__SWIG_1(arg1)
}

func NewDatabase(a ...interface{}) Database {
	argc := len(a)
	if argc == 0 {
		return NewDatabase__SWIG_0()
	}
	if argc == 1 {
		return NewDatabase__SWIG_1(a[0].(string))
	}
	panic("No match for overloaded function call")
}

func _swig_wrap_delete_Database(uintptr)

func DeleteDatabase(arg1 Database) {
	_swig_wrap_delete_Database(arg1.Swigcptr())
}

func _swig_wrap_Database_reopen(SwigcptrDatabase) bool

func (arg1 SwigcptrDatabase) Reopen() bool {
	return _swig_wrap_Database_reopen(arg1)
}

func _swig_wrap_Database_close(SwigcptrDatabase)

func (arg1 SwigcptrDatabase) Close() {
	_swig_wrap_Database_close(arg1)
}

func _swig_wrap_Database_get_description(SwigcptrDatabase) string

func (arg1 SwigcptrDatabase) Get_description() string {
	return _swig_wrap_Database_get_description(arg1)
}

func _swig_wrap_Database_postlist_begin(SwigcptrDatabase, string) SwigcptrPostingIterator

func (arg1 SwigcptrDatabase) Postlist_begin(arg2 string) PostingIterator {
	return _swig_wrap_Database_postlist_begin(arg1, arg2)
}

func _swig_wrap_Database_postlist_end(SwigcptrDatabase, string) SwigcptrPostingIterator

func (arg1 SwigcptrDatabase) Postlist_end(arg2 string) PostingIterator {
	return _swig_wrap_Database_postlist_end(arg1, arg2)
}

func _swig_wrap_Database_termlist_begin(SwigcptrDatabase, uint) SwigcptrTermIterator

func (arg1 SwigcptrDatabase) Termlist_begin(arg2 uint) TermIterator {
	return _swig_wrap_Database_termlist_begin(arg1, arg2)
}

func _swig_wrap_Database_termlist_end(SwigcptrDatabase, uint) SwigcptrTermIterator

func (arg1 SwigcptrDatabase) Termlist_end(arg2 uint) TermIterator {
	return _swig_wrap_Database_termlist_end(arg1, arg2)
}

func _swig_wrap_Database_has_positions(SwigcptrDatabase) bool

func (arg1 SwigcptrDatabase) Has_positions() bool {
	return _swig_wrap_Database_has_positions(arg1)
}

func _swig_wrap_Database_positionlist_begin(SwigcptrDatabase, uint, string) SwigcptrPositionIterator

func (arg1 SwigcptrDatabase) Positionlist_begin(arg2 uint, arg3 string) PositionIterator {
	return _swig_wrap_Database_positionlist_begin(arg1, arg2, arg3)
}

func _swig_wrap_Database_positionlist_end(SwigcptrDatabase, uint, string) SwigcptrPositionIterator

func (arg1 SwigcptrDatabase) Positionlist_end(arg2 uint, arg3 string) PositionIterator {
	return _swig_wrap_Database_positionlist_end(arg1, arg2, arg3)
}

func _swig_wrap_Database_allterms_begin__SWIG_0(SwigcptrDatabase) SwigcptrTermIterator

func (arg1 SwigcptrDatabase) Allterms_begin__SWIG_0() TermIterator {
	return _swig_wrap_Database_allterms_begin__SWIG_0(arg1)
}

func _swig_wrap_Database_allterms_end__SWIG_0(SwigcptrDatabase) SwigcptrTermIterator

func (arg1 SwigcptrDatabase) Allterms_end__SWIG_0() TermIterator {
	return _swig_wrap_Database_allterms_end__SWIG_0(arg1)
}

func _swig_wrap_Database_allterms_begin__SWIG_1(SwigcptrDatabase, string) SwigcptrTermIterator

func (arg1 SwigcptrDatabase) Allterms_begin__SWIG_1(arg2 string) TermIterator {
	return _swig_wrap_Database_allterms_begin__SWIG_1(arg1, arg2)
}

func (p SwigcptrDatabase) Allterms_begin(a ...interface{}) TermIterator {
	argc := len(a)
	if argc == 0 {
		return p.Allterms_begin__SWIG_0()
	}
	if argc == 1 {
		return p.Allterms_begin__SWIG_1(a[0].(string))
	}
	panic("No match for overloaded function call")
}

func _swig_wrap_Database_allterms_end__SWIG_1(SwigcptrDatabase, string) SwigcptrTermIterator

func (arg1 SwigcptrDatabase) Allterms_end__SWIG_1(arg2 string) TermIterator {
	return _swig_wrap_Database_allterms_end__SWIG_1(arg1, arg2)
}

func (p SwigcptrDatabase) Allterms_end(a ...interface{}) TermIterator {
	argc := len(a)
	if argc == 0 {
		return p.Allterms_end__SWIG_0()
	}
	if argc == 1 {
		return p.Allterms_end__SWIG_1(a[0].(string))
	}
	panic("No match for overloaded function call")
}

func _swig_wrap_Database_get_doccount(SwigcptrDatabase) uint

func (arg1 SwigcptrDatabase) Get_doccount() uint {
	return _swig_wrap_Database_get_doccount(arg1)
}

func _swig_wrap_Database_get_lastdocid(SwigcptrDatabase) uint

func (arg1 SwigcptrDatabase) Get_lastdocid() uint {
	return _swig_wrap_Database_get_lastdocid(arg1)
}

func _swig_wrap_Database_get_avlength(SwigcptrDatabase) float64

func (arg1 SwigcptrDatabase) Get_avlength() float64 {
	return _swig_wrap_Database_get_avlength(arg1)
}

func _swig_wrap_Database_get_termfreq(SwigcptrDatabase, string) uint

func (arg1 SwigcptrDatabase) Get_termfreq(arg2 string) uint {
	return _swig_wrap_Database_get_termfreq(arg1, arg2)
}

func _swig_wrap_Database_term_exists(SwigcptrDatabase, string) bool

func (arg1 SwigcptrDatabase) Term_exists(arg2 string) bool {
	return _swig_wrap_Database_term_exists(arg1, arg2)
}

func _swig_wrap_Database_get_collection_freq(SwigcptrDatabase, string) uint

func (arg1 SwigcptrDatabase) Get_collection_freq(arg2 string) uint {
	return _swig_wrap_Database_get_collection_freq(arg1, arg2)
}

func _swig_wrap_Database_get_value_freq(SwigcptrDatabase, uint) uint

func (arg1 SwigcptrDatabase) Get_value_freq(arg2 uint) uint {
	return _swig_wrap_Database_get_value_freq(arg1, arg2)
}

func _swig_wrap_Database_get_value_lower_bound(SwigcptrDatabase, uint) string

func (arg1 SwigcptrDatabase) Get_value_lower_bound(arg2 uint) string {
	return _swig_wrap_Database_get_value_lower_bound(arg1, arg2)
}

func _swig_wrap_Database_get_value_upper_bound(SwigcptrDatabase, uint) string

func (arg1 SwigcptrDatabase) Get_value_upper_bound(arg2 uint) string {
	return _swig_wrap_Database_get_value_upper_bound(arg1, arg2)
}

func _swig_wrap_Database_get_doclength_lower_bound(SwigcptrDatabase) uint

func (arg1 SwigcptrDatabase) Get_doclength_lower_bound() uint {
	return _swig_wrap_Database_get_doclength_lower_bound(arg1)
}

func _swig_wrap_Database_get_doclength_upper_bound(SwigcptrDatabase) uint

func (arg1 SwigcptrDatabase) Get_doclength_upper_bound() uint {
	return _swig_wrap_Database_get_doclength_upper_bound(arg1)
}

func _swig_wrap_Database_get_wdf_upper_bound(SwigcptrDatabase, string) uint

func (arg1 SwigcptrDatabase) Get_wdf_upper_bound(arg2 string) uint {
	return _swig_wrap_Database_get_wdf_upper_bound(arg1, arg2)
}

func _swig_wrap_Database_valuestream_begin(SwigcptrDatabase, uint) SwigcptrValueIterator

func (arg1 SwigcptrDatabase) Valuestream_begin(arg2 uint) ValueIterator {
	return _swig_wrap_Database_valuestream_begin(arg1, arg2)
}

func _swig_wrap_Database_valuestream_end(SwigcptrDatabase, uint) SwigcptrValueIterator

func (arg1 SwigcptrDatabase) Valuestream_end(arg2 uint) ValueIterator {
	return _swig_wrap_Database_valuestream_end(arg1, arg2)
}

func _swig_wrap_Database_get_doclength(SwigcptrDatabase, uint) uint

func (arg1 SwigcptrDatabase) Get_doclength(arg2 uint) uint {
	return _swig_wrap_Database_get_doclength(arg1, arg2)
}

func _swig_wrap_Database_keep_alive(SwigcptrDatabase)

func (arg1 SwigcptrDatabase) Keep_alive() {
	_swig_wrap_Database_keep_alive(arg1)
}

func _swig_wrap_Database_get_document(SwigcptrDatabase, uint) SwigcptrDocument

func (arg1 SwigcptrDatabase) Get_document(arg2 uint) Document {
	return _swig_wrap_Database_get_document(arg1, arg2)
}

func _swig_wrap_Database_get_spelling_suggestion__SWIG_0(SwigcptrDatabase, string, uint) string

func (arg1 SwigcptrDatabase) Get_spelling_suggestion__SWIG_0(arg2 string, arg3 uint) string {
	return _swig_wrap_Database_get_spelling_suggestion__SWIG_0(arg1, arg2, arg3)
}

func _swig_wrap_Database_get_spelling_suggestion__SWIG_1(SwigcptrDatabase, string) string

func (arg1 SwigcptrDatabase) Get_spelling_suggestion__SWIG_1(arg2 string) string {
	return _swig_wrap_Database_get_spelling_suggestion__SWIG_1(arg1, arg2)
}

func (p SwigcptrDatabase) Get_spelling_suggestion(a ...interface{}) string {
	argc := len(a)
	if argc == 1 {
		return p.Get_spelling_suggestion__SWIG_1(a[0].(string))
	}
	if argc == 2 {
		return p.Get_spelling_suggestion__SWIG_0(a[0].(string), a[1].(uint))
	}
	panic("No match for overloaded function call")
}

func _swig_wrap_Database_spellings_begin(SwigcptrDatabase) SwigcptrTermIterator

func (arg1 SwigcptrDatabase) Spellings_begin() TermIterator {
	return _swig_wrap_Database_spellings_begin(arg1)
}

func _swig_wrap_Database_spellings_end(SwigcptrDatabase) SwigcptrTermIterator

func (arg1 SwigcptrDatabase) Spellings_end() TermIterator {
	return _swig_wrap_Database_spellings_end(arg1)
}

func _swig_wrap_Database_synonyms_begin(SwigcptrDatabase, string) SwigcptrTermIterator

func (arg1 SwigcptrDatabase) Synonyms_begin(arg2 string) TermIterator {
	return _swig_wrap_Database_synonyms_begin(arg1, arg2)
}

func _swig_wrap_Database_synonyms_end(SwigcptrDatabase, string) SwigcptrTermIterator

func (arg1 SwigcptrDatabase) Synonyms_end(arg2 string) TermIterator {
	return _swig_wrap_Database_synonyms_end(arg1, arg2)
}

func _swig_wrap_Database_synonym_keys_begin__SWIG_0(SwigcptrDatabase, string) SwigcptrTermIterator

func (arg1 SwigcptrDatabase) Synonym_keys_begin__SWIG_0(arg2 string) TermIterator {
	return _swig_wrap_Database_synonym_keys_begin__SWIG_0(arg1, arg2)
}

func _swig_wrap_Database_synonym_keys_begin__SWIG_1(SwigcptrDatabase) SwigcptrTermIterator

func (arg1 SwigcptrDatabase) Synonym_keys_begin__SWIG_1() TermIterator {
	return _swig_wrap_Database_synonym_keys_begin__SWIG_1(arg1)
}

func (p SwigcptrDatabase) Synonym_keys_begin(a ...interface{}) TermIterator {
	argc := len(a)
	if argc == 0 {
		return p.Synonym_keys_begin__SWIG_1()
	}
	if argc == 1 {
		return p.Synonym_keys_begin__SWIG_0(a[0].(string))
	}
	panic("No match for overloaded function call")
}

func _swig_wrap_Database_synonym_keys_end__SWIG_0(SwigcptrDatabase, string) SwigcptrTermIterator

func (arg1 SwigcptrDatabase) Synonym_keys_end__SWIG_0(arg2 string) TermIterator {
	return _swig_wrap_Database_synonym_keys_end__SWIG_0(arg1, arg2)
}

func _swig_wrap_Database_synonym_keys_end__SWIG_1(SwigcptrDatabase) SwigcptrTermIterator

func (arg1 SwigcptrDatabase) Synonym_keys_end__SWIG_1() TermIterator {
	return _swig_wrap_Database_synonym_keys_end__SWIG_1(arg1)
}

func (p SwigcptrDatabase) Synonym_keys_end(a ...interface{}) TermIterator {
	argc := len(a)
	if argc == 0 {
		return p.Synonym_keys_end__SWIG_1()
	}
	if argc == 1 {
		return p.Synonym_keys_end__SWIG_0(a[0].(string))
	}
	panic("No match for overloaded function call")
}

func _swig_wrap_Database_get_metadata(SwigcptrDatabase, string) string

func (arg1 SwigcptrDatabase) Get_metadata(arg2 string) string {
	return _swig_wrap_Database_get_metadata(arg1, arg2)
}

func _swig_wrap_Database_metadata_keys_begin__SWIG_0(SwigcptrDatabase, string) SwigcptrTermIterator

func (arg1 SwigcptrDatabase) Metadata_keys_begin__SWIG_0(arg2 string) TermIterator {
	return _swig_wrap_Database_metadata_keys_begin__SWIG_0(arg1, arg2)
}

func _swig_wrap_Database_metadata_keys_begin__SWIG_1(SwigcptrDatabase) SwigcptrTermIterator

func (arg1 SwigcptrDatabase) Metadata_keys_begin__SWIG_1() TermIterator {
	return _swig_wrap_Database_metadata_keys_begin__SWIG_1(arg1)
}

func (p SwigcptrDatabase) Metadata_keys_begin(a ...interface{}) TermIterator {
	argc := len(a)
	if argc == 0 {
		return p.Metadata_keys_begin__SWIG_1()
	}
	if argc == 1 {
		return p.Metadata_keys_begin__SWIG_0(a[0].(string))
	}
	panic("No match for overloaded function call")
}

func _swig_wrap_Database_metadata_keys_end__SWIG_0(SwigcptrDatabase, string) SwigcptrTermIterator

func (arg1 SwigcptrDatabase) Metadata_keys_end__SWIG_0(arg2 string) TermIterator {
	return _swig_wrap_Database_metadata_keys_end__SWIG_0(arg1, arg2)
}

func _swig_wrap_Database_metadata_keys_end__SWIG_1(SwigcptrDatabase) SwigcptrTermIterator

func (arg1 SwigcptrDatabase) Metadata_keys_end__SWIG_1() TermIterator {
	return _swig_wrap_Database_metadata_keys_end__SWIG_1(arg1)
}

func (p SwigcptrDatabase) Metadata_keys_end(a ...interface{}) TermIterator {
	argc := len(a)
	if argc == 0 {
		return p.Metadata_keys_end__SWIG_1()
	}
	if argc == 1 {
		return p.Metadata_keys_end__SWIG_0(a[0].(string))
	}
	panic("No match for overloaded function call")
}

func _swig_wrap_Database_get_uuid(SwigcptrDatabase) string

func (arg1 SwigcptrDatabase) Get_uuid() string {
	return _swig_wrap_Database_get_uuid(arg1)
}

func DatabaseCheck(string, int) int
type Database interface {
	Swigcptr() uintptr
	SwigIsDatabase()
	Add_database(arg2 Database)
	Reopen() bool
	Close()
	Get_description() string
	Postlist_begin(arg2 string) PostingIterator
	Postlist_end(arg2 string) PostingIterator
	Termlist_begin(arg2 uint) TermIterator
	Termlist_end(arg2 uint) TermIterator
	Has_positions() bool
	Positionlist_begin(arg2 uint, arg3 string) PositionIterator
	Positionlist_end(arg2 uint, arg3 string) PositionIterator
	Allterms_begin(a ...interface{}) TermIterator
	Allterms_end(a ...interface{}) TermIterator
	Get_doccount() uint
	Get_lastdocid() uint
	Get_avlength() float64
	Get_termfreq(arg2 string) uint
	Term_exists(arg2 string) bool
	Get_collection_freq(arg2 string) uint
	Get_value_freq(arg2 uint) uint
	Get_value_lower_bound(arg2 uint) string
	Get_value_upper_bound(arg2 uint) string
	Get_doclength_lower_bound() uint
	Get_doclength_upper_bound() uint
	Get_wdf_upper_bound(arg2 string) uint
	Valuestream_begin(arg2 uint) ValueIterator
	Valuestream_end(arg2 uint) ValueIterator
	Get_doclength(arg2 uint) uint
	Keep_alive()
	Get_document(arg2 uint) Document
	Get_spelling_suggestion(a ...interface{}) string
	Spellings_begin() TermIterator
	Spellings_end() TermIterator
	Synonyms_begin(arg2 string) TermIterator
	Synonyms_end(arg2 string) TermIterator
	Synonym_keys_begin(a ...interface{}) TermIterator
	Synonym_keys_end(a ...interface{}) TermIterator
	Get_metadata(arg2 string) string
	Metadata_keys_begin(a ...interface{}) TermIterator
	Metadata_keys_end(a ...interface{}) TermIterator
	Get_uuid() string
}

type SwigcptrWritableDatabase uintptr

func (p SwigcptrWritableDatabase) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrWritableDatabase) SwigIsWritableDatabase() {
}

func _swig_wrap_delete_WritableDatabase(uintptr)

func DeleteWritableDatabase(arg1 WritableDatabase) {
	_swig_wrap_delete_WritableDatabase(arg1.Swigcptr())
}

func _swig_wrap_new_WritableDatabase__SWIG_0() SwigcptrWritableDatabase

func NewWritableDatabase__SWIG_0() WritableDatabase {
	return _swig_wrap_new_WritableDatabase__SWIG_0()
}

func _swig_wrap_new_WritableDatabase__SWIG_1(string, int) SwigcptrWritableDatabase

func NewWritableDatabase__SWIG_1(arg1 string, arg2 int) WritableDatabase {
	return _swig_wrap_new_WritableDatabase__SWIG_1(arg1, arg2)
}

func NewWritableDatabase(a ...interface{}) WritableDatabase {
	argc := len(a)
	if argc == 0 {
		return NewWritableDatabase__SWIG_0()
	}
	if argc == 2 {
		return NewWritableDatabase__SWIG_1(a[0].(string), a[1].(int))
	}
	panic("No match for overloaded function call")
}

func _swig_wrap_WritableDatabase_commit(SwigcptrWritableDatabase)

func (arg1 SwigcptrWritableDatabase) Commit() {
	_swig_wrap_WritableDatabase_commit(arg1)
}

func _swig_wrap_WritableDatabase_flush(SwigcptrWritableDatabase)

func (arg1 SwigcptrWritableDatabase) Flush() {
	_swig_wrap_WritableDatabase_flush(arg1)
}

func _swig_wrap_WritableDatabase_begin_transaction__SWIG_0(SwigcptrWritableDatabase, bool)

func (arg1 SwigcptrWritableDatabase) Begin_transaction__SWIG_0(arg2 bool) {
	_swig_wrap_WritableDatabase_begin_transaction__SWIG_0(arg1, arg2)
}

func _swig_wrap_WritableDatabase_begin_transaction__SWIG_1(SwigcptrWritableDatabase)

func (arg1 SwigcptrWritableDatabase) Begin_transaction__SWIG_1() {
	_swig_wrap_WritableDatabase_begin_transaction__SWIG_1(arg1)
}

func (p SwigcptrWritableDatabase) Begin_transaction(a ...interface{}) {
	argc := len(a)
	if argc == 0 {
		p.Begin_transaction__SWIG_1()
		return
	}
	if argc == 1 {
		p.Begin_transaction__SWIG_0(a[0].(bool))
		return
	}
	panic("No match for overloaded function call")
}

func _swig_wrap_WritableDatabase_commit_transaction(SwigcptrWritableDatabase)

func (arg1 SwigcptrWritableDatabase) Commit_transaction() {
	_swig_wrap_WritableDatabase_commit_transaction(arg1)
}

func _swig_wrap_WritableDatabase_cancel_transaction(SwigcptrWritableDatabase)

func (arg1 SwigcptrWritableDatabase) Cancel_transaction() {
	_swig_wrap_WritableDatabase_cancel_transaction(arg1)
}

func _swig_wrap_WritableDatabase_add_document(SwigcptrWritableDatabase, uintptr) uint

func (arg1 SwigcptrWritableDatabase) Add_document(arg2 Document) uint {
	return _swig_wrap_WritableDatabase_add_document(arg1, arg2.Swigcptr())
}

func _swig_wrap_WritableDatabase_delete_document__SWIG_0(SwigcptrWritableDatabase, uint)

func (arg1 SwigcptrWritableDatabase) Delete_document__SWIG_0(arg2 uint) {
	_swig_wrap_WritableDatabase_delete_document__SWIG_0(arg1, arg2)
}

func _swig_wrap_WritableDatabase_delete_document__SWIG_1(SwigcptrWritableDatabase, string)

func (arg1 SwigcptrWritableDatabase) Delete_document__SWIG_1(arg2 string) {
	_swig_wrap_WritableDatabase_delete_document__SWIG_1(arg1, arg2)
}

func (p SwigcptrWritableDatabase) Delete_document(a ...interface{}) {
	argc := len(a)
	if argc == 1 {
		if _, ok := a[0].(string); !ok {
			goto check_1
		}
		p.Delete_document__SWIG_1(a[0].(string))
		return
	}
check_1:
	if argc == 1 {
		p.Delete_document__SWIG_0(a[0].(uint))
		return
	}
	panic("No match for overloaded function call")
}

func _swig_wrap_WritableDatabase_replace_document__SWIG_0(SwigcptrWritableDatabase, uint, uintptr)

func (arg1 SwigcptrWritableDatabase) Replace_document__SWIG_0(arg2 uint, arg3 Document) {
	_swig_wrap_WritableDatabase_replace_document__SWIG_0(arg1, arg2, arg3.Swigcptr())
}

func _swig_wrap_WritableDatabase_replace_document__SWIG_1(SwigcptrWritableDatabase, string, uintptr) uint

func (arg1 SwigcptrWritableDatabase) Replace_document__SWIG_1(arg2 string, arg3 Document) uint {
	return _swig_wrap_WritableDatabase_replace_document__SWIG_1(arg1, arg2, arg3.Swigcptr())
}

func (p SwigcptrWritableDatabase) Replace_document(a ...interface{}) interface{} {
	argc := len(a)
	if argc == 2 {
		if _, ok := a[0].(string); !ok {
			goto check_1
		}
		return p.Replace_document__SWIG_1(a[0].(string), a[1].(Document))
	}
check_1:
	if argc == 2 {
		p.Replace_document__SWIG_0(a[0].(uint), a[1].(Document))
		return 0
	}
	panic("No match for overloaded function call")
}

func _swig_wrap_WritableDatabase_add_spelling__SWIG_0(SwigcptrWritableDatabase, string, uint)

func (arg1 SwigcptrWritableDatabase) Add_spelling__SWIG_0(arg2 string, arg3 uint) {
	_swig_wrap_WritableDatabase_add_spelling__SWIG_0(arg1, arg2, arg3)
}

func _swig_wrap_WritableDatabase_add_spelling__SWIG_1(SwigcptrWritableDatabase, string)

func (arg1 SwigcptrWritableDatabase) Add_spelling__SWIG_1(arg2 string) {
	_swig_wrap_WritableDatabase_add_spelling__SWIG_1(arg1, arg2)
}

func (p SwigcptrWritableDatabase) Add_spelling(a ...interface{}) {
	argc := len(a)
	if argc == 1 {
		p.Add_spelling__SWIG_1(a[0].(string))
		return
	}
	if argc == 2 {
		p.Add_spelling__SWIG_0(a[0].(string), a[1].(uint))
		return
	}
	panic("No match for overloaded function call")
}

func _swig_wrap_WritableDatabase_remove_spelling__SWIG_0(SwigcptrWritableDatabase, string, uint)

func (arg1 SwigcptrWritableDatabase) Remove_spelling__SWIG_0(arg2 string, arg3 uint) {
	_swig_wrap_WritableDatabase_remove_spelling__SWIG_0(arg1, arg2, arg3)
}

func _swig_wrap_WritableDatabase_remove_spelling__SWIG_1(SwigcptrWritableDatabase, string)

func (arg1 SwigcptrWritableDatabase) Remove_spelling__SWIG_1(arg2 string) {
	_swig_wrap_WritableDatabase_remove_spelling__SWIG_1(arg1, arg2)
}

func (p SwigcptrWritableDatabase) Remove_spelling(a ...interface{}) {
	argc := len(a)
	if argc == 1 {
		p.Remove_spelling__SWIG_1(a[0].(string))
		return
	}
	if argc == 2 {
		p.Remove_spelling__SWIG_0(a[0].(string), a[1].(uint))
		return
	}
	panic("No match for overloaded function call")
}

func _swig_wrap_WritableDatabase_add_synonym(SwigcptrWritableDatabase, string, string)

func (arg1 SwigcptrWritableDatabase) Add_synonym(arg2 string, arg3 string) {
	_swig_wrap_WritableDatabase_add_synonym(arg1, arg2, arg3)
}

func _swig_wrap_WritableDatabase_remove_synonym(SwigcptrWritableDatabase, string, string)

func (arg1 SwigcptrWritableDatabase) Remove_synonym(arg2 string, arg3 string) {
	_swig_wrap_WritableDatabase_remove_synonym(arg1, arg2, arg3)
}

func _swig_wrap_WritableDatabase_clear_synonyms(SwigcptrWritableDatabase, string)

func (arg1 SwigcptrWritableDatabase) Clear_synonyms(arg2 string) {
	_swig_wrap_WritableDatabase_clear_synonyms(arg1, arg2)
}

func _swig_wrap_WritableDatabase_set_metadata(SwigcptrWritableDatabase, string, string)

func (arg1 SwigcptrWritableDatabase) Set_metadata(arg2 string, arg3 string) {
	_swig_wrap_WritableDatabase_set_metadata(arg1, arg2, arg3)
}

func _swig_wrap_WritableDatabase_add_database(SwigcptrWritableDatabase, uintptr)

func (_swig_base SwigcptrWritableDatabase) Add_database(arg1 Database) {
	_swig_wrap_WritableDatabase_add_database(_swig_base, arg1.Swigcptr())
}

func _swig_wrap_WritableDatabase_reopen(SwigcptrWritableDatabase) bool

func (_swig_base SwigcptrWritableDatabase) Reopen() bool {
	return _swig_wrap_WritableDatabase_reopen(_swig_base)
}

func _swig_wrap_WritableDatabase_close(SwigcptrWritableDatabase)

func (_swig_base SwigcptrWritableDatabase) Close() {
	_swig_wrap_WritableDatabase_close(_swig_base)
}

func _swig_wrap_WritableDatabase_postlist_begin(SwigcptrWritableDatabase, string) SwigcptrPostingIterator

func (_swig_base SwigcptrWritableDatabase) Postlist_begin(arg1 string) PostingIterator {
	return _swig_wrap_WritableDatabase_postlist_begin(_swig_base, arg1)
}

func _swig_wrap_WritableDatabase_postlist_end(SwigcptrWritableDatabase, string) SwigcptrPostingIterator

func (_swig_base SwigcptrWritableDatabase) Postlist_end(arg1 string) PostingIterator {
	return _swig_wrap_WritableDatabase_postlist_end(_swig_base, arg1)
}

func _swig_wrap_WritableDatabase_termlist_begin(SwigcptrWritableDatabase, uint) SwigcptrTermIterator

func (_swig_base SwigcptrWritableDatabase) Termlist_begin(arg1 uint) TermIterator {
	return _swig_wrap_WritableDatabase_termlist_begin(_swig_base, arg1)
}

func _swig_wrap_WritableDatabase_termlist_end(SwigcptrWritableDatabase, uint) SwigcptrTermIterator

func (_swig_base SwigcptrWritableDatabase) Termlist_end(arg1 uint) TermIterator {
	return _swig_wrap_WritableDatabase_termlist_end(_swig_base, arg1)
}

func _swig_wrap_WritableDatabase_has_positions(SwigcptrWritableDatabase) bool

func (_swig_base SwigcptrWritableDatabase) Has_positions() bool {
	return _swig_wrap_WritableDatabase_has_positions(_swig_base)
}

func _swig_wrap_WritableDatabase_positionlist_begin(SwigcptrWritableDatabase, uint, string) SwigcptrPositionIterator

func (_swig_base SwigcptrWritableDatabase) Positionlist_begin(arg1 uint, arg2 string) PositionIterator {
	return _swig_wrap_WritableDatabase_positionlist_begin(_swig_base, arg1, arg2)
}

func _swig_wrap_WritableDatabase_positionlist_end(SwigcptrWritableDatabase, uint, string) SwigcptrPositionIterator

func (_swig_base SwigcptrWritableDatabase) Positionlist_end(arg1 uint, arg2 string) PositionIterator {
	return _swig_wrap_WritableDatabase_positionlist_end(_swig_base, arg1, arg2)
}

func _swig_wrap_WritableDatabase_allterms_begin__SWIG_0(SwigcptrWritableDatabase) SwigcptrTermIterator

func (_swig_base SwigcptrWritableDatabase) Allterms_begin__SWIG_0() TermIterator {
	return _swig_wrap_WritableDatabase_allterms_begin__SWIG_0(_swig_base)
}

func _swig_wrap_WritableDatabase_allterms_begin__SWIG_1(SwigcptrWritableDatabase, string) SwigcptrTermIterator

func (_swig_base SwigcptrWritableDatabase) Allterms_begin__SWIG_1(arg1 string) TermIterator {
	return _swig_wrap_WritableDatabase_allterms_begin__SWIG_1(_swig_base, arg1)
}

func (p SwigcptrWritableDatabase) Allterms_begin(a ...interface{}) TermIterator {
	argc := len(a)
	if argc == 0 {
		return p.Allterms_begin__SWIG_0()
	}
	if argc == 1 {
		return p.Allterms_begin__SWIG_1(a[0].(string))
	}
	panic("No match for overloaded function call")
}

func _swig_wrap_WritableDatabase_allterms_end__SWIG_0(SwigcptrWritableDatabase) SwigcptrTermIterator

func (_swig_base SwigcptrWritableDatabase) Allterms_end__SWIG_0() TermIterator {
	return _swig_wrap_WritableDatabase_allterms_end__SWIG_0(_swig_base)
}

func _swig_wrap_WritableDatabase_allterms_end__SWIG_1(SwigcptrWritableDatabase, string) SwigcptrTermIterator

func (_swig_base SwigcptrWritableDatabase) Allterms_end__SWIG_1(arg1 string) TermIterator {
	return _swig_wrap_WritableDatabase_allterms_end__SWIG_1(_swig_base, arg1)
}

func (p SwigcptrWritableDatabase) Allterms_end(a ...interface{}) TermIterator {
	argc := len(a)
	if argc == 0 {
		return p.Allterms_end__SWIG_0()
	}
	if argc == 1 {
		return p.Allterms_end__SWIG_1(a[0].(string))
	}
	panic("No match for overloaded function call")
}

func _swig_wrap_WritableDatabase_get_doccount(SwigcptrWritableDatabase) uint

func (_swig_base SwigcptrWritableDatabase) Get_doccount() uint {
	return _swig_wrap_WritableDatabase_get_doccount(_swig_base)
}

func _swig_wrap_WritableDatabase_get_lastdocid(SwigcptrWritableDatabase) uint

func (_swig_base SwigcptrWritableDatabase) Get_lastdocid() uint {
	return _swig_wrap_WritableDatabase_get_lastdocid(_swig_base)
}

func _swig_wrap_WritableDatabase_get_avlength(SwigcptrWritableDatabase) float64

func (_swig_base SwigcptrWritableDatabase) Get_avlength() float64 {
	return _swig_wrap_WritableDatabase_get_avlength(_swig_base)
}

func _swig_wrap_WritableDatabase_get_termfreq(SwigcptrWritableDatabase, string) uint

func (_swig_base SwigcptrWritableDatabase) Get_termfreq(arg1 string) uint {
	return _swig_wrap_WritableDatabase_get_termfreq(_swig_base, arg1)
}

func _swig_wrap_WritableDatabase_term_exists(SwigcptrWritableDatabase, string) bool

func (_swig_base SwigcptrWritableDatabase) Term_exists(arg1 string) bool {
	return _swig_wrap_WritableDatabase_term_exists(_swig_base, arg1)
}

func _swig_wrap_WritableDatabase_get_collection_freq(SwigcptrWritableDatabase, string) uint

func (_swig_base SwigcptrWritableDatabase) Get_collection_freq(arg1 string) uint {
	return _swig_wrap_WritableDatabase_get_collection_freq(_swig_base, arg1)
}

func _swig_wrap_WritableDatabase_get_value_freq(SwigcptrWritableDatabase, uint) uint

func (_swig_base SwigcptrWritableDatabase) Get_value_freq(arg1 uint) uint {
	return _swig_wrap_WritableDatabase_get_value_freq(_swig_base, arg1)
}

func _swig_wrap_WritableDatabase_get_value_lower_bound(SwigcptrWritableDatabase, uint) string

func (_swig_base SwigcptrWritableDatabase) Get_value_lower_bound(arg1 uint) string {
	return _swig_wrap_WritableDatabase_get_value_lower_bound(_swig_base, arg1)
}

func _swig_wrap_WritableDatabase_get_value_upper_bound(SwigcptrWritableDatabase, uint) string

func (_swig_base SwigcptrWritableDatabase) Get_value_upper_bound(arg1 uint) string {
	return _swig_wrap_WritableDatabase_get_value_upper_bound(_swig_base, arg1)
}

func _swig_wrap_WritableDatabase_get_doclength_lower_bound(SwigcptrWritableDatabase) uint

func (_swig_base SwigcptrWritableDatabase) Get_doclength_lower_bound() uint {
	return _swig_wrap_WritableDatabase_get_doclength_lower_bound(_swig_base)
}

func _swig_wrap_WritableDatabase_get_doclength_upper_bound(SwigcptrWritableDatabase) uint

func (_swig_base SwigcptrWritableDatabase) Get_doclength_upper_bound() uint {
	return _swig_wrap_WritableDatabase_get_doclength_upper_bound(_swig_base)
}

func _swig_wrap_WritableDatabase_get_wdf_upper_bound(SwigcptrWritableDatabase, string) uint

func (_swig_base SwigcptrWritableDatabase) Get_wdf_upper_bound(arg1 string) uint {
	return _swig_wrap_WritableDatabase_get_wdf_upper_bound(_swig_base, arg1)
}

func _swig_wrap_WritableDatabase_valuestream_begin(SwigcptrWritableDatabase, uint) SwigcptrValueIterator

func (_swig_base SwigcptrWritableDatabase) Valuestream_begin(arg1 uint) ValueIterator {
	return _swig_wrap_WritableDatabase_valuestream_begin(_swig_base, arg1)
}

func _swig_wrap_WritableDatabase_valuestream_end(SwigcptrWritableDatabase, uint) SwigcptrValueIterator

func (_swig_base SwigcptrWritableDatabase) Valuestream_end(arg1 uint) ValueIterator {
	return _swig_wrap_WritableDatabase_valuestream_end(_swig_base, arg1)
}

func _swig_wrap_WritableDatabase_get_doclength(SwigcptrWritableDatabase, uint) uint

func (_swig_base SwigcptrWritableDatabase) Get_doclength(arg1 uint) uint {
	return _swig_wrap_WritableDatabase_get_doclength(_swig_base, arg1)
}

func _swig_wrap_WritableDatabase_keep_alive(SwigcptrWritableDatabase)

func (_swig_base SwigcptrWritableDatabase) Keep_alive() {
	_swig_wrap_WritableDatabase_keep_alive(_swig_base)
}

func _swig_wrap_WritableDatabase_get_document(SwigcptrWritableDatabase, uint) SwigcptrDocument

func (_swig_base SwigcptrWritableDatabase) Get_document(arg1 uint) Document {
	return _swig_wrap_WritableDatabase_get_document(_swig_base, arg1)
}

func _swig_wrap_WritableDatabase_get_spelling_suggestion__SWIG_0(SwigcptrWritableDatabase, string, uint) string

func (_swig_base SwigcptrWritableDatabase) Get_spelling_suggestion__SWIG_0(arg1 string, arg2 uint) string {
	return _swig_wrap_WritableDatabase_get_spelling_suggestion__SWIG_0(_swig_base, arg1, arg2)
}

func _swig_wrap_WritableDatabase_get_spelling_suggestion__SWIG_1(SwigcptrWritableDatabase, string) string

func (_swig_base SwigcptrWritableDatabase) Get_spelling_suggestion__SWIG_1(arg1 string) string {
	return _swig_wrap_WritableDatabase_get_spelling_suggestion__SWIG_1(_swig_base, arg1)
}

func (p SwigcptrWritableDatabase) Get_spelling_suggestion(a ...interface{}) string {
	argc := len(a)
	if argc == 1 {
		return p.Get_spelling_suggestion__SWIG_1(a[0].(string))
	}
	if argc == 2 {
		return p.Get_spelling_suggestion__SWIG_0(a[0].(string), a[1].(uint))
	}
	panic("No match for overloaded function call")
}

func _swig_wrap_WritableDatabase_spellings_begin(SwigcptrWritableDatabase) SwigcptrTermIterator

func (_swig_base SwigcptrWritableDatabase) Spellings_begin() TermIterator {
	return _swig_wrap_WritableDatabase_spellings_begin(_swig_base)
}

func _swig_wrap_WritableDatabase_spellings_end(SwigcptrWritableDatabase) SwigcptrTermIterator

func (_swig_base SwigcptrWritableDatabase) Spellings_end() TermIterator {
	return _swig_wrap_WritableDatabase_spellings_end(_swig_base)
}

func _swig_wrap_WritableDatabase_synonyms_begin(SwigcptrWritableDatabase, string) SwigcptrTermIterator

func (_swig_base SwigcptrWritableDatabase) Synonyms_begin(arg1 string) TermIterator {
	return _swig_wrap_WritableDatabase_synonyms_begin(_swig_base, arg1)
}

func _swig_wrap_WritableDatabase_synonyms_end(SwigcptrWritableDatabase, string) SwigcptrTermIterator

func (_swig_base SwigcptrWritableDatabase) Synonyms_end(arg1 string) TermIterator {
	return _swig_wrap_WritableDatabase_synonyms_end(_swig_base, arg1)
}

func _swig_wrap_WritableDatabase_synonym_keys_begin__SWIG_0(SwigcptrWritableDatabase, string) SwigcptrTermIterator

func (_swig_base SwigcptrWritableDatabase) Synonym_keys_begin__SWIG_0(arg1 string) TermIterator {
	return _swig_wrap_WritableDatabase_synonym_keys_begin__SWIG_0(_swig_base, arg1)
}

func _swig_wrap_WritableDatabase_synonym_keys_begin__SWIG_1(SwigcptrWritableDatabase) SwigcptrTermIterator

func (_swig_base SwigcptrWritableDatabase) Synonym_keys_begin__SWIG_1() TermIterator {
	return _swig_wrap_WritableDatabase_synonym_keys_begin__SWIG_1(_swig_base)
}

func (p SwigcptrWritableDatabase) Synonym_keys_begin(a ...interface{}) TermIterator {
	argc := len(a)
	if argc == 0 {
		return p.Synonym_keys_begin__SWIG_1()
	}
	if argc == 1 {
		return p.Synonym_keys_begin__SWIG_0(a[0].(string))
	}
	panic("No match for overloaded function call")
}

func _swig_wrap_WritableDatabase_synonym_keys_end__SWIG_0(SwigcptrWritableDatabase, string) SwigcptrTermIterator

func (_swig_base SwigcptrWritableDatabase) Synonym_keys_end__SWIG_0(arg1 string) TermIterator {
	return _swig_wrap_WritableDatabase_synonym_keys_end__SWIG_0(_swig_base, arg1)
}

func _swig_wrap_WritableDatabase_synonym_keys_end__SWIG_1(SwigcptrWritableDatabase) SwigcptrTermIterator

func (_swig_base SwigcptrWritableDatabase) Synonym_keys_end__SWIG_1() TermIterator {
	return _swig_wrap_WritableDatabase_synonym_keys_end__SWIG_1(_swig_base)
}

func (p SwigcptrWritableDatabase) Synonym_keys_end(a ...interface{}) TermIterator {
	argc := len(a)
	if argc == 0 {
		return p.Synonym_keys_end__SWIG_1()
	}
	if argc == 1 {
		return p.Synonym_keys_end__SWIG_0(a[0].(string))
	}
	panic("No match for overloaded function call")
}

func _swig_wrap_WritableDatabase_get_metadata(SwigcptrWritableDatabase, string) string

func (_swig_base SwigcptrWritableDatabase) Get_metadata(arg1 string) string {
	return _swig_wrap_WritableDatabase_get_metadata(_swig_base, arg1)
}

func _swig_wrap_WritableDatabase_metadata_keys_begin__SWIG_0(SwigcptrWritableDatabase, string) SwigcptrTermIterator

func (_swig_base SwigcptrWritableDatabase) Metadata_keys_begin__SWIG_0(arg1 string) TermIterator {
	return _swig_wrap_WritableDatabase_metadata_keys_begin__SWIG_0(_swig_base, arg1)
}

func _swig_wrap_WritableDatabase_metadata_keys_begin__SWIG_1(SwigcptrWritableDatabase) SwigcptrTermIterator

func (_swig_base SwigcptrWritableDatabase) Metadata_keys_begin__SWIG_1() TermIterator {
	return _swig_wrap_WritableDatabase_metadata_keys_begin__SWIG_1(_swig_base)
}

func (p SwigcptrWritableDatabase) Metadata_keys_begin(a ...interface{}) TermIterator {
	argc := len(a)
	if argc == 0 {
		return p.Metadata_keys_begin__SWIG_1()
	}
	if argc == 1 {
		return p.Metadata_keys_begin__SWIG_0(a[0].(string))
	}
	panic("No match for overloaded function call")
}

func _swig_wrap_WritableDatabase_metadata_keys_end__SWIG_0(SwigcptrWritableDatabase, string) SwigcptrTermIterator

func (_swig_base SwigcptrWritableDatabase) Metadata_keys_end__SWIG_0(arg1 string) TermIterator {
	return _swig_wrap_WritableDatabase_metadata_keys_end__SWIG_0(_swig_base, arg1)
}

func _swig_wrap_WritableDatabase_metadata_keys_end__SWIG_1(SwigcptrWritableDatabase) SwigcptrTermIterator

func (_swig_base SwigcptrWritableDatabase) Metadata_keys_end__SWIG_1() TermIterator {
	return _swig_wrap_WritableDatabase_metadata_keys_end__SWIG_1(_swig_base)
}

func (p SwigcptrWritableDatabase) Metadata_keys_end(a ...interface{}) TermIterator {
	argc := len(a)
	if argc == 0 {
		return p.Metadata_keys_end__SWIG_1()
	}
	if argc == 1 {
		return p.Metadata_keys_end__SWIG_0(a[0].(string))
	}
	panic("No match for overloaded function call")
}

func _swig_wrap_WritableDatabase_get_uuid(SwigcptrWritableDatabase) string

func (_swig_base SwigcptrWritableDatabase) Get_uuid() string {
	return _swig_wrap_WritableDatabase_get_uuid(_swig_base)
}

func WritableDatabaseCheck(string, int) int
func (p SwigcptrWritableDatabase) SwigIsDatabase() {
}

func (p SwigcptrWritableDatabase) SwigGetDatabase() Database {
	return SwigcptrDatabase(p.Swigcptr())
}

type WritableDatabase interface {
	Swigcptr() uintptr
	SwigIsWritableDatabase()
	Commit()
	Flush()
	Begin_transaction(a ...interface{})
	Commit_transaction()
	Cancel_transaction()
	Add_document(arg2 Document) uint
	Delete_document(a ...interface{})
	Replace_document(a ...interface{}) interface{}
	Add_spelling(a ...interface{})
	Remove_spelling(a ...interface{})
	Add_synonym(arg2 string, arg3 string)
	Remove_synonym(arg2 string, arg3 string)
	Clear_synonyms(arg2 string)
	Set_metadata(arg2 string, arg3 string)
	Add_database(arg1 Database)
	Reopen() bool
	Close()
	Postlist_begin(arg1 string) PostingIterator
	Postlist_end(arg1 string) PostingIterator
	Termlist_begin(arg1 uint) TermIterator
	Termlist_end(arg1 uint) TermIterator
	Has_positions() bool
	Positionlist_begin(arg1 uint, arg2 string) PositionIterator
	Positionlist_end(arg1 uint, arg2 string) PositionIterator
	Allterms_begin(a ...interface{}) TermIterator
	Allterms_end(a ...interface{}) TermIterator
	Get_doccount() uint
	Get_lastdocid() uint
	Get_avlength() float64
	Get_termfreq(arg1 string) uint
	Term_exists(arg1 string) bool
	Get_collection_freq(arg1 string) uint
	Get_value_freq(arg1 uint) uint
	Get_value_lower_bound(arg1 uint) string
	Get_value_upper_bound(arg1 uint) string
	Get_doclength_lower_bound() uint
	Get_doclength_upper_bound() uint
	Get_wdf_upper_bound(arg1 string) uint
	Valuestream_begin(arg1 uint) ValueIterator
	Valuestream_end(arg1 uint) ValueIterator
	Get_doclength(arg1 uint) uint
	Keep_alive()
	Get_document(arg1 uint) Document
	Get_spelling_suggestion(a ...interface{}) string
	Spellings_begin() TermIterator
	Spellings_end() TermIterator
	Synonyms_begin(arg1 string) TermIterator
	Synonyms_end(arg1 string) TermIterator
	Synonym_keys_begin(a ...interface{}) TermIterator
	Synonym_keys_end(a ...interface{}) TermIterator
	Get_metadata(arg1 string) string
	Metadata_keys_begin(a ...interface{}) TermIterator
	Metadata_keys_end(a ...interface{}) TermIterator
	Get_uuid() string
	SwigIsDatabase()
	SwigGetDatabase() Database
}


type SwigcptrSwigDirector_LatLongMetric uintptr
type SwigDirector_LatLongMetric interface {
	Swigcptr() uintptr;
}
func (p SwigcptrSwigDirector_LatLongMetric) Swigcptr() uintptr {
	return uintptr(p)
}

type SwigcptrSwigDirector_Compactor uintptr
type SwigDirector_Compactor interface {
	Swigcptr() uintptr;
}
func (p SwigcptrSwigDirector_Compactor) Swigcptr() uintptr {
	return uintptr(p)
}

type SwigcptrSwigDirector_KeyMaker uintptr
type SwigDirector_KeyMaker interface {
	Swigcptr() uintptr;
}
func (p SwigcptrSwigDirector_KeyMaker) Swigcptr() uintptr {
	return uintptr(p)
}

type SwigcptrSwigDirector_Stopper uintptr
type SwigDirector_Stopper interface {
	Swigcptr() uintptr;
}
func (p SwigcptrSwigDirector_Stopper) Swigcptr() uintptr {
	return uintptr(p)
}

type SwigcptrSwigDirector_ExpandDecider uintptr
type SwigDirector_ExpandDecider interface {
	Swigcptr() uintptr;
}
func (p SwigcptrSwigDirector_ExpandDecider) Swigcptr() uintptr {
	return uintptr(p)
}

type SwigcptrSwigDirector_MatchDecider uintptr
type SwigDirector_MatchDecider interface {
	Swigcptr() uintptr;
}
func (p SwigcptrSwigDirector_MatchDecider) Swigcptr() uintptr {
	return uintptr(p)
}

type SwigcptrSwigDirector_StemImplementation uintptr
type SwigDirector_StemImplementation interface {
	Swigcptr() uintptr;
}
func (p SwigcptrSwigDirector_StemImplementation) Swigcptr() uintptr {
	return uintptr(p)
}

type SwigcptrSwigDirector_PostingSource uintptr
type SwigDirector_PostingSource interface {
	Swigcptr() uintptr;
}
func (p SwigcptrSwigDirector_PostingSource) Swigcptr() uintptr {
	return uintptr(p)
}

type SwigcptrVoid uintptr
type Void interface {
	Swigcptr() uintptr;
}
func (p SwigcptrVoid) Swigcptr() uintptr {
	return uintptr(p)
}

type SwigcptrSwigDirector_ValueRangeProcessor uintptr
type SwigDirector_ValueRangeProcessor interface {
	Swigcptr() uintptr;
}
func (p SwigcptrSwigDirector_ValueRangeProcessor) Swigcptr() uintptr {
	return uintptr(p)
}

type SwigcptrSwigDirector_FieldProcessor uintptr
type SwigDirector_FieldProcessor interface {
	Swigcptr() uintptr;
}
func (p SwigcptrSwigDirector_FieldProcessor) Swigcptr() uintptr {
	return uintptr(p)
}

type SwigcptrSwigDirector_MatchSpy uintptr
type SwigDirector_MatchSpy interface {
	Swigcptr() uintptr;
}
func (p SwigcptrSwigDirector_MatchSpy) Swigcptr() uintptr {
	return uintptr(p)
}

